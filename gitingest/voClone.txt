Directory structure:
└── v0-clone/
    ├── README.md
    ├── components.json
    ├── config.ts
    ├── eslint.config.mjs
    ├── middleware.ts
    ├── next.config.ts
    ├── package.json
    ├── postcss.config.mjs
    ├── tsconfig.json
    ├── .env.example
    ├── app/
    │   ├── client-page.tsx
    │   ├── globals.css
    │   ├── layout.tsx
    │   ├── page.tsx
    │   ├── actions/
    │   │   ├── github.ts
    │   │   ├── inngest.ts
    │   │   ├── session.ts
    │   │   └── vibekit.ts
    │   ├── api/
    │   │   ├── auth/
    │   │   │   └── [...nextauth]/
    │   │   │       └── route.ts
    │   │   ├── check-url/
    │   │   │   └── route.ts
    │   │   └── inngest/
    │   │       └── route.ts
    │   ├── session/
    │   │   └── [id]/
    │   │       ├── client-page.tsx
    │   │       └── page.tsx
    │   └── sessions/
    │       ├── client-page.tsx
    │       └── page.tsx
    ├── components/
    │   ├── booting-machine.tsx
    │   ├── file-diff.tsx
    │   ├── login-dialog.tsx
    │   ├── markdown.tsx
    │   ├── navbar.tsx
    │   ├── templates-section.tsx
    │   ├── chat/
    │   │   ├── chat-form.tsx
    │   │   ├── index.tsx
    │   │   └── message.tsx
    │   ├── preview/
    │   │   ├── code.tsx
    │   │   ├── index.tsx
    │   │   └── toolbar.tsx
    │   └── ui/
    │       ├── avatar.tsx
    │       ├── button.tsx
    │       ├── dialog.tsx
    │       ├── dropdown-menu.tsx
    │       ├── form.tsx
    │       ├── input.tsx
    │       ├── label.tsx
    │       ├── scroll-area.tsx
    │       ├── select.tsx
    │       ├── separator.tsx
    │       ├── skeleton.tsx
    │       ├── table.tsx
    │       ├── tabs.tsx
    │       ├── text-shimmer.tsx
    │       └── theme-toggle.tsx
    ├── convex/
    │   ├── messages.ts
    │   ├── schema.ts
    │   ├── sessions.ts
    │   └── _generated/
    │       ├── api.d.ts
    │       ├── api.js
    │       ├── dataModel.d.ts
    │       ├── server.d.ts
    │       └── server.js
    ├── lib/
    │   ├── auth.ts
    │   ├── hooks.ts
    │   ├── inngest.ts
    │   └── utils.ts
    ├── providers/
    │   ├── auth-provider.tsx
    │   ├── convex-provider.tsx
    │   └── theme-provider.tsx
    └── public/
        └── convex.webp


Files Content:

================================================
FILE: templates/v0-clone/README.md
================================================
# Vibe0 (v0-clone)

A Next.js app template powered by VibeKit SDK, Inngest, Convex, and Anthropic Claude. This application enables collaborative AI-driven development with real-time updates, GitHub integration, and sandboxed code execution using Northflank.

## ✨ Features

- 🤖 AI-powered code generation using Anthropic Claude
- 🔄 Real-time task updates with Inngest
- 🐙 GitHub integration for repository management
- 🏗️ Sandboxed environment execution with Northflank
- 📦 State management with Convex
- 🎨 Modern UI with Tailwind CSS and shadcn/ui
- 🗃️ TypeScript-first, modular architecture

## 🚀 Prerequisites

Before you begin, make sure you have:

- **Node.js** (v18 or higher)
- **npm** or **yarn**
- **Inngest CLI** (for local development)
- **Convex account** (for state management)
- **Anthropic API key**
- **Northflank API key and project ID**
- **GitHub OAuth app** (for GitHub integration)

## 📦 Installation

### 1. Install Dependencies

```bash
npm install
```

### 2. Install Inngest CLI

The Inngest CLI is required for running background functions locally:

```bash
# Install globally
npm install -g inngest

# Or using npx (recommended)
npx inngest-cli@latest
```

### 3. Set Up Environment Variables

Create a `.env.local` file in the root directory with the following variables:

```bash
# Anthropic Claude API Key
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Northflank Configuration
NORTHFLANK_API_KEY=your_northflank_api_key_here
NORTHFLANK_PROJECT_ID=your_northflank_project_id_here

# Convex Configuration
NEXT_PUBLIC_CONVEX_URL=your_convex_url_here

# GitHub OAuth Configuration
AUTH_GITHUB_ID=your_github_client_id
AUTH_GITHUB_SECRET=your_github_client_secret
```

#### Getting API Keys:

- **Anthropic API Key**: Get it from [Anthropic Console](https://console.anthropic.com/)
- **Northflank API Key/Project ID**: [Northflank Dashboard](https://northflank.com/)
- **Convex URL**: [Convex Console](https://dashboard.convex.dev/)
- **GitHub OAuth**: Create a new OAuth app in your [GitHub Developer Settings](https://github.com/settings/developers)

## 🛠️ Development

### 1. Start the Inngest Dev Server

In one terminal, start the Inngest development server:

```bash
npx inngest-cli@latest dev
```

This will start the Inngest development server on `http://localhost:8288`.

### 2. Start the Next.js Development Server

In another terminal, start the Next.js application:

```bash
npm run dev
```

The application will be available at `http://localhost:3000`.

## 📋 Available Scripts

- `npm run dev` - Start the development server
- `npm run build` - Build the application for production
- `npm start` - Start the production server
- `npm run lint` - Run ESLint for code quality

## 🏗️ Project Structure

```
├── app/                    # Next.js App Router
│   ├── actions/            # Server actions
│   ├── api/                # API routes
│   └── session/            # Session pages
├── components/             # Reusable UI components
│   └── ui/                 # shadcn/ui components
├── convex/                 # Convex schema and functions
├── lib/                    # Utility libraries and configurations
├── providers/              # React providers (auth, convex, theme)
├── public/                 # Static assets
```

## 🔧 Configuration

### Inngest Functions

The application uses Inngest for background task processing. Main functions are defined in `lib/inngest.ts` and handle AI code generation, session management, and real-time updates.

### VibeKit Integration

The app integrates with VibeKit SDK for AI code generation, supporting:

- Anthropic Claude as the AI model
- Northflank for sandboxed environments
- GitHub repository integration
- Real-time streaming updates

### Convex

Convex is used for state management and real-time data sync. See the `convex/` directory for schema and server functions.

## 🌐 Deployment

### Environment Variables for Production

Set all required environment variables in your production environment:

```bash
AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=
NORTHFLANK_API_KEY=
NORTHFLANK_PROJECT_ID=
NEXT_PUBLIC_CONVEX_URL=
ANTHROPIC_API_KEY=
```

### Deploy to Vercel

1. Connect your repository to Vercel
2. Set the environment variables in the Vercel dashboard
3. Deploy

### Inngest in Production

For production, configure Inngest properly:

1. Set up an Inngest account at [inngest.com](https://inngest.com)
2. Configure your production Inngest endpoint
3. Update your deployment to use the production Inngest configuration

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📄 License

This project is licensed under the MIT License.

## 🆘 Troubleshooting

### Common Issues

1. **Inngest functions not working**: Make sure the Inngest CLI is running (`npx inngest-cli@latest dev`)
2. **API key errors**: Verify all environment variables are set correctly
3. **GitHub OAuth issues**: Check your GitHub OAuth app configuration and callback URLs
4. **Northflank connection problems**: Ensure your Northflank API key and project ID are valid
5. **Convex issues**: Make sure your Convex URL is correct and your account is active

### Getting Help

- Check the [Inngest Documentation](https://www.inngest.com/docs)
- Visit [VibeKit Documentation](https://vibekit.dev/docs)
- Review [Next.js Documentation](https://nextjs.org/docs)
- See [Convex Documentation](https://docs.convex.dev/)
- Explore [Anthropic API Docs](https://docs.anthropic.com/claude)
- Visit [Northflank Docs](https://northflank.com/docs)

---

Built with ❤️ using Next.js, VibeKit, Inngest, Convex, and Anthropic Claude



================================================
FILE: templates/v0-clone/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}


================================================
FILE: templates/v0-clone/config.ts
================================================
export interface Template {
  id: string;
  name: string;
  description: string;
  repository: string;
  logos: string[];
  image?: string;
  startCommands: {
    command: string;
    status: "INSTALLING_DEPENDENCIES" | "STARTING_DEV_SERVER";
    background?: boolean;
  }[];
  secrets?: Record<string, string>;
  systemPrompt: string;
}

export const templates: Template[] = [
  {
    id: "nextjs",
    name: "Next.js",
    description:
      "Build scalable web applications with server-side rendering, static site generation, and API routes",
    repository: "https://github.com/superagent-ai/vibekit-nextjs",
    logos: ["nextjs.svg"],
    startCommands: [
      {
        command: "npm i",
        status: "INSTALLING_DEPENDENCIES",
      },
      {
        command: "npm run dev",
        status: "STARTING_DEV_SERVER",
        background: true,
      },
    ],
    systemPrompt:
      "# GOAL\nYou are an helpful assistant that is tasked with helping the user build a NextJS app.\n" +
      "- The NextJS dev server is running on port 3000.\n" +
      "- ShadCN UI is installed, togehter with all the ShadCN components.\n",
  },
  {
    id: "nextjs-supabase-auth",
    name: "Next.js + Supabase + Auth",
    description:
      "Build a production-ready SaaS with authentication, database, and real-time features out of the box",
    repository:
      "https://github.com/vercel/next.js/tree/canary/examples/with-supabase",
    logos: ["nextjs.svg", "supabase.jpeg"],
    startCommands: [
      {
        command: "npm i",
        status: "INSTALLING_DEPENDENCIES",
      },
      {
        command: "npm run dev",
        status: "STARTING_DEV_SERVER",
        background: true,
      },
    ],
    systemPrompt:
      "# GOAL\nYou are an helpful assistant that is tasked with helping the user build a NextJS app.\n" +
      "- The NextJS dev server is running on port 3000.\n" +
      "- ShadCN UI is installed, togehter with all the ShadCN components.\n" +
      "- Supabase CLI and Auth is installed and ready to be used if needed.\n",
  },
  {
    id: "nextjs-convex-clerk",
    name: "Next.js + Convex + Clerk",
    description:
      "Create collaborative apps with real-time sync, instant auth, and seamless user management",
    repository: "https://github.com/get-convex/convex-clerk-users-table",
    logos: ["nextjs.svg", "convex.webp", "clerk.svg"],
    startCommands: [
      {
        command: "npm i",
        status: "INSTALLING_DEPENDENCIES",
      },
      {
        command: "npm run dev",
        status: "STARTING_DEV_SERVER",
        background: true,
      },
      {
        command: "npx convex dev",
        status: "STARTING_DEV_SERVER",
        background: true,
      },
    ],
    systemPrompt:
      "# GOAL\nYou are an helpful assistant that is tasked with helping the user build a NextJS app.\n" +
      "- The NextJS dev server is running on port 3000.\n" +
      "- The convex command npx convex dev is running\n" +
      "- ShadCN UI is installed, togehter with all the ShadCN components.\n" +
      "- Convex CLI is is installed and ready to be used if needed.\n",
  },
  {
    id: "shopify-hydrogen",
    name: "Shopify",
    description:
      "Build fast headless commerce storefronts with Shopify's official framework Hydrogen.",
    repository: "superagent-ai/vibekit-shopify",
    logos: ["shopify.jpeg"],
    startCommands: [
      {
        command: "npm i",
        status: "INSTALLING_DEPENDENCIES",
      },
      {
        command: "npm i -g @shopify/cli@latest",
        status: "INSTALLING_DEPENDENCIES",
      },
      {
        command: "echo 'SESSION_SECRET=\"foobar\"' > .env",
        status: "INSTALLING_DEPENDENCIES",
      },
      {
        command: "shopify hydrogen dev --codegen --host",
        background: true,
        status: "STARTING_DEV_SERVER",
      },
    ],
    secrets: {
      SESSION_SECRET: "foobar",
    },
    systemPrompt:
      "# GOAL\nYou are an helpful assistant that is tasked with helping the user build a Shopify Hydrogen app.\n" +
      "- The hydrogen server is running on port 3000.\n" +
      "- The Shopify CLI is installed and ready to be used if needed.\n",
  },
  {
    id: "fastapi-nextjs",
    name: "FastAPI + Next.js",
    description:
      "Build modern full-stack apps with FastAPI backend and Next.js frontend.",
    repository: "tiangolo/full-stack-fastapi-template",
    logos: ["nextjs.svg", "fastapi.jpg"],
    startCommands: [
      {
        command: "npm i",
        status: "INSTALLING_DEPENDENCIES",
      },
      {
        command: "npm run dev",
        status: "STARTING_DEV_SERVER",
        background: true,
      },
    ],
    systemPrompt:
      "# GOAL\nYou are an helpful assistant that is tasked with helping the user build a FastAPI and Next.js app.\n" +
      "- The NextJS dev server is running on port 3000.\n" +
      "- The FastAPI server is running on port 8000.\n" +
      "- ShadCN UI is installed, togehter with all the ShadCN components.\n",
  },
];



================================================
FILE: templates/v0-clone/eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



================================================
FILE: templates/v0-clone/middleware.ts
================================================
export { auth as middleware } from "@/lib/auth";



================================================
FILE: templates/v0-clone/next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;



================================================
FILE: templates/v0-clone/package.json
================================================
{
  "name": "v0-clone",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/anthropic": "^1.2.12",
    "@hookform/resolvers": "^5.1.1",
    "@inngest/realtime": "^0.3.1",
    "@octokit/rest": "^22.0.0",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.12",
    "@vibe-kit/sdk": "^0.0.39",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "convex": "^1.25.0",
    "diff": "^8.0.2",
    "framer-motion": "^12.19.1",
    "inngest": "^3.39.2",
    "lucide-react": "^0.523.0",
    "next": "15.3.4",
    "next-auth": "^5.0.0-beta.29",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.58.1",
    "react-markdown": "^10.1.0",
    "react-remove-scroll": "^2.7.1",
    "react-syntax-highlighter": "^15.6.1",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.1",
    "tailwind-merge": "^3.3.1",
    "usehooks-ts": "^3.1.1",
    "zod": "^3.25.67"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/react-syntax-highlighter": "^15.5.13",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.4",
    "typescript": "^5"
  }
}



================================================
FILE: templates/v0-clone/postcss.config.mjs
================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;



================================================
FILE: templates/v0-clone/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: templates/v0-clone/.env.example
================================================
ANTHROPIC_API_KEY=

NORTHFLANK_API_KEY=
NORTHFLANK_PROJECT_ID=vibe0

CONVEX_DEPLOYMENT=

NEXT_PUBLIC_CONVEX_URL=

AUTH_SECRET=vibe0
AUTH_GITHUB_ID=
AUTH_GITHUB_SECRET=
NEXTAUTH_URL=http://localhost:3000


================================================
FILE: templates/v0-clone/app/client-page.tsx
================================================
"use client";

import { useRouter } from "next/navigation";
import { useState } from "react";
import { useMutation } from "convex/react";
import { useSession } from "next-auth/react";
import Link from "next/link";

import { api } from "@/convex/_generated/api";

import ChatForm from "@/components/chat/chat-form";
import TemplatesSection from "@/components/templates-section";
import LoginDialog from "@/components/login-dialog";
import { createSessionAction } from "./actions/vibekit";
import { Repo } from "./actions/github";
import { templates } from "@/config";

export default function ClientPage() {
  const { data: session } = useSession();
  const [isLoginDialogOpen, setIsLoginDialogOpen] = useState(false);
  const router = useRouter();
  const createSession = useMutation(api.sessions.create);
  const addMessage = useMutation(api.messages.add);

  const handleChatSubmit = async (message: string, repository?: Repo) => {
    if (!session) {
      setIsLoginDialogOpen(true);
      return;
    }

    const sessionParams = {
      name: "Untitled",
      status: "IN_PROGRESS" as const,
      createdBy: session?.githubId?.toString(),
      templateId: "nextjs",
      ...(repository && { repository: repository.full_name }),
    };

    const sessionId = await createSession(sessionParams);

    const actionParams = {
      sessionId,
      message,
      ...(repository
        ? { repository: repository.full_name }
        : { template: templates.find((t) => t.id === "nextjs") }),
    };

    await createSessionAction(actionParams);

    await addMessage({
      sessionId,
      role: "user",
      content: message,
    });

    router.push(`/session/${sessionId}`);
  };

  const handleTemplateSelect = async (id: string) => {
    const template = templates.find((t) => t.id === id);

    if (template) {
      const sessionId = await createSession({
        name: "Untitled",
        status: "IN_PROGRESS",
        repository: template.repository,
        templateId: id,
        createdBy: session?.githubId?.toString(),
      });

      await createSessionAction({
        sessionId,
        template: template,
      });

      router.push(`/session/${sessionId}`);
    }
  };

  return (
    <>
      <LoginDialog
        open={isLoginDialogOpen}
        onOpenChange={setIsLoginDialogOpen}
      />
      <div className="flex flex-col gap-y-[100px] h-screen bg-background border rounded-lg mb-2">
        <div className="w-full md:max-w-2xl mx-auto md:px-10 px-4 flex flex-col gap-y-10 justify-center mt-[90px]">
          <div className="flex items-center justify-center gap-2">
            <h1 className="text-3xl md:text-4xl font-bold text-center">
              What can I help you ship?
            </h1>
          </div>
          <ChatForm
            onSubmit={handleChatSubmit}
            showRepositories={Boolean(session)}
          />
        </div>
        <div className="flex flex-col gap-y-8">
          <TemplatesSection onSelect={handleTemplateSelect} />
        </div>
        <footer className="mt-auto py-8 text-center justify-end">
          <p className="text-xs text-gray-500 dark:text-gray-400">
            <Link href="/sessions" className="hover:underline">
              Sessions{" "}
            </Link>
            •{" "}
            <Link href="/settings" className="hover:underline">
              Settings{" "}
            </Link>
            •{" "}
            <a href="/billing" className="hover:underline">
              Billing
            </a>{" "}
            •{" "}
            <a
              href="https://vibekit.sh/privacy-policy"
              target="_blank"
              rel="noopener noreferrer"
              className="hover:underline"
            >
              Privacy
            </a>{" "}
            •{" "}
            <a
              href="https://vibekit.sh/terms-of-service"
              target="_blank"
              rel="noopener noreferrer"
              className="hover:underline"
            >
              Terms
            </a>{" "}
            •{" "}
            <a
              href="https://x.com/vibekit_sh"
              target="_blank"
              rel="noopener noreferrer"
              className="hover:underline"
            >
              X
            </a>{" "}
            •{" "}
            <a
              href="https://github.com/superagent-ai/vibekit/tree/main/templates/v0-clone"
              target="_blank"
              rel="noopener noreferrer"
              className="hover:underline"
            >
              GitHub
            </a>
          </p>
        </footer>
      </div>
    </>
  );
}



================================================
FILE: templates/v0-clone/app/globals.css
================================================
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@keyframes tvFlicker {
  0% { 
    opacity: 0.1; 
    transform: scale(1); 
    filter: brightness(1) contrast(1);
  }
  10% { 
    opacity: 0.8; 
    transform: scale(1.02); 
    filter: brightness(1.2) contrast(1.5);
  }
  20% { 
    opacity: 0.3; 
    transform: scale(0.98); 
    filter: brightness(0.8) contrast(0.8);
  }
  30% { 
    opacity: 0.9; 
    transform: scale(1.01); 
    filter: brightness(1.1) contrast(1.3);
  }
  50% { 
    opacity: 0.2; 
    transform: scale(1); 
    filter: brightness(0.9) contrast(1.1);
  }
  70% { 
    opacity: 0.7; 
    transform: scale(1.03); 
    filter: brightness(1.3) contrast(1.2);
  }
  85% { 
    opacity: 0.4; 
    transform: scale(0.97); 
    filter: brightness(0.7) contrast(0.9);
  }
  100% { 
    opacity: 0.1; 
    transform: scale(1); 
    filter: brightness(1) contrast(1);
  }
}

@keyframes fastPulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

.animate-fast-pulse {
  animation: fastPulse 0.75s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

.scrollbar-hide {
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.scrollbar-hide::-webkit-scrollbar {
  display: none;
}



================================================
FILE: templates/v0-clone/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { AuthProvider } from "@/providers/auth-provider";
import { ThemeProvider } from "@/providers/theme-provider";

import Navbar from "@/components/navbar";
import { ConvexClientProvider } from "@/providers/convex-provider";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <link rel="icon" href="/favicon.svg" />
      <body
        className={`${geistSans.variable} ${geistMono.variable} bg-muted/40 antialiased h-screen flex flex-col gap-y-2`}
        style={{ padding: "0 8px" }}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <AuthProvider>
            <ConvexClientProvider>
              <Navbar />
              {children}
            </ConvexClientProvider>
          </AuthProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}



================================================
FILE: templates/v0-clone/app/page.tsx
================================================
import { Metadata } from "next";
import ClientPage from "./client-page";

export const metadata: Metadata = {
  title: "Vibe0 | VibeKit",
  description: "A v0 clone built with VibeKit",
};

export default function Home() {
  return <ClientPage />;
}



================================================
FILE: templates/v0-clone/app/actions/github.ts
================================================
"use server";

import { Octokit } from "@octokit/rest";
import { auth } from "@/lib/auth";

export interface Repo {
  id: number;
  name: string;
  full_name: string;
  private: boolean;
  description: string | null;
  html_url: string;
  default_branch: string;
  updated_at: string | null;
  language: string | null;
  stargazers_count: number;
  forks_count: number;
}

export async function listRepos(): Promise<Repo[]> {
  const session = await auth();

  if (!session?.accessToken) {
    throw new Error(
      "No GitHub access token provided. Please authenticate first."
    );
  }

  const octokit = new Octokit({
    auth: session.accessToken,
  });

  try {
    // Get user's own repositories and organizations in parallel
    const [{ data: userRepositories }, { data: organizations }] =
      await Promise.all([
        octokit.rest.repos.listForAuthenticatedUser({
          sort: "updated",
          per_page: 100,
          visibility: "all",
          affiliation: "owner,collaborator,organization_member",
        }),
        octokit.rest.orgs.listForAuthenticatedUser({
          per_page: 100,
        }),
      ]);

    // Get repositories from each organization
    const orgRepositoriesPromises = organizations.map(async (org) => {
      try {
        const { data: orgRepos } = await octokit.rest.repos.listForOrg({
          org: org.login,
          per_page: 100,
          sort: "updated",
        });
        return orgRepos;
      } catch (error) {
        // If we can't access org repos (permissions), just return empty array
        console.warn(`Could not fetch repos for org ${org.login}:`, error);
        return [];
      }
    });

    const orgRepositoriesArrays = await Promise.all(orgRepositoriesPromises);
    const orgRepositories = orgRepositoriesArrays.flat();

    // Combine and deduplicate repositories
    const allRepositories = [...userRepositories, ...orgRepositories];
    const uniqueRepositories = allRepositories.filter(
      (repo, index, array) => array.findIndex((r) => r.id === repo.id) === index
    );

    return uniqueRepositories.map(
      (repo): Repo => ({
        id: repo.id,
        name: repo.name,
        full_name: repo.full_name,
        private: repo.private,
        description: repo.description,
        html_url: repo.html_url,
        default_branch: repo.default_branch || "main",
        updated_at: repo.updated_at || null,
        language: repo.language || null,
        stargazers_count: repo.stargazers_count || 0,
        forks_count: repo.forks_count || 0,
      })
    );
  } catch (error) {
    console.error("GitHub API Error:", error);
    throw new Error(
      `Failed to fetch repositories: ${error instanceof Error ? error.message : "Unknown error"}`
    );
  }
}

export async function getBranches(owner: string, repo: string) {
  const session = await auth();

  if (!session?.accessToken) {
    throw new Error(
      "No GitHub access token provided. Please authenticate first."
    );
  }

  const octokit = new Octokit({
    auth: session.accessToken,
  });

  try {
    const { data } = await octokit.rest.repos.listBranches({
      owner,
      repo,
    });

    return data.map((branch) => ({
      name: branch.name,
      protected: branch.protected,
    }));
  } catch (error) {
    console.error("GitHub API Error:", error);
    throw new Error(
      `Failed to fetch branches: ${error instanceof Error ? error.message : "Unknown error"}`
    );
  }
}

export async function createRepo({
  repoName,
  token,
  isPrivate = true,
}: {
  repoName: string;
  token: string;
  isPrivate?: boolean;
}) {
  if (!token) {
    throw new Error(
      "No GitHub access token provided. Please authenticate first."
    );
  }

  const octokit = new Octokit({
    auth: token,
  });

  try {
    const { data } = await octokit.rest.repos.createForAuthenticatedUser({
      name: repoName,
      private: isPrivate,
    });

    return {
      full_name: data.full_name,
      private: data.private,
      description: data.description,
      html_url: data.html_url,
      default_branch: data.default_branch || "main",
      created_at: data.created_at || null,
      language: data.language || null,
      stargazers_count: data.stargazers_count || 0,
      forks_count: data.forks_count || 0,
    };
  } catch (error) {
    console.error("GitHub API Error:", error);
    throw new Error(
      `Failed to create repository: ${error instanceof Error ? error.message : "Unknown error"}`
    );
  }
}



================================================
FILE: templates/v0-clone/app/actions/inngest.ts
================================================
"use server";
import { getSubscriptionToken, Realtime } from "@inngest/realtime";

import { getInngestApp, sessionChannel } from "@/lib/inngest";

export type SessionChannelToken = Realtime.Token<
  typeof sessionChannel,
  ["status", "update"]
>;

export async function fetchRealtimeSubscriptionToken(): Promise<SessionChannelToken> {
  const token = await getSubscriptionToken(getInngestApp(), {
    channel: sessionChannel(),
    topics: ["status", "update"],
  });

  return token;
}



================================================
FILE: templates/v0-clone/app/actions/session.ts
================================================
"use server";
import { generateObject } from "ai";
import { anthropic } from "@ai-sdk/anthropic";
import { z } from "zod";

export async function generateSessionTitle(prompt: string) {
  const response = await generateObject({
    model: anthropic("claude-3-5-sonnet-20240620"),
    schema: z.object({
      title: z.string(),
    }),
    prompt:
      `Generate a title for a session based on the following prompt: ${prompt}\n` +
      "Maximum of three words.",
  });

  return response.object.title;
}



================================================
FILE: templates/v0-clone/app/actions/vibekit.ts
================================================
"use server";
import { VibeKit, VibeKitConfig } from "@vibe-kit/sdk";
import { fetchMutation } from "convex/nextjs";

import { api } from "@/convex/_generated/api";
import { inngest } from "@/lib/inngest";
import { auth } from "@/lib/auth";
import { Id } from "@/convex/_generated/dataModel";
import { Template } from "@/config";

export async function runAgentAction({
  sessionId,
  id,
  message,
  template,
  repository,
  token,
}: {
  sessionId: string;
  id: string;
  message: string;
  template?: Template;
  token: string;
  repository?: string;
}) {
  await inngest.send({
    name: "vibe0/run.agent",
    data: {
      sessionId,
      id,
      message,
      template,
      repository,
      token,
    },
  });
}

export async function createSessionAction({
  sessionId,
  message,
  repository,
  template,
}: {
  sessionId: string;
  message?: string;
  repository?: string;
  template?: Template;
}) {
  const session = await auth();
  await inngest.send({
    name: "vibe0/create.session",
    data: {
      sessionId,
      message,
      repository,
      token: session?.accessToken,
      template,
    },
  });
}

export async function deleteSessionAction(sessionId: string) {
  const config: VibeKitConfig = {
    agent: {
      type: "claude",
      model: {
        apiKey: process.env.ANTHROPIC_API_KEY!,
      },
    },
    environment: {
      northflank: {
        apiKey: process.env.NORTHFLANK_API_KEY!,
        projectId: process.env.NORTHFLANK_PROJECT_ID!,
      },
    },
    sessionId,
  };

  const vibekit = new VibeKit(config);

  await vibekit.setSession(sessionId);

  await vibekit.kill();
}

export const createPullRequestAction = async ({
  id,
  sessionId,
  repository,
}: {
  id: Id<"sessions">;
  sessionId: string;
  repository: string;
}) => {
  const session = await auth();

  if (!session?.accessToken) {
    throw new Error("No GitHub token found. Please authenticate first.");
  }

  const config: VibeKitConfig = {
    agent: {
      type: "claude",
      model: {
        apiKey: process.env.ANTHROPIC_API_KEY!,
      },
    },
    environment: {
      northflank: {
        apiKey: process.env.NORTHFLANK_API_KEY!,
        projectId: process.env.NORTHFLANK_PROJECT_ID!,
      },
    },
    github: {
      token: session?.accessToken,
      repository,
    },
    sessionId,
  };

  const vibekit = new VibeKit(config);

  const pr = await vibekit.createPullRequest(
    {
      name: "🖖 vibe0",
      color: "42460b",
      description: "Pull request created by vibe0",
    },
    "vibe0"
  );

  await fetchMutation(api.sessions.update, {
    id,
    pullRequest: pr,
  });
};



================================================
FILE: templates/v0-clone/app/api/auth/[...nextauth]/route.ts
================================================
import { handlers } from "@/lib/auth";
export const { GET, POST } = handlers;
export const runtime = "edge";



================================================
FILE: templates/v0-clone/app/api/check-url/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  const body = await req.json();
  const { url } = body;

  if (!url) {
    return NextResponse.json({ error: "URL is required" }, { status: 400 });
  }

  console.log("Checking URL", url);

  try {
    const response = await fetch(url);
    console.log("Response", response.status);
    const available = response.status >= 200 && response.status < 400;
    return NextResponse.json({ available });
  } catch (error) {
    console.error("Error fetching URL:", error);
    return NextResponse.json(
      {
        available: false,
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}



================================================
FILE: templates/v0-clone/app/api/inngest/route.ts
================================================
import { serve } from "inngest/next";
import { inngest, runAgent, createSession } from "@/lib/inngest";

export const maxDuration = 800;

// Create an API that serves zero functions
export const { GET, POST, PUT } = serve({
  client: inngest,
  functions: [runAgent, createSession],
});



================================================
FILE: templates/v0-clone/app/session/[id]/client-page.tsx
================================================
"use client";

import { useQuery } from "convex/react";

import Chat from "@/components/chat";
import Preview from "@/components/preview";
import { api } from "@/convex/_generated/api";
import { Id } from "@/convex/_generated/dataModel";

export default function ClientPage({ id }: { id: string }) {
  // Use Convex query to get session data
  const session = useQuery(api.sessions.getById, {
    id: id as Id<"sessions">,
  });

  return (
    <div className="flex h-screen overflow-hidden gap-x-2 pb-2">
      {session && <Chat session={session} />}
      {session && <Preview session={session} />}
    </div>
  );
}



================================================
FILE: templates/v0-clone/app/session/[id]/page.tsx
================================================
import ClientPage from "./client-page";

interface Props {
  params: Promise<{ id: string }>;
}

export default async function Home({ params }: Props) {
  const { id } = await params;

  return <ClientPage id={id} />;
}



================================================
FILE: templates/v0-clone/app/sessions/client-page.tsx
================================================
"use client";
import { useQuery, useMutation } from "convex/react";
import { api } from "@/convex/_generated/api";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useState, useMemo } from "react";
import { Loader, SearchIcon, XIcon, Trash2 } from "lucide-react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import { Id } from "@/convex/_generated/dataModel";
import { deleteSessionAction } from "../actions/vibekit";

const ITEMS_PER_PAGE = 15;

export default function SessionsClientPage() {
  const { data: session } = useSession();
  const sessions = useQuery(
    api.sessions.list,
    session?.githubId
      ? {
          createdBy: session.githubId.toString(),
        }
      : "skip"
  );
  const deleteSession = useMutation(api.sessions.remove);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const [deletingSessionId, setDeletingSessionId] = useState<string | null>(
    null
  );
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [sessionToDelete, setSessionToDelete] = useState<{
    id: string;
    sessionId?: string;
    name: string;
  } | null>(null);
  const router = useRouter();

  // Get unique statuses for filter dropdown
  const uniqueStatuses = useMemo(() => {
    if (!sessions) return [];
    return [...new Set(sessions.map((session) => session.status))].sort();
  }, [sessions]);

  // Filter and paginate data
  const filteredAndPaginatedData = useMemo(() => {
    if (!sessions) return { data: [], totalPages: 0, filteredCount: 0 };

    // Apply filters
    const filtered = sessions.filter((session) => {
      const matchesSearch =
        searchTerm === "" ||
        session.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (session.sessionId &&
          session.sessionId.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (session.statusMessage &&
          session.statusMessage
            .toLowerCase()
            .includes(searchTerm.toLowerCase()));

      const matchesStatus =
        statusFilter === "" || session.status === statusFilter;

      return matchesSearch && matchesStatus;
    });

    const filteredCount = filtered.length;

    // Apply pagination
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    const data = filtered.slice(startIndex, endIndex);
    const totalPages = Math.ceil(filteredCount / ITEMS_PER_PAGE);

    return { data, totalPages, filteredCount };
  }, [sessions, searchTerm, statusFilter, currentPage]);

  // Reset to first page when filters change
  const handleSearchChange = (value: string) => {
    setSearchTerm(value);
    setCurrentPage(1);
  };

  const handleStatusFilterChange = (value: string) => {
    setStatusFilter(value);
    setCurrentPage(1);
  };

  const clearFilters = () => {
    setSearchTerm("");
    setStatusFilter("");
    setCurrentPage(1);
  };

  const handleSessionClick = (sessionId: string) => {
    router.push(`/session/${sessionId}`);
  };

  const goToPage = (page: number) => {
    setCurrentPage(page);
  };

  const goToPrevious = () => {
    setCurrentPage((prev) => Math.max(prev - 1, 1));
  };

  const goToNext = () => {
    setCurrentPage((prev) =>
      Math.min(prev + 1, filteredAndPaginatedData.totalPages)
    );
  };

  const formatStatus = (status: string) => {
    return status
      .replace(/_/g, " ")
      .toLowerCase()
      .replace(/\b\w/g, (l) => l.toUpperCase());
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "RUNNING":
        return "text-green-600 bg-green-50 border-green-200";
      case "IN_PROGRESS":
        return "text-blue-600 bg-blue-50 border-blue-200";
      case "CLONING_REPO":
      case "INSTALLING_DEPENDENCIES":
      case "STARTING_DEV_SERVER":
      case "CREATING_TUNNEL":
        return "text-yellow-600 bg-yellow-50 border-yellow-200";
      default:
        return "text-gray-600 bg-gray-50 border-gray-200";
    }
  };

  const handleDeleteSession = (
    id: string,
    sessionName: string,
    sessionId?: string
  ) => {
    setSessionToDelete({ id, sessionId, name: sessionName });

    setDeleteDialogOpen(true);
  };

  const confirmDeleteSession = async () => {
    if (!sessionToDelete) return;

    try {
      setDeletingSessionId(sessionToDelete.id);

      await deleteSession({ id: sessionToDelete.id as Id<"sessions"> });

      if (sessionToDelete.sessionId) {
        await deleteSessionAction(sessionToDelete.sessionId);
      }

      setDeleteDialogOpen(false);
      setSessionToDelete(null);
    } catch (error) {
      console.error("Failed to delete session:", error);
      alert("Failed to delete session. Please try again.");
    } finally {
      setDeletingSessionId(null);
    }
  };

  const cancelDeleteSession = () => {
    setDeleteDialogOpen(false);
    setSessionToDelete(null);
  };

  if (!sessions) {
    return (
      <div className="flex flex-col h-screen bg-background border rounded-lg">
        <div className="p-6 text-muted-foreground">
          <Loader className="size-5 animate-spin mb-2" />
        </div>
      </div>
    );
  }

  const hasActiveFilters = searchTerm !== "" || statusFilter !== "";

  return (
    <div className="flex flex-col h-screen bg-background border rounded-lg mb-2">
      <div className="p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-2xl font-semibold">Sessions</h1>
            <p className="text-sm text-muted-foreground">
              Manage and monitor your development sessions
            </p>
          </div>
          <div className="text-sm text-muted-foreground">
            {hasActiveFilters ? (
              <span>
                {filteredAndPaginatedData.filteredCount} of {sessions.length}{" "}
                sessions
              </span>
            ) : (
              <span>{sessions.length} total sessions</span>
            )}
          </div>
        </div>

        {/* Search and Filter Controls */}
        <div className="flex flex-col sm:flex-row gap-4 mb-6">
          <div className="relative flex-1">
            <SearchIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
            <Input
              placeholder="Search by name, session ID, or status message..."
              value={searchTerm}
              onChange={(e) => handleSearchChange(e.target.value)}
              className="pl-10 pr-10"
            />
            {searchTerm && (
              <button
                onClick={() => handleSearchChange("")}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground"
              >
                <XIcon className="w-4 h-4" />
              </button>
            )}
          </div>

          <div className="flex items-center gap-2">
            <Select
              value={statusFilter}
              onValueChange={handleStatusFilterChange}
            >
              <SelectTrigger className="w-48">
                <SelectValue placeholder="All statuses" />
              </SelectTrigger>
              <SelectContent>
                {uniqueStatuses.map((status) => (
                  <SelectItem key={status} value={status}>
                    {formatStatus(status)}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {hasActiveFilters && (
            <Button
              variant="outline"
              size="sm"
              onClick={clearFilters}
              className="whitespace-nowrap"
            >
              <XIcon className="w-4 h-4 mr-1" />
              Clear filters
            </Button>
          )}
        </div>

        <div className="border rounded-lg">
          <ScrollArea className="h-[calc(100vh-300px)]">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-[200px] px-4">Name</TableHead>
                  <TableHead>Session ID</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Preview url</TableHead>
                  <TableHead className="w-[40px]">&nbsp;</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredAndPaginatedData.data.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={5} className="text-center py-8">
                      <div className="text-muted-foreground">
                        {hasActiveFilters ? (
                          <div>
                            <p>No sessions match your filters</p>
                            <Button
                              variant="link"
                              onClick={clearFilters}
                              className="mt-2"
                            >
                              Clear filters to see all sessions
                            </Button>
                          </div>
                        ) : (
                          "No sessions found"
                        )}
                      </div>
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredAndPaginatedData.data.map((session) => (
                    <TableRow
                      key={session.id}
                      className="cursor-pointer hover:bg-muted/50"
                      onClick={() => handleSessionClick(session.id)}
                    >
                      <TableCell className="font-medium px-4">
                        {session.name}
                      </TableCell>
                      <TableCell className="font-mono text-sm">
                        {session.sessionId || "N/A"}
                      </TableCell>
                      <TableCell>
                        <span
                          className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(session.status)}`}
                        >
                          {formatStatus(session.status)}
                        </span>
                      </TableCell>
                      <TableCell>
                        {session.tunnelUrl ? (
                          <a
                            href={session.tunnelUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-blue-600 hover:underline truncate block max-w-[200px]"
                            onClick={(e) => e.stopPropagation()}
                          >
                            {session.tunnelUrl}
                          </a>
                        ) : (
                          "N/A"
                        )}
                      </TableCell>
                      <TableCell onClick={(e) => e.stopPropagation()}>
                        <Button
                          variant="outline"
                          size="icon"
                          onClick={() =>
                            handleDeleteSession(
                              session.id,
                              session.name,
                              session.sessionId
                            )
                          }
                          disabled={deletingSessionId === session.id}
                          className="size-7"
                        >
                          {deletingSessionId === session.id ? (
                            <Loader className="w-4 h-4 animate-spin" />
                          ) : (
                            <Trash2 className="w-4 h-4" />
                          )}
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </ScrollArea>
        </div>
        {/* Pagination */}
        {filteredAndPaginatedData.totalPages > 1 && (
          <div className="flex items-center justify-between mt-4">
            <div className="text-sm text-muted-foreground">
              Showing {(currentPage - 1) * ITEMS_PER_PAGE + 1} to{" "}
              {Math.min(
                currentPage * ITEMS_PER_PAGE,
                filteredAndPaginatedData.filteredCount
              )}{" "}
              of {filteredAndPaginatedData.filteredCount}{" "}
              {hasActiveFilters ? "filtered " : ""}sessions
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={goToPrevious}
                disabled={currentPage === 1}
              >
                Previous
              </Button>

              <div className="flex items-center space-x-1">
                {Array.from(
                  { length: filteredAndPaginatedData.totalPages },
                  (_, i) => i + 1
                ).map((page) => (
                  <Button
                    key={page}
                    variant={currentPage === page ? "default" : "outline"}
                    size="sm"
                    onClick={() => goToPage(page)}
                    className="w-8 h-8"
                  >
                    {page}
                  </Button>
                ))}
              </div>

              <Button
                variant="outline"
                size="sm"
                onClick={goToNext}
                disabled={currentPage === filteredAndPaginatedData.totalPages}
              >
                Next
              </Button>
            </div>
          </div>
        )}
      </div>

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Delete Session</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete the session &quot;
              {sessionToDelete?.name}&quot;? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={cancelDeleteSession}
              disabled={deletingSessionId !== null}
            >
              Cancel
            </Button>
            <Button
              onClick={confirmDeleteSession}
              disabled={deletingSessionId !== null}
            >
              {deletingSessionId === sessionToDelete?.id && (
                <Loader className="w-4 h-4 animate-spin" />
              )}
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}



================================================
FILE: templates/v0-clone/app/sessions/page.tsx
================================================
import { Metadata } from "next";
import SessionsClientPage from "./client-page";

export const metadata: Metadata = {
  title: "Sessions | vibe0",
  description: "Sessions list",
};

export default async function SessionsPage() {
  return <SessionsClientPage />;
}


================================================
FILE: templates/v0-clone/components/booting-machine.tsx
================================================
import { useRef, useEffect } from "react";
import { TextShimmer } from "./ui/text-shimmer";
import { Loader } from "lucide-react";

export default function BootingMachine({
  label,
  size = "md",
}: {
  label: string;
  size?: "md" | "lg";
}) {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    const generateStatic = () => {
      const imageData = ctx.createImageData(canvas.width, canvas.height);
      const data = imageData.data;

      // Adjust static intensity based on size
      const staticThreshold = size === "lg" ? 0.3 : 0.5; // lg = more white noise

      for (let i = 0; i < data.length; i += 4) {
        const random = Math.random();
        let noise;

        if (random > staticThreshold) {
          noise = 255; // white
        } else if (random > staticThreshold - 0.2) {
          noise = size === "lg" ? Math.floor(Math.random() * 100) + 155 : 128; // light gray with variation
        } else {
          noise = size === "lg" ? Math.floor(Math.random() * 80) + 50 : 64; // dark gray with variation
        }

        data[i] = noise; // red
        data[i + 1] = noise; // green
        data[i + 2] = noise; // blue
        data[i + 3] = 255; // fully opaque
      }

      ctx.putImageData(imageData, 0, 0);
    };

    // Adjust animation speed based on size
    const animationSpeed = size === "lg" ? 30 : 50; // lg = faster updates
    const interval = setInterval(generateStatic, animationSpeed);
    generateStatic(); // Initial render

    return () => clearInterval(interval);
  }, [size]);

  return (
    <div className="w-auto px-4 rounded-full h-12 border border-muted-foreground/30 bg-background relative overflow-hidden flex items-center justify-center gap-x-2">
      <Loader className="size-4 animate-spin text-muted-foreground" />
      <div className="flex items-center gap-x-1">
        <span className="text-xs font-mono text-orange-500">SANDBOX:</span>
        <TextShimmer className=" text-xs font-mono">{label}</TextShimmer>
      </div>
    </div>
  );
}



================================================
FILE: templates/v0-clone/components/file-diff.tsx
================================================
"use client";

import { useMemo } from "react";
import { cn } from "@/lib/utils";
import * as Diff from "diff";

interface DiffPart {
  added?: boolean;
  removed?: boolean;
  value: string;
}

interface DiffLine {
  type: "added" | "removed" | "unchanged" | "modified";
  content: string;
  oldLineNumber?: number;
  newLineNumber?: number;
  parts?: DiffPart[];
}

interface DiffViewerProps {
  oldContent: string;
  newContent: string;
  className?: string;
}

export default function DiffViewer({
  oldContent,
  newContent,
  className,
}: DiffViewerProps) {
  const diffLines = useMemo(() => {
    return computeDiff(oldContent, newContent);
  }, [oldContent, newContent]);

  return (
    <div className={cn("overflow-hidden bg-background", className)}>
      {/* Diff Content */}
      <div className="font-mono text-xs">
        {diffLines.map((line, index) => (
          <div
            key={index}
            className={cn(
              "flex",
              line.type === "added" && "bg-green-50 dark:bg-green-700/20",
              line.type === "removed" && "bg-red-50 dark:bg-red-700/20",
              line.type === "modified" && "bg-yellow-50 dark:bg-yellow-700/20",
              line.type === "unchanged" && "bg-background"
            )}
          >
            {/* Line Numbers */}
            <div className="flex">
              <div className="w-10 px-2 py-1 text-right text-gray-400 dark:text-gray-500 border-r bg-sidebar select-none">
                {line.oldLineNumber || ""}
              </div>
              <div className="w-10 px-2 py-1 text-right text-gray-400 dark:text-gray-500 border-r bg-sidebar select-none">
                {line.newLineNumber || ""}
              </div>
            </div>

            {/* Diff Indicator */}
            <div className="w-8 px-2 py-1 text-center select-none">
              {line.type === "added" && (
                <span className="text-green-600 dark:text-green-400 font-bold">
                  +
                </span>
              )}
              {line.type === "removed" && (
                <span className="text-red-600 dark:text-red-400 font-bold">
                  -
                </span>
              )}
              {line.type === "modified" && (
                <span className="text-yellow-600 dark:text-yellow-400 font-bold">
                  ~
                </span>
              )}
              {line.type === "unchanged" && (
                <span className="text-primary"> </span>
              )}
            </div>

            {/* Content */}
            <div className="flex-1 px-2 py-1 whitespace-pre-wrap break-all">
              {line.type === "modified" && line.parts ? (
                <span>
                  {line.parts.map((part, partIndex) => (
                    <span
                      key={partIndex}
                      className={cn(
                        part.added &&
                          "bg-green-200 dark:bg-green-900/30 text-green-800 dark:text-green-200",
                        part.removed &&
                          "bg-red-200 dark:bg-red-900/30 text-red-800 dark:text-red-200 line-through",
                        !part.added &&
                          !part.removed &&
                          "text-gray-900 dark:text-gray-100"
                      )}
                    >
                      {part.value}
                    </span>
                  ))}
                </span>
              ) : (
                <span
                  className={cn(
                    line.type === "added" &&
                      "text-green-800 dark:text-green-200",
                    line.type === "removed" && "text-red-800 dark:text-red-200",
                    line.type === "unchanged" && "text-primary"
                  )}
                >
                  {line.content || " "}
                </span>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

function computeDiff(oldContent: string, newContent: string): DiffLine[] {
  const result: DiffLine[] = [];

  // Use diff package for line-level comparison first
  const lineDiff = Diff.diffLines(oldContent, newContent);

  let oldLineNumber = 1;
  let newLineNumber = 1;

  for (const change of lineDiff) {
    const lines = change.value.split("\n");
    // Remove the last empty line if it exists (from split)
    if (lines[lines.length - 1] === "") {
      lines.pop();
    }

    if (change.added) {
      // Added lines
      for (const line of lines) {
        result.push({
          type: "added",
          content: line,
          newLineNumber: newLineNumber++,
        });
      }
    } else if (change.removed) {
      // Removed lines
      for (const line of lines) {
        result.push({
          type: "removed",
          content: line,
          oldLineNumber: oldLineNumber++,
        });
      }
    } else {
      // Unchanged lines
      for (const line of lines) {
        result.push({
          type: "unchanged",
          content: line,
          oldLineNumber: oldLineNumber++,
          newLineNumber: newLineNumber++,
        });
      }
    }
  }

  // Now enhance with character-level diffing for better precision
  return enhanceWithCharacterDiff(result);
}

function enhanceWithCharacterDiff(diffLines: DiffLine[]): DiffLine[] {
  // Look for adjacent removed/added pairs that might be modifications
  const final: DiffLine[] = [];
  let i = 0;

  while (i < diffLines.length) {
    const current = diffLines[i];
    const next = diffLines[i + 1];

    if (
      current?.type === "removed" &&
      next?.type === "added" &&
      current.oldLineNumber &&
      next.newLineNumber
    ) {
      // This is likely a modified line - do character-level diff
      const charDiff = Diff.diffChars(current.content, next.content);

      final.push({
        type: "modified",
        content: current.content,
        oldLineNumber: current.oldLineNumber,
        newLineNumber: next.newLineNumber,
        parts: charDiff,
      });

      i += 2; // Skip both lines
    } else {
      final.push(current);
      i++;
    }
  }

  return final;
}



================================================
FILE: templates/v0-clone/components/login-dialog.tsx
================================================
"use client";
import Image from "next/image";
import { LucideGithub } from "lucide-react";
import { signIn } from "next-auth/react";

import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

export default function LoginDialog({
  open,
  onOpenChange,
}: {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="w-[400px]">
        <div className="mb-2 flex flex-col items-center gap-10">
          <Image
            src="logo.svg"
            alt="logo"
            width={100}
            height={100}
            className="mt-6"
          />
          <DialogHeader>
            <DialogTitle className="sm:text-center">
              Sign in to vibe0
            </DialogTitle>
            <DialogDescription className="sm:text-center">
              Sign in to your account to continue.
            </DialogDescription>
          </DialogHeader>
        </div>
        <Button
          type="button"
          className="w-full"
          onClick={() => signIn("github")}
        >
          <LucideGithub />
          Login with Github
        </Button>
        <p className="text-center text-xs text-muted-foreground">
          This will open Github OAuth login page.
        </p>
      </DialogContent>
    </Dialog>
  );
}



================================================
FILE: templates/v0-clone/components/markdown.tsx
================================================
import React, { memo, useState } from "react";
import ReactMarkdown, { type Components } from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypeRaw from "rehype-raw";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { CopyIcon, CheckIcon } from "lucide-react";
import { useTheme } from "next-themes";
import {
  oneDark,
  oneLight,
} from "react-syntax-highlighter/dist/cjs/styles/prism";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Separator } from "@/components/ui/separator";
import {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
} from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";

type CodeComponentProps = React.ComponentPropsWithoutRef<"code"> & {
  inline?: boolean;
  className?: string;
  children?: React.ReactNode;
  style?: React.CSSProperties;
};

export const CodeComponent: React.FC<CodeComponentProps> = ({
  inline,
  className,
  children,
  ...props
}) => {
  const match = /language-(\w+)/.exec(className || "");
  const { theme } = useTheme();
  const [copied, setCopied] = useState(false);

  if (inline) {
    return (
      <code
        className="text-sm bg-zinc-100 dark:bg-zinc-800 py-0.5 px-1 rounded-md"
        style={{ wordBreak: "break-all" }}
        {...props}
      >
        {children}
      </code>
    );
  }

  // Code block with language
  if (match) {
    return (
      <div className="border rounded-lg border-muted-foreground/20 my-2 bg-sidebar overflow-hidden">
        <div className="flex items-center justify-between bg-muted px-2 py-1 border-b">
          <span className="text-xs text-muted-foreground">{match[1]}</span>
          <Button
            variant="ghost"
            size="icon"
            className="size-7"
            onClick={() => {
              navigator.clipboard.writeText(String(children));
              setCopied(true);
              setTimeout(() => setCopied(false), 2000);
            }}
          >
            {copied ? (
              <CheckIcon className="w-4 h-4 text-green-500" />
            ) : (
              <CopyIcon className="w-4 h-4" />
            )}
          </Button>
        </div>
        <ScrollArea className="max-w-full">
          <div className="px-4 py-2" style={{ maxWidth: "100%" }}>
            <SyntaxHighlighter
              language={match[1]}
              style={theme === "dark" ? oneDark : oneLight}
              customStyle={{
                fontSize: "12.5px",
                backgroundColor: "transparent",
                padding: "0",
                margin: "0",
                background: "none",
                overflow: "visible",
              }}
              wrapLongLines={true}
              PreTag="div"
              codeTagProps={{
                style: {
                  whiteSpace: "pre-wrap",
                  wordBreak: "break-all",
                  overflowWrap: "anywhere",
                },
              }}
            >
              {String(children).replace(/\n$/, "")}
            </SyntaxHighlighter>
          </div>
        </ScrollArea>
      </div>
    );
  }

  // Code block without language
  return (
    <code
      className="relative rounded !bg-sidebar border border-muted-foreground/20 px-[0.3rem] py-[0.2rem] font-mono text-xs"
      style={{ wordBreak: "break-all" }}
    >
      {children}
    </code>
  );
};

const components: Partial<Components> = {
  code: CodeComponent,
  pre: ({ children }) => <>{children}</>,
  ol: ({ children, ...props }) => (
    <ol className="list-decimal list-outside ml-4" {...props}>
      {children}
    </ol>
  ),
  li: ({ children, ...props }) => (
    <li className="py-1 text-sm" {...props}>
      {children}
    </li>
  ),
  ul: ({ children, ...props }) => (
    <ul className="list-disc list-outside ml-4" {...props}>
      {children}
    </ul>
  ),
  strong: ({ children, ...props }) => (
    <span className="font-semibold" {...props}>
      {children}
    </span>
  ),
  p: ({ children, ...props }) => (
    <p
      className="mb-2 text-sm"
      style={{ wordBreak: "break-word", overflowWrap: "break-word" }}
      {...props}
    >
      {children}
    </p>
  ),
  a: ({ children, href, ...props }) => {
    return (
      <Link
        passHref
        className="text-blue-500 hover:underline"
        style={{
          wordBreak: "break-all",
          maxWidth: "100%",
          display: "inline-block",
          textOverflow: "ellipsis",
        }}
        href={href || "#"}
        target="_blank"
        rel="noreferrer"
        {...props}
      >
        {children}
      </Link>
    );
  },
  h1: ({ children, ...props }) => (
    <h1
      className="text-3xl font-semibold mt-6 mb-2"
      style={{ wordBreak: "break-word" }}
      {...props}
    >
      {children}
    </h1>
  ),
  h2: ({ children, ...props }) => (
    <h2
      className="text-2xl font-semibold mt-6 mb-2"
      style={{ wordBreak: "break-word" }}
      {...props}
    >
      {children}
    </h2>
  ),
  h3: ({ children, ...props }) => (
    <h3
      className="text-xl font-semibold mt-6 mb-2"
      style={{ wordBreak: "break-word" }}
      {...props}
    >
      {children}
    </h3>
  ),
  h4: ({ children, ...props }) => (
    <h4
      className="text-lg font-semibold mt-6 mb-2"
      style={{ wordBreak: "break-word" }}
      {...props}
    >
      {children}
    </h4>
  ),
  h5: ({ children, ...props }) => (
    <h5
      className="text-base font-semibold mt-6 mb-2"
      style={{ wordBreak: "break-word" }}
      {...props}
    >
      {children}
    </h5>
  ),
  h6: ({ children, ...props }) => (
    <h6
      className="text-sm font-semibold mt-6 mb-2"
      style={{ wordBreak: "break-word" }}
      {...props}
    >
      {children}
    </h6>
  ),
  img: ({ alt, src, title, ...props }) => (
    <img
      className="max-w-full h-auto my-2 rounded"
      alt={alt}
      src={src}
      title={title}
      {...props}
    />
  ),
  blockquote: ({ children, ...props }) => (
    <blockquote
      className="border-l-4 border-gray-300 dark:border-gray-700 pl-4 italic my-4"
      style={{ wordBreak: "break-word" }}
      {...props}
    >
      {children}
    </blockquote>
  ),
  table: ({ children, ...props }) => <Table {...props}>{children}</Table>,
  thead: ({ children, ...props }) => (
    <TableHeader {...props}>{children}</TableHeader>
  ),
  tbody: ({ children, ...props }) => (
    <TableBody {...props}>{children}</TableBody>
  ),
  tfoot: ({ children, ...props }) => (
    <TableFooter {...props}>{children}</TableFooter>
  ),
  tr: ({ children, ...props }) => <TableRow {...props}>{children}</TableRow>,
  th: ({ children, ...props }) => <TableHead {...props}>{children}</TableHead>,
  td: ({ children, ...props }) => <TableCell {...props}>{children}</TableCell>,
  hr: () => <Separator className="my-8 h-1" />,
};

const remarkPlugins = [remarkGfm];
const rehypePlugins = [rehypeRaw];

const NonMemoizedMarkdown = ({ children }: { children: string }) => {
  return (
    <div style={{ width: "100%", maxWidth: "100%" }}>
      <ReactMarkdown
        remarkPlugins={remarkPlugins}
        rehypePlugins={rehypePlugins}
        components={components}
      >
        {children}
      </ReactMarkdown>
    </div>
  );
};

export const Markdown = memo(
  NonMemoizedMarkdown,
  (prevProps, nextProps) => prevProps.children === nextProps.children
);



================================================
FILE: templates/v0-clone/components/navbar.tsx
================================================
"use client";

import {
  Plus,
  ChevronDown,
  Monitor,
  Settings,
  CreditCard,
  LogOut,
  Lock,
  GitPullRequest,
  Loader,
} from "lucide-react";
import Link from "next/link";
import { usePathname, useRouter } from "next/navigation";
import Image from "next/image";
import { useState, useEffect, useRef, useCallback } from "react";
import { useQuery, useMutation } from "convex/react";
import { useSession, signOut, signIn } from "next-auth/react";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { api } from "@/convex/_generated/api";
import { Id } from "@/convex/_generated/dataModel";
import { createSessionAction } from "@/app/actions/vibekit";
import { Avatar, AvatarImage, AvatarFallback } from "@radix-ui/react-avatar";
import { ThemeToggle } from "@/components/ui/theme-toggle";
import { createPullRequestAction } from "@/app/actions/vibekit";
import { templates } from "@/config";

export default function Navbar() {
  const { data: authSession } = useSession();
  const [isCreatingPullRequest, setIsCreatingPullRequest] =
    useState<boolean>(false);
  const pathname = usePathname();
  const isHome = pathname === "/";
  const isSession = pathname.includes("/session") && pathname !== "/sessions";
  const router = useRouter();

  const createSession = useMutation(api.sessions.create);
  const [mounted, setMounted] = useState(false);
  const sessionId = isSession ? pathname.split("/session/")[1] : null;
  const [isEditing, setIsEditing] = useState(false);
  const editRef = useRef<HTMLSpanElement>(null);
  const originalValue = useRef<string>("");

  const session = useQuery(
    api.sessions.getById,
    sessionId ? { id: sessionId as Id<"sessions"> } : "skip"
  );

  const updateSession = useMutation(api.sessions.update);

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    if (isEditing && editRef.current) {
      editRef.current.focus();
      // Select all text
      const range = document.createRange();
      range.selectNodeContents(editRef.current);
      const selection = window.getSelection();
      selection?.removeAllRanges();
      selection?.addRange(range);
    }
  }, [isEditing]);

  const handleStartEdit = () => {
    if (session) {
      originalValue.current = session.name;
      setIsEditing(true);
    }
  };

  const handleSave = async () => {
    if (sessionId && editRef.current && session) {
      const newValue = editRef.current.textContent?.trim() || "";
      if (newValue && newValue !== originalValue.current) {
        await updateSession({
          id: sessionId as Id<"sessions">,
          name: newValue,
        });
      } else if (!newValue) {
        // Restore original value if empty
        editRef.current.textContent = originalValue.current;
      }
    }
    setIsEditing(false);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      e.preventDefault();
      handleSave();
    } else if (e.key === "Escape") {
      e.preventDefault();
      if (editRef.current) {
        editRef.current.textContent = originalValue.current;
      }
      setIsEditing(false);
    }
  };

  const handleNewSession = useCallback(async () => {
    const template = templates.find((t) => t.id === "nextjs");

    if (!template) return;

    const sessionId = await createSession({
      name: "Untitled session",
      status: "IN_PROGRESS",
      templateId: template.id,
    });

    await createSessionAction({
      sessionId,
      template,
    });

    router.push(`/session/${sessionId}`);
  }, [createSession, router]);

  const handleCreatePullRequest = useCallback(async () => {
    setIsCreatingPullRequest(true);
    const pr = await createPullRequestAction({
      id: sessionId as Id<"sessions">,
      sessionId: session?.sessionId as string,
      repository: session?.repository as string,
    });

    console.log(pr);
    setIsCreatingPullRequest(false);
  }, [session, sessionId]);

  return (
    <div
      className="flex justify-between items-center pt-2"
      style={{ width: "100%" }}
    >
      <div className="flex items-center gap-x-2">
        <Link
          passHref
          href="/"
          className="hover:opacity-30 transition-all duration-300"
        >
          <div className="flex items-center gap-x-1 text-muted-foreground">
            <Image src="/mark.png" alt="Superagent" width={20} height={20} />
            <p className="font-semibold">vibe0</p>
          </div>
        </Link>
        {mounted && authSession && (
          <span className="ml-1 text-muted-foreground/40">/</span>
        )}
        {mounted && authSession && (
          <>
            <DropdownMenu>
              <DropdownMenuTrigger className="flex items-center gap-x-1 px-1 py-1 rounded-md hover:bg-muted transition-colors cursor-pointer group">
                <Avatar className="h-6 w-6 mr-1">
                  <AvatarImage
                    className="rounded-md"
                    src={authSession.user?.image || undefined}
                    alt={authSession.user?.name || "User"}
                  />
                  <AvatarFallback className="text-xs">
                    {authSession.user?.name?.charAt(0) || "U"}
                  </AvatarFallback>
                </Avatar>
                <span className="text-sm font-medium">
                  {authSession.user?.name}
                </span>
                <ChevronDown className="size-4 text-muted-foreground group-hover:text-foreground transition-colors" />
              </DropdownMenuTrigger>
              <DropdownMenuContent align="center" className="w-48">
                <DropdownMenuItem
                  className="font-medium"
                  onClick={handleNewSession}
                >
                  <Plus className="mr-2 h-4 w-4" />
                  New session
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  className="font-medium"
                  onClick={() => router.push("/sessions")}
                >
                  <Monitor className="mr-2 h-4 w-4" />
                  Sessions
                </DropdownMenuItem>
                <DropdownMenuItem className="font-medium">
                  <Settings className="mr-2 h-4 w-4" />
                  Settings
                </DropdownMenuItem>
                <DropdownMenuItem className="font-medium">
                  <CreditCard className="mr-2 h-4 w-4" />
                  Billing
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <ThemeToggle />
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  className="font-medium"
                  onClick={() => {
                    signOut();
                  }}
                >
                  <LogOut className="mr-2 h-4 w-4" />
                  Sign out
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
            {isSession && <span className="text-muted-foreground/40">/</span>}
          </>
        )}
        {mounted && isSession && session && (
          <div className="flex items-center gap-x-2">
            <button
              onClick={handleStartEdit}
              className="flex items-center gap-x-1 px-1 py-1.5 rounded-md hover:bg-muted transition-colors group cursor-pointer"
            >
              <span
                ref={editRef}
                contentEditable={isEditing}
                suppressContentEditableWarning={true}
                onBlur={handleSave}
                onKeyDown={handleKeyDown}
                className={`text-sm font-medium outline-none ${
                  isEditing ? "bg-muted rounded" : ""
                }`}
              >
                {session.name}
              </span>
            </button>
          </div>
        )}
      </div>
      <div className="flex items-center gap-x-2">
        {session && session.pullRequest && !isHome && (
          <Link href={session.pullRequest.html_url} target="_blank">
            <Button variant="outline" className="h-8">
              <GitPullRequest />
              View Pull Request
            </Button>
          </Link>
        )}{" "}
        {session && !session.pullRequest && !isHome && (
          <Button
            variant="outline"
            className="h-8"
            onClick={handleCreatePullRequest}
            disabled={isCreatingPullRequest || session?.status !== "RUNNING"}
          >
            {isCreatingPullRequest ? (
              <Loader className="animate-spin" />
            ) : (
              <GitPullRequest />
            )}
            Create Pull Request
          </Button>
        )}
        {isHome && authSession && (
          <Button className="h-8" onClick={handleNewSession}>
            <Plus /> New session
          </Button>
        )}
        {mounted && !authSession && (
          <Button className="h-8" onClick={() => signIn("github")}>
            <Lock />
            Sign in with Github
          </Button>
        )}
        {authSession && isSession && (
          <Button
            className="h-8"
            disabled={isCreatingPullRequest || session?.status !== "RUNNING"}
          >
            Publish
          </Button>
        )}
      </div>
    </div>
  );
}



================================================
FILE: templates/v0-clone/components/templates-section.tsx
================================================
"use client";

import { ChevronLeft, ChevronRight, ExternalLink } from "lucide-react";
import { Avatar, AvatarImage } from "@/components/ui/avatar";
import { useRef } from "react";
import { Button } from "@/components/ui/button";
import { templates } from "@/config";

function TemplateCard({
  template,
  onSelect,
}: {
  template: (typeof templates)[0];
  onSelect: (id: string) => void;
}) {
  const handleTemplateSelect = async () => {
    onSelect(template.id);
  };

  return (
    <div
      className="min-w-[276px] h-40 bg-background rounded-lg border p-4 flex flex-col gap-3 hover:bg-muted/50 transition-colors cursor-pointer group snap-start"
      onClick={handleTemplateSelect}
    >
      <div className="flex items-start justify-between">
        <div className="*:data-[slot=avatar]:ring-background flex -space-x-2 *:data-[slot=avatar]:ring-2">
          {template.logos.map((logo) => (
            <Avatar key={logo} className="w-6 h-6 bg-background">
              <AvatarImage src={logo} alt={logo} />
            </Avatar>
          ))}
        </div>
        <ExternalLink className="w-4 h-4 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity" />
      </div>
      <div className="flex-1">
        <h3 className="font-medium text-sm mb-2">{template.name}</h3>
        <p className="text-sm text-muted-foreground leading-relaxed">
          {template.description}
        </p>
      </div>
    </div>
  );
}

export default function TemplatesSection({
  onSelect,
}: {
  onSelect: (id: string) => void;
}) {
  const scrollRef = useRef<HTMLDivElement>(null);

  const scrollLeft = () => {
    if (scrollRef.current) {
      const container = scrollRef.current;
      const scrollAmount = Math.min(container.clientWidth * 0.75, 400);
      container.scrollBy({ left: -scrollAmount, behavior: "smooth" });
    }
  };

  const scrollRight = () => {
    if (scrollRef.current) {
      const container = scrollRef.current;
      const scrollAmount = Math.min(container.clientWidth * 0.75, 400);
      container.scrollBy({ left: scrollAmount, behavior: "smooth" });
    }
  };

  return (
    <div className="flex flex-col gap-y-4 max-w-6xl w-full mx-auto md:px-0 px-4">
      <div className="flex items-center justify-between">
        <p className="font-medium">Templates</p>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="icon"
            className="h-8 w-8"
            onClick={scrollLeft}
          >
            <ChevronLeft className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="icon"
            className="h-8 w-8"
            onClick={scrollRight}
          >
            <ChevronRight className="h-4 w-4" />
          </Button>
        </div>
      </div>
      <div
        ref={scrollRef}
        className="flex gap-4 overflow-hidden overflow-x-auto scrollbar-hide pb-2 scroll-smooth snap-x snap-mandatory"
        style={{ scrollbarWidth: "none", msOverflowStyle: "none" }}
      >
        {templates.map((template) => (
          <TemplateCard
            key={template.id}
            template={template}
            onSelect={onSelect}
          />
        ))}
      </div>
    </div>
  );
}



================================================
FILE: templates/v0-clone/components/chat/chat-form.tsx
================================================
"use client";

import { ArrowUp, FolderGit2, Loader } from "lucide-react";
import { Repo } from "@/app/actions/github";
import { useRef, useEffect, useState } from "react";
import { useForm } from "react-hook-form";

import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { listRepos } from "@/app/actions/github";

type FormData = {
  message: string;
  repository?: string;
};

interface ChatFormProps {
  onSubmit: (message: string, repository?: Repo) => void | Promise<void>;
  showRepositories?: boolean;
}

export default function ChatForm({
  onSubmit,
  showRepositories = false,
}: ChatFormProps) {
  const [repos, setRepos] = useState<Repo[]>([]);
  const [isLoadingRepos, setIsLoadingRepos] = useState<boolean>(false);
  const [selectedRepo, setSelectedRepo] = useState<Repo | undefined>();

  useEffect(() => {
    if (showRepositories) {
      const fetchRepos = async () => {
        setIsLoadingRepos(true);
        try {
          const repos = await listRepos();
          setRepos(repos as Repo[]);
        } catch (error) {
          console.error("Failed to fetch repositories:", error);
        } finally {
          setIsLoadingRepos(false);
        }
      };
      fetchRepos();
    }
  }, [showRepositories]);

  const { register, handleSubmit, reset, watch, formState, setValue } =
    useForm<FormData>({
      defaultValues: {
        message: "",
        repository: "",
      },
    });
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const [isLoading, setIsLoading] = useState(false);

  const messageValue = watch("message");
  const isMessageEmpty = !messageValue || messageValue.trim().length === 0;
  const { isSubmitting } = formState;

  // Combine both loading states
  const isFormSubmitting = isSubmitting || isLoading;

  const handleInput = () => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = "auto";
      textarea.style.height = `${Math.min(textarea.scrollHeight, 160)}px`;
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      if (!isMessageEmpty && !isFormSubmitting) {
        handleSubmit(handleFormSubmit)();
      }
    }
  };

  const handleRepositoryChange = (repoId: string) => {
    const repo = repos.find((r) => r.id.toString() === repoId);
    setSelectedRepo(repo);
    setValue("repository", repoId);
  };

  const handleFormSubmit = async (data: FormData) => {
    if (!data.message.trim()) return;

    setIsLoading(true);
    try {
      await onSubmit(data.message.trim(), selectedRepo);
      reset();
      setSelectedRepo(undefined);
    } finally {
      setIsLoading(false);
    }
  };

  // Group repositories by organization/owner
  const groupedRepos = repos.reduce(
    (acc, repo) => {
      const owner = repo.full_name.split("/")[0];
      if (!acc[owner]) {
        acc[owner] = [];
      }
      acc[owner].push(repo);
      return acc;
    },
    {} as Record<string, Repo[]>
  );

  // Sort organizations alphabetically
  const sortedOrgs = Object.keys(groupedRepos).sort();

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "56px";
    }
  }, []);

  // Combine register with ref
  const { ref, ...registerProps } = register("message", { required: true });

  return (
    <form
      onSubmit={handleSubmit(handleFormSubmit)}
      className="rounded-lg border p-4 flex flex-col justify-between bg-background"
    >
      <textarea
        {...registerProps}
        ref={(e) => {
          ref(e);
          textareaRef.current = e;
        }}
        className="w-full resize-none focus:outline-none text-sm min-h-14 overflow-hidden"
        placeholder="Ask vibe0 to build..."
        onInput={handleInput}
        onKeyDown={handleKeyDown}
        disabled={isFormSubmitting}
      />
      <div className="flex items-center justify-between">
        {showRepositories && (
          <div className="mb-">
            {isLoadingRepos ? (
              <Skeleton className="w-[200px] h-9" />
            ) : (
              <Select
                onValueChange={handleRepositoryChange}
                value={selectedRepo?.id.toString() || ""}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select a repository (optional)" />
                </SelectTrigger>
                <SelectContent>
                  {sortedOrgs.map((org) => (
                    <SelectGroup key={org}>
                      <SelectLabel>
                        {org} ({groupedRepos[org].length})
                      </SelectLabel>
                      {groupedRepos[org].map((repo) => (
                        <SelectItem key={repo.id} value={repo.id.toString()}>
                          <div className="flex items-center gap-2">
                            <FolderGit2 />
                            <span className="font-medium">{repo.name}</span>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectGroup>
                  ))}
                </SelectContent>
              </Select>
            )}
          </div>
        )}
        <Button
          size="icon"
          className="ml-auto size-8"
          type="submit"
          disabled={isMessageEmpty || isFormSubmitting}
        >
          {isFormSubmitting ? (
            <Loader className="h-4 w-4 animate-spin" />
          ) : (
            <ArrowUp className="h-4 w-4" />
          )}
        </Button>
      </div>
    </form>
  );
}



================================================
FILE: templates/v0-clone/components/chat/index.tsx
================================================
import ChatForm from "./chat-form";
import { useMutation, useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";
import { Doc, Id } from "@/convex/_generated/dataModel";
import { ScrollArea } from "@/components/ui/scroll-area";
import Message from "./message";
import { TextShimmer } from "../ui/text-shimmer";
import { ListTodo } from "lucide-react";
import { useState } from "react";
import { runAgentAction } from "@/app/actions/vibekit";
import { useSession } from "next-auth/react";

interface Todo {
  id: string;
  content: string;
  status: string;
  priority: string;
}

// Helper function to extract the latest todos from assistant messages
function extractLatestTodos(messages: Doc<"messages">[]): Todo[] {
  // Find the most recent assistant message with todos
  for (let i = messages.length - 1; i >= 0; i--) {
    const message = messages[i];
    if (
      message.role === "assistant" &&
      message.todos &&
      message.todos.length > 0
    ) {
      return message.todos;
    }
  }
  return [];
}

// Helper function to calculate progress based on todo status
function calculateProgress(todos: Todo[]): number {
  if (todos.length === 0) return 0;
  const completedCount = todos.filter(
    (todo) =>
      todo.status.toLowerCase() === "completed" ||
      todo.status.toLowerCase() === "done"
  ).length;
  return Math.round((completedCount / todos.length) * 100);
}

// Helper function to get completed todo count
function getCompletedCount(todos: Todo[]): number {
  return todos.filter(
    (todo) =>
      todo.status.toLowerCase() === "completed" ||
      todo.status.toLowerCase() === "done"
  ).length;
}

// Round progress bar component
function RoundProgress({
  progress,
  completed,
  total,
}: {
  progress: number;
  completed: number;
  total: number;
}) {
  const circumference = 2 * Math.PI * 8; // radius of 8
  const strokeDashoffset = circumference - (progress / 100) * circumference;

  return (
    <div className="flex items-center justify-center">
      <span className="text-xs font-medium text-muted-foreground mr-1">
        {completed}/{total}
      </span>
      <div className="relative w-4 h-4">
        <svg className="w-4 h-4 transform -rotate-90" viewBox="0 0 20 20">
          <circle
            cx="10"
            cy="10"
            r="8"
            stroke="currentColor"
            strokeWidth="3"
            fill="transparent"
            className="text-muted-foreground/30"
          />
          <circle
            cx="10"
            cy="10"
            r="8"
            stroke="currentColor"
            strokeWidth="3"
            fill="transparent"
            strokeDasharray={circumference}
            strokeDashoffset={strokeDashoffset}
            className="text-green-500 transition-all duration-300 ease-in-out"
            strokeLinecap="round"
          />
        </svg>
      </div>
    </div>
  );
}

export default function Chat({ session }: { session: Doc<"sessions"> }) {
  const { data: authSession } = useSession();
  const addMessage = useMutation(api.messages.add);
  const messages = useQuery(api.messages.getBySession, {
    sessionId: session._id,
  });
  const [todosExpanded, setTodosExpanded] = useState(false);

  const handleSubmit = async (message: string) => {
    await addMessage({
      sessionId: session._id as Id<"sessions">,
      role: "user",
      content: message,
    });

    await runAgentAction({
      sessionId: session.sessionId!,
      id: session._id,
      message,
      repository: session.repository,
      token: authSession?.accessToken as string,
    });
  };

  const toggleTodos = () => {
    setTodosExpanded(!todosExpanded);
  };

  // Early return if messages are not loaded yet
  if (!messages) {
    return (
      <div className="w-[600px] bg-background rounded-lg flex flex-col border relative" />
    );
  }

  const latestTodos = extractLatestTodos(messages);
  const todosProgress = calculateProgress(latestTodos);
  const completedTodos = getCompletedCount(latestTodos);

  return (
    <div className="w-[600px] bg-background rounded-lg flex flex-col border relative">
      {/* Top fade */}
      <div className="absolute top-0 left-0 right-0 h-6 bg-gradient-to-b from-background to-transparent z-10 rounded-t-lg pointer-events-none" />
      <ScrollArea className="h-[calc(100vh-100px)] px-2">
        <div className="flex flex-col gap-y-2 p-1 pb-[200px] pt-4">
          {messages.length === 0 && (
            <Message
              message={
                {
                  role: "assistant",
                  content: "Hello, I'm vibe0. How can I help you today?",
                } as Doc<"messages">
              }
              showAvatar={true}
            />
          )}
          {messages
            .filter((message) => !message.todos || message.todos.length <= 1)
            .map((message, index) => {
              // Show avatar if it's the first message or if the role changed from the previous message
              const showAvatar =
                index === 0 || messages[index - 1]?.role !== message.role;
              // Convert to Doc<"messages"> by removing extra properties

              return (
                <Message
                  key={message._id}
                  message={message as Doc<"messages">}
                  showAvatar={showAvatar}
                />
              );
            })}
          {session.status === "CUSTOM" && (
            <div className="flex items-center gap-x-2 mt-2 pl-10">
              <div className="size-3 bg-primary rounded-full animate-fast-pulse" />
              <TextShimmer className="text-sm">
                {`${session.statusMessage?.slice(0, 45)}...` || "Working"}
              </TextShimmer>
            </div>
          )}
        </div>
      </ScrollArea>
      <div className="absolute bottom-2 left-3 right-3 bg-background flex flex-col gap-y-2 backdrop-blur-md">
        <div className="flex flex-col gap-y-0">
          <div className="flex flex-col gap-y-2 mx-2 rounded-t-lg hover:bg-muted cursor-pointer bg-muted border-t border-l border-r transition-colors duration-300">
            <div
              className="flex items-center justify-between p-2"
              onClick={toggleTodos}
            >
              <div className="flex items-center gap-x-1">
                <ListTodo className="size-3" />
                <p className="text-xs font-medium">Todo&apos;s</p>
              </div>
              <div className="flex items-center gap-x-2">
                {latestTodos.length > 0 && (
                  <RoundProgress
                    progress={todosProgress}
                    completed={completedTodos}
                    total={latestTodos.length}
                  />
                )}
              </div>
            </div>
            {latestTodos.length > 0 && todosExpanded && (
              <div className="flex flex-col gap-y-1 px-2 pb-2 transition-all duration-300 ease-in-out">
                {latestTodos.slice(0, 3).map((todo) => (
                  <div
                    key={todo.id}
                    className="flex items-center gap-x-2 text-xs"
                  >
                    <div
                      className={`w-2 h-2 rounded-full ${
                        todo.status.toLowerCase() === "completed" ||
                        todo.status.toLowerCase() === "done"
                          ? "bg-green-500"
                          : todo.status.toLowerCase() === "in_progress" ||
                              todo.status.toLowerCase() === "in progress"
                            ? "bg-yellow-500"
                            : "bg-gray-400"
                      }`}
                    />
                    <span className="text-muted-foreground truncate flex-1">
                      {todo.content}
                    </span>
                    <span
                      className={`text-xs px-1.5 py-0.5 ${
                        todo.priority.toLowerCase() === "high"
                          ? "text-red-500"
                          : todo.priority.toLowerCase() === "medium"
                            ? "text-orange-500"
                            : "text-blue-500"
                      }`}
                    >
                      {todo.priority}
                    </span>
                  </div>
                ))}
                {latestTodos.length > 3 && (
                  <p className="text-xs text-muted-foreground">
                    +{latestTodos.length - 3} more todos
                  </p>
                )}
              </div>
            )}
          </div>
          <ChatForm onSubmit={handleSubmit} />
        </div>

        <p className="text-xs text-muted-foreground text-center">
          vibe0 never makes mistakes. Like the other ones do.
        </p>
      </div>
    </div>
  );
}



================================================
FILE: templates/v0-clone/components/chat/message.tsx
================================================
"use client";
import { useCopyToClipboard } from "usehooks-ts";
import { useState } from "react";
import { useParams } from "next/navigation";
import { Copy, Trash2, Check, Pen, Eye } from "lucide-react";
import { useQuery, useMutation } from "convex/react";
import { useSession } from "next-auth/react";

import { api } from "@/convex/_generated/api";
import { Id, Doc } from "@/convex/_generated/dataModel";
import { Button } from "@/components/ui/button";
import { Markdown } from "../markdown";
import { cn } from "@/lib/utils";
import { Avatar, AvatarImage, AvatarFallback } from "@radix-ui/react-avatar";

export default function Message({
  message,
  showAvatar = true,
}: {
  message: Doc<"messages">;
  showAvatar?: boolean;
}) {
  const { data: authSession } = useSession();
  const params = useParams();
  const sessionId = params.id as string;
  const session = useQuery(api.sessions.getById, {
    id: sessionId as Id<"sessions">,
  });
  const deleteMessage = useMutation(api.messages.remove);
  const [, copy] = useCopyToClipboard();
  const [isCopied, setIsCopied] = useState(false);

  const handleCopy = async () => {
    const success = await copy(message.content);
    if (success) {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
    }
  };

  const handleDelete = async () => {
    if (session) {
      await deleteMessage({
        id: message._id as Id<"messages">,
        sessionId: session.id as Id<"sessions">,
      });
    }
  };

  if (message.role === "user") {
    return (
      <div className="group relative rounded-lg cursor-pointer hover:bg-muted">
        <div className="flex items-start gap-x-2">
          {showAvatar ? (
            <div className="size-8 rounded-lg border bg-muted flex items-center justify-center">
              <Avatar>
                <AvatarImage
                  src={authSession?.user?.image || ""}
                  className="rounded-md"
                />
                <AvatarFallback>
                  {authSession?.user?.name?.charAt(0)}
                </AvatarFallback>
              </Avatar>
            </div>
          ) : (
            <div className="size-8" />
          )}
          <div className="flex flex-col gap-y-1 flex-1">
            <p className="text-sm">
              {message.content.length > 250
                ? message.content.slice(0, 250) + "..."
                : message.content}
            </p>
          </div>
        </div>
        <div className="absolute border rounded-lg p-1 bg-background top-2 right-2 flex opacity-0 group-hover:opacity-100 transition-opacity">
          <Button
            variant="ghost"
            size="icon"
            className="size-6"
            aria-label="Copied!"
            onClick={handleCopy}
          >
            {isCopied ? (
              <Check className="size-4 text-green-600" />
            ) : (
              <Copy className="size-4" />
            )}
          </Button>
          <Button
            variant="ghost"
            size="icon"
            onClick={handleDelete}
            className="size-6"
          >
            <Trash2 className="size-4" />
          </Button>
        </div>
      </div>
    );
  }

  if (message.edits) {
    return (
      <div className="pl-10">
        <p className="text-xs flex items-center gap-x-2">
          <span className="font-medium text-muted-foreground flex items-center gap-x-1">
            <Pen className="size-3" />
            Updated:
          </span>
          <span className="text-muted-foreground truncate max-w-[250px]">
            {message.edits.filePath}
          </span>
        </p>
      </div>
    );
  }

  if (message.read) {
    return (
      <div className="pl-10">
        <p className="text-xs flex items-center gap-x-2">
          <span className="font-medium text-muted-foreground flex items-center gap-x-1">
            <Eye className="size-3" />
            Read:
          </span>
          <span className="text-muted-foreground truncate max-w-[270px]">
            {message.read.filePath}
          </span>
        </p>
      </div>
    );
  }

  return (
    <div className="group relative rounded-lg cursor-pointer hover:bg-muted">
      <div className="flex items-start gap-x-2">
        {showAvatar ? (
          <div className="size-8 rounded-lg bg-background border flex items-center justify-center -mt-1.5">
            <span role="img" aria-label="spock emoji">
              🖖
            </span>
          </div>
        ) : (
          <div className="size-8" />
        )}
        <div className={cn("flex flex-col gap-y-1 flex-1")}>
          <Markdown>{message.content}</Markdown>
        </div>
      </div>
      <div className="absolute border rounded-lg p-1 bg-background top-2 right-2 flex opacity-0 group-hover:opacity-100 transition-opacity">
        <Button
          variant="ghost"
          size="icon"
          className="size-6"
          aria-label="Copied!"
          onClick={handleCopy}
        >
          {isCopied ? (
            <Check className="size-4 text-green-600" />
          ) : (
            <Copy className="size-4" />
          )}
        </Button>
      </div>
    </div>
  );
}



================================================
FILE: templates/v0-clone/components/preview/code.tsx
================================================
"use client";
import { useState, useMemo } from "react";
import { useQuery } from "convex/react";
import { FileIcon, ChevronDown, ChevronRight } from "lucide-react";

import { Doc } from "@/convex/_generated/dataModel";
import { api } from "@/convex/_generated/api";
import { cn } from "@/lib/utils";
import FileDiff from "../file-diff";

interface FileEditItemProps {
  message: {
    edits?: {
      filePath?: string;
      oldString?: string;
      newString?: string;
    };
  };
}

function calculateDiffStats(oldContent: string, newContent: string) {
  const oldLines = oldContent.split("\n");
  const newLines = newContent.split("\n");

  // Simple line-based diff calculation
  const oldSet = new Set(oldLines);
  const newSet = new Set(newLines);

  let insertions = 0;
  let deletions = 0;

  // Count insertions (lines in new but not in old)
  for (const line of newLines) {
    if (!oldSet.has(line)) {
      insertions++;
    }
  }

  // Count deletions (lines in old but not in new)
  for (const line of oldLines) {
    if (!newSet.has(line)) {
      deletions++;
    }
  }

  return { insertions, deletions };
}

function FileEditItem({ message }: FileEditItemProps) {
  const [isExpanded, setIsExpanded] = useState<boolean>(true);
  const filePath = message.edits?.filePath ?? "";

  const diffStats = useMemo(() => {
    const oldContent = message.edits?.oldString ?? "";
    const newContent = message.edits?.newString ?? "";
    return calculateDiffStats(oldContent, newContent);
  }, [message.edits?.oldString, message.edits?.newString]);

  const toggleExpanded = () => {
    setIsExpanded((prev) => !prev);
  };

  return (
    <div
      className="flex flex-col gap-0 bg-background border rounded-lg overflow-hidden mb-4"
      key={filePath}
    >
      <div
        className={cn(
          "flex items-center gap-2 h-10 px-4 cursor-pointer hover:bg-sidebar transition-colors",
          isExpanded && " border-b"
        )}
        onClick={toggleExpanded}
      >
        {isExpanded ? (
          <ChevronDown className="w-4 h-4 text-gray-500" />
        ) : (
          <ChevronRight className="w-4 h-4 text-gray-500" />
        )}
        <FileIcon className="w-4 h-4" />
        <p className="text-sm flex-1">{filePath}</p>
        <div className="flex items-center gap-1 text-xs">
          <span className="text-green-600">+{diffStats.insertions}</span>
          <span className="text-red-600">-{diffStats.deletions}</span>
        </div>
      </div>
      {isExpanded && (
        <FileDiff
          oldContent={message.edits?.oldString ?? ""}
          newContent={message.edits?.newString ?? ""}
        />
      )}
    </div>
  );
}

export default function Files({ session }: { session: Doc<"sessions"> }) {
  const messages = useQuery(api.messages.getBySession, {
    sessionId: session._id,
  });

  const messageWithEdits = messages?.filter(
    (message) => message.role === "assistant" && message.edits
  );

  return (
    <div className="flex-1 h-full overflow-hidden relative">
      <div className="flex-1 h-full overflow-hidden relative p-4">
        {messageWithEdits?.map((message) => {
          const filePath = message.edits?.filePath ?? "";

          return <FileEditItem key={filePath} message={message} />;
        })}
      </div>
    </div>
  );
}



================================================
FILE: templates/v0-clone/components/preview/index.tsx
================================================
"use client";

import { ExternalLink, Maximize2 } from "lucide-react";
import { useRef, useEffect, useState } from "react";

import { Button } from "@/components/ui/button";
import BootingMachine from "../booting-machine";
import { Doc } from "@/convex/_generated/dataModel";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Files from "./code";
import { ScrollArea } from "@/components/ui/scroll-area";

export default function Preview({ session }: { session?: Doc<"sessions"> }) {
  const iframeRef = useRef<HTMLIFrameElement>(null);
  const [isUrlAvailable, setIsUrlAvailable] = useState(false);

  useEffect(() => {
    const intervalRef = { current: null as NodeJS.Timeout | null };
    const checkUrlAvailability = async () => {
      if (session?.tunnelUrl) {
        try {
          console.log("Checking URL availability", session.tunnelUrl);
          const response = await fetch("/api/check-url", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ url: session.tunnelUrl }),
          });
          const data = await response.json();
          setIsUrlAvailable(data.available);
          if (data.available && intervalRef.current) {
            clearInterval(intervalRef.current);
            intervalRef.current = null;
          }
        } catch (error) {
          console.error("Error checking URL availability:", error);
          setIsUrlAvailable(false);
        }
      }
    };

    checkUrlAvailability(); // Initial check
    intervalRef.current = setInterval(checkUrlAvailability, 2000);

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [session?.tunnelUrl]);

  // Check if the tunnel URL is available
  return (
    <div className="w-full bg-muted rounded-lg border overflow-hidden flex flex-col">
      <Tabs defaultValue="preview" className="h-full gap-0">
        <div className="flex items-center p-2 border-b bg-background justify-between">
          {/* Left side - Home and Refresh */}
          <TabsList>
            <TabsTrigger value="preview">Preview</TabsTrigger>
            <TabsTrigger value="code">Code</TabsTrigger>
          </TabsList>

          {/* Right side - New Window and Fullscreen */}
          <div className="flex items-center gap-1">
            <Button variant="ghost" size="icon" className="h-8 w-8">
              <ExternalLink className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="icon" className="h-8 w-8">
              <Maximize2 className="h-4 w-4" />
            </Button>
          </div>
        </div>
        <TabsContent value="preview" className="flex-1 h-full">
          <div className="flex-1 h-full overflow-hidden relative">
            {session?.tunnelUrl && isUrlAvailable ? (
              <iframe
                ref={iframeRef}
                src={session.tunnelUrl}
                className="w-full h-full border-none"
              />
            ) : (
              <div className="flex h-full w-full items-center justify-center">
                <div className="max-w-xs rounded-lg h-[200px] mx-auto w-full flex items-center justify-center">
                  <BootingMachine
                    label={
                      session?.tunnelUrl && !isUrlAvailable
                        ? "GENERATING PREVIEW"
                        : (session?.status?.replace(/_/g, " ") ??
                          "BOOTING MACHINE")
                    }
                    size="lg"
                  />
                </div>
              </div>
            )}
          </div>
        </TabsContent>
        <TabsContent value="code" className="flex-1 overflow-hidden">
          <ScrollArea className="h-[calc(100%-0px)]">
            <Files session={session!} />
          </ScrollArea>
        </TabsContent>
      </Tabs>
    </div>
  );
}



================================================
FILE: templates/v0-clone/components/preview/toolbar.tsx
================================================
import { Button } from "@/components/ui/button";
import { ExternalLink, Maximize2 } from "lucide-react";

export default function Toolbar() {
  return (
    <div className="flex items-center gap-2 p-2 border-b bg-background justify-between">
      {/* Left side - Home and Refresh */}
      <div className="flex items-center pl-2">
        <p className="text-sm font-medium">Preview</p>
      </div>

      {/* Right side - New Window and Fullscreen */}
      <div className="flex items-center gap-1">
        <Button variant="ghost" size="icon" className="h-8 w-8">
          <ExternalLink className="h-4 w-4" />
        </Button>
        <Button variant="ghost" size="icon" className="h-8 w-8">
          <Maximize2 className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
}



================================================
FILE: templates/v0-clone/components/ui/avatar.tsx
================================================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }



================================================
FILE: templates/v0-clone/components/ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }



================================================
FILE: templates/v0-clone/components/ui/dialog.tsx
================================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}



================================================
FILE: templates/v0-clone/components/ui/dropdown-menu.tsx
================================================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}



================================================
FILE: templates/v0-clone/components/ui/form.tsx
================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}



================================================
FILE: templates/v0-clone/components/ui/input.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Input = React.forwardRef<
  HTMLInputElement,
  React.InputHTMLAttributes<HTMLInputElement>
>(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-xs transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  );
});
Input.displayName = "Input";

export { Input };



================================================
FILE: templates/v0-clone/components/ui/label.tsx
================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }



================================================
FILE: templates/v0-clone/components/ui/scroll-area.tsx
================================================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }



================================================
FILE: templates/v0-clone/components/ui/select.tsx
================================================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}



================================================
FILE: templates/v0-clone/components/ui/separator.tsx
================================================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }



================================================
FILE: templates/v0-clone/components/ui/skeleton.tsx
================================================
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }



================================================
FILE: templates/v0-clone/components/ui/table.tsx
================================================
"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================
FILE: templates/v0-clone/components/ui/tabs.tsx
================================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================
FILE: templates/v0-clone/components/ui/text-shimmer.tsx
================================================
"use client";
import React, { useMemo, type JSX } from "react";
import { motion } from "framer-motion";
import { cn } from "@/lib/utils";

interface TextShimmerProps {
  children: string;
  as?: React.ElementType;
  className?: string;
  duration?: number;
  spread?: number;
}

export function TextShimmer({
  children,
  as: Component = "p",
  className,
  duration = 2,
  spread = 2,
}: TextShimmerProps) {
  const MotionComponent = motion(Component as keyof JSX.IntrinsicElements);

  const dynamicSpread = useMemo(() => {
    return children.length * spread;
  }, [children, spread]);

  return (
    <MotionComponent
      className={cn(
        "relative inline-block bg-[length:250%_100%,auto] bg-clip-text",
        "text-transparent [--base-color:#a1a1aa] [--base-gradient-color:#000]",
        "[--bg:linear-gradient(90deg,#0000_calc(50%-var(--spread)),var(--base-gradient-color),#0000_calc(50%+var(--spread)))] [background-repeat:no-repeat,padding-box]",
        "dark:[--base-color:#71717a] dark:[--base-gradient-color:#ffffff] dark:[--bg:linear-gradient(90deg,#0000_calc(50%-var(--spread)),var(--base-gradient-color),#0000_calc(50%+var(--spread)))]",
        className
      )}
      initial={{ backgroundPosition: "100% center" }}
      animate={{ backgroundPosition: "0% center" }}
      transition={{
        repeat: Infinity,
        duration,
        ease: "linear",
      }}
      style={
        {
          "--spread": `${dynamicSpread}px`,
          backgroundImage: `var(--bg), linear-gradient(var(--base-color), var(--base-color))`,
        } as React.CSSProperties
      }
    >
      {children}
    </MotionComponent>
  );
}



================================================
FILE: templates/v0-clone/components/ui/theme-toggle.tsx
================================================
"use client";

import * as React from "react";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";

import { DropdownMenuItem } from "@/components/ui/dropdown-menu";

export function ThemeToggle() {
  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = React.useState(false);

  React.useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return (
      <DropdownMenuItem disabled>
        <Sun className="mr-2 h-4 w-4" />
        Toggle theme
      </DropdownMenuItem>
    );
  }

  const isDark = theme === "dark";

  return (
    <DropdownMenuItem
      onClick={() => setTheme(isDark ? "light" : "dark")}
      className="font-medium"
    >
      {isDark ? (
        <>
          <Sun className="mr-2 h-4 w-4" />
          Light mode
        </>
      ) : (
        <>
          <Moon className="mr-2 h-4 w-4" />
          Dark mode
        </>
      )}
    </DropdownMenuItem>
  );
}



================================================
FILE: templates/v0-clone/convex/messages.ts
================================================
import { v } from "convex/values";
import { query, mutation } from "./_generated/server";

export const getBySession = query({
  args: { sessionId: v.id("sessions") },
  handler: async (ctx, args) => {
    const messages = await ctx.db
      .query("messages")
      .withIndex("by_session", (q) => q.eq("sessionId", args.sessionId))
      .order("asc")
      .collect();

    return messages.map((msg) => ({
      ...msg,
      id: msg._id,
    }));
  },
});

export const getById = query({
  args: { id: v.id("messages") },
  handler: async (ctx, args) => {
    const message = await ctx.db.get(args.id);
    if (!message) return null;

    return {
      ...message,
      id: message._id,
    };
  },
});

export const add = mutation({
  args: {
    sessionId: v.id("sessions"),
    role: v.union(v.literal("user"), v.literal("assistant")),
    content: v.string(),
    edits: v.optional(
      v.object({
        filePath: v.string(),
        oldString: v.string(),
        newString: v.string(),
      })
    ),
    read: v.optional(
      v.object({
        filePath: v.string(),
      })
    ),
    todos: v.optional(
      v.array(
        v.object({
          id: v.string(),
          content: v.string(),
          status: v.string(),
          priority: v.string(),
        })
      )
    ),
    checkpoint: v.optional(
      v.object({
        branch: v.string(),
        patch: v.optional(v.string()),
      })
    ),
  },
  handler: async (ctx, args) => {
    const messageId = await ctx.db.insert("messages", {
      ...args,
    });

    return messageId;
  },
});

export const update = mutation({
  args: {
    id: v.id("messages"),
    role: v.optional(v.union(v.literal("user"), v.literal("assistant"))),
    content: v.optional(v.string()),
    edits: v.optional(
      v.object({
        filePath: v.string(),
        oldString: v.string(),
        newString: v.string(),
      })
    ),
    read: v.optional(
      v.object({
        filePath: v.string(),
      })
    ),
    todos: v.optional(
      v.array(
        v.object({
          id: v.string(),
          content: v.string(),
          status: v.string(),
          priority: v.string(),
        })
      )
    ),
    checkpoint: v.optional(
      v.object({
        branch: v.string(),
        patch: v.optional(v.string()),
      })
    ),
  },
  handler: async (ctx, args) => {
    const { id, ...updates } = args;

    // Remove undefined values to avoid overwriting with undefined
    const cleanUpdates = Object.fromEntries(
      Object.entries(updates).filter(([, value]) => value !== undefined)
    );

    await ctx.db.patch(id, cleanUpdates);
  },
});

export const remove = mutation({
  args: {
    id: v.id("messages"),
    sessionId: v.id("sessions"),
  },
  handler: async (ctx, args) => {
    await ctx.db.delete(args.id);
  },
});

export const clearBySession = mutation({
  args: { sessionId: v.id("sessions") },
  handler: async (ctx, args) => {
    const messages = await ctx.db
      .query("messages")
      .withIndex("by_session", (q) => q.eq("sessionId", args.sessionId))
      .collect();

    for (const message of messages) {
      await ctx.db.delete(message._id);
    }
  },
});



================================================
FILE: templates/v0-clone/convex/schema.ts
================================================
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  sessions: defineTable({
    createdBy: v.optional(v.string()),
    sessionId: v.optional(v.string()),
    name: v.string(),
    tunnelUrl: v.optional(v.string()),
    repository: v.optional(v.string()),
    templateId: v.string(),
    pullRequest: v.optional(v.any()),
    status: v.union(
      v.literal("IN_PROGRESS"),
      v.literal("CLONING_REPO"),
      v.literal("INSTALLING_DEPENDENCIES"),
      v.literal("STARTING_DEV_SERVER"),
      v.literal("CREATING_TUNNEL"),
      v.literal("CUSTOM"),
      v.literal("RUNNING")
    ),
    statusMessage: v.optional(v.string()),
  }).index("by_createdBy", ["createdBy"]),

  messages: defineTable({
    sessionId: v.id("sessions"),
    role: v.union(v.literal("user"), v.literal("assistant")),
    edits: v.optional(
      v.object({
        filePath: v.string(),
        oldString: v.string(),
        newString: v.string(),
      })
    ),
    todos: v.optional(
      v.array(
        v.object({
          id: v.string(),
          content: v.string(),
          status: v.string(),
          priority: v.string(),
        })
      )
    ),
    read: v.optional(
      v.object({
        filePath: v.string(),
      })
    ),
    checkpoint: v.optional(
      v.object({
        branch: v.string(),
        patch: v.optional(v.string()),
      })
    ),
    content: v.string(),
  }).index("by_session", ["sessionId"]),
});



================================================
FILE: templates/v0-clone/convex/sessions.ts
================================================
import { v } from "convex/values";
import { query, mutation } from "./_generated/server";

// Queries
export const list = query({
  args: {
    createdBy: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    let sessions;

    if (args.createdBy) {
      sessions = await ctx.db
        .query("sessions")
        .withIndex("by_createdBy", (q) => q.eq("createdBy", args.createdBy))
        .order("desc")
        .collect();
    } else {
      sessions = await ctx.db.query("sessions").order("desc").collect();
    }

    // Get messages for each session
    const sessionsWithMessages = await Promise.all(
      sessions.map(async (session) => {
        const messages = await ctx.db
          .query("messages")
          .withIndex("by_session", (q) => q.eq("sessionId", session._id))
          .order("asc")
          .collect();

        return {
          ...session,
          id: session._id,
          messages: messages.map((msg) => ({
            ...msg,
            id: msg._id,
          })),
        };
      })
    );

    return sessionsWithMessages;
  },
});

export const getById = query({
  args: { id: v.id("sessions") },
  handler: async (ctx, args) => {
    const session = await ctx.db.get(args.id);
    if (!session) return null;

    const messages = await ctx.db
      .query("messages")
      .withIndex("by_session", (q) => q.eq("sessionId", args.id))
      .order("asc")
      .collect();

    return {
      ...session,
      id: session._id,
      messages: messages.map((msg) => ({
        ...msg,
        id: msg._id,
      })),
    };
  },
});

// Mutations
export const create = mutation({
  args: {
    sessionId: v.optional(v.string()),
    branch: v.optional(v.string()),
    createdBy: v.optional(v.string()),
    repository: v.optional(v.string()),
    pullRequest: v.optional(v.any()),
    name: v.string(),
    tunnelUrl: v.optional(v.string()),
    templateId: v.string(),
    status: v.union(
      v.literal("IN_PROGRESS"),
      v.literal("CLONING_REPO"),
      v.literal("INSTALLING_DEPENDENCIES"),
      v.literal("STARTING_DEV_SERVER"),
      v.literal("CREATING_TUNNEL"),
      v.literal("CUSTOM"),
      v.literal("RUNNING")
    ),
    statusMessage: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const id = await ctx.db.insert("sessions", {
      ...args,
    });

    return id;
  },
});

export const update = mutation({
  args: {
    id: v.id("sessions"),
    sessionId: v.optional(v.string()),
    name: v.optional(v.string()),
    tunnelUrl: v.optional(v.string()),
    repository: v.optional(v.string()),
    pullRequest: v.optional(v.any()),
    templateId: v.optional(v.string()),
    branch: v.optional(v.string()),
    status: v.optional(
      v.union(
        v.literal("IN_PROGRESS"),
        v.literal("CLONING_REPO"),
        v.literal("INSTALLING_DEPENDENCIES"),
        v.literal("STARTING_DEV_SERVER"),
        v.literal("CREATING_TUNNEL"),
        v.literal("CUSTOM"),
        v.literal("RUNNING")
      )
    ),
    statusMessage: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const { id, ...updates } = args;

    await ctx.db.patch(id, {
      ...updates,
    });
  },
});

export const remove = mutation({
  args: { id: v.id("sessions") },
  handler: async (ctx, args) => {
    // Delete all messages for this session first
    const messages = await ctx.db
      .query("messages")
      .withIndex("by_session", (q) => q.eq("sessionId", args.id))
      .collect();

    for (const message of messages) {
      await ctx.db.delete(message._id);
    }

    await ctx.db.delete(args.id);
  },
});



================================================
FILE: templates/v0-clone/convex/_generated/api.d.ts
================================================
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  ApiFromModules,
  FilterApi,
  FunctionReference,
} from "convex/server";
import type * as messages from "../messages.js";
import type * as sessions from "../sessions.js";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
declare const fullApi: ApiFromModules<{
  messages: typeof messages;
  sessions: typeof sessions;
}>;
export declare const api: FilterApi<
  typeof fullApi,
  FunctionReference<any, "public">
>;
export declare const internal: FilterApi<
  typeof fullApi,
  FunctionReference<any, "internal">
>;



================================================
FILE: templates/v0-clone/convex/_generated/api.js
================================================
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import { anyApi } from "convex/server";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
export const api = anyApi;
export const internal = anyApi;



================================================
FILE: templates/v0-clone/convex/_generated/dataModel.d.ts
================================================
/* eslint-disable */
/**
 * Generated data model types.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  DataModelFromSchemaDefinition,
  DocumentByName,
  TableNamesInDataModel,
  SystemTableNames,
} from "convex/server";
import type { GenericId } from "convex/values";
import schema from "../schema.js";

/**
 * The names of all of your Convex tables.
 */
export type TableNames = TableNamesInDataModel<DataModel>;

/**
 * The type of a document stored in Convex.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Doc<TableName extends TableNames> = DocumentByName<
  DataModel,
  TableName
>;

/**
 * An identifier for a document in Convex.
 *
 * Convex documents are uniquely identified by their `Id`, which is accessible
 * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).
 *
 * Documents can be loaded using `db.get(id)` in query and mutation functions.
 *
 * IDs are just strings at runtime, but this type can be used to distinguish them from other
 * strings when type checking.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Id<TableName extends TableNames | SystemTableNames> =
  GenericId<TableName>;

/**
 * A type describing your Convex data model.
 *
 * This type includes information about what tables you have, the type of
 * documents stored in those tables, and the indexes defined on them.
 *
 * This type is used to parameterize methods like `queryGeneric` and
 * `mutationGeneric` to make them type-safe.
 */
export type DataModel = DataModelFromSchemaDefinition<typeof schema>;



================================================
FILE: templates/v0-clone/convex/_generated/server.d.ts
================================================
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  ActionBuilder,
  HttpActionBuilder,
  MutationBuilder,
  QueryBuilder,
  GenericActionCtx,
  GenericMutationCtx,
  GenericQueryCtx,
  GenericDatabaseReader,
  GenericDatabaseWriter,
} from "convex/server";
import type { DataModel } from "./dataModel.js";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const query: QueryBuilder<DataModel, "public">;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const internalQuery: QueryBuilder<DataModel, "internal">;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const mutation: MutationBuilder<DataModel, "public">;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const internalMutation: MutationBuilder<DataModel, "internal">;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export declare const action: ActionBuilder<DataModel, "public">;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export declare const internalAction: ActionBuilder<DataModel, "internal">;

/**
 * Define an HTTP action.
 *
 * This function will be used to respond to HTTP requests received by a Convex
 * deployment if the requests matches the path and method where this action
 * is routed. Be sure to route your action in `convex/http.js`.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Import this function from `convex/http.js` and route it to hook it up.
 */
export declare const httpAction: HttpActionBuilder;

/**
 * A set of services for use within Convex query functions.
 *
 * The query context is passed as the first argument to any Convex query
 * function run on the server.
 *
 * This differs from the {@link MutationCtx} because all of the services are
 * read-only.
 */
export type QueryCtx = GenericQueryCtx<DataModel>;

/**
 * A set of services for use within Convex mutation functions.
 *
 * The mutation context is passed as the first argument to any Convex mutation
 * function run on the server.
 */
export type MutationCtx = GenericMutationCtx<DataModel>;

/**
 * A set of services for use within Convex action functions.
 *
 * The action context is passed as the first argument to any Convex action
 * function run on the server.
 */
export type ActionCtx = GenericActionCtx<DataModel>;

/**
 * An interface to read from the database within Convex query functions.
 *
 * The two entry points are {@link DatabaseReader.get}, which fetches a single
 * document by its {@link Id}, or {@link DatabaseReader.query}, which starts
 * building a query.
 */
export type DatabaseReader = GenericDatabaseReader<DataModel>;

/**
 * An interface to read from and write to the database within Convex mutation
 * functions.
 *
 * Convex guarantees that all writes within a single mutation are
 * executed atomically, so you never have to worry about partial writes leaving
 * your data in an inconsistent state. See [the Convex Guide](https://docs.convex.dev/understanding/convex-fundamentals/functions#atomicity-and-optimistic-concurrency-control)
 * for the guarantees Convex provides your functions.
 */
export type DatabaseWriter = GenericDatabaseWriter<DataModel>;



================================================
FILE: templates/v0-clone/convex/_generated/server.js
================================================
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  actionGeneric,
  httpActionGeneric,
  queryGeneric,
  mutationGeneric,
  internalActionGeneric,
  internalMutationGeneric,
  internalQueryGeneric,
} from "convex/server";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const query = queryGeneric;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const internalQuery = internalQueryGeneric;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const mutation = mutationGeneric;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const internalMutation = internalMutationGeneric;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export const action = actionGeneric;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export const internalAction = internalActionGeneric;

/**
 * Define a Convex HTTP action.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument, and a `Request` object
 * as its second.
 * @returns The wrapped endpoint function. Route a URL path to this function in `convex/http.js`.
 */
export const httpAction = httpActionGeneric;



================================================
FILE: templates/v0-clone/lib/auth.ts
================================================
import NextAuth from "next-auth";
import GitHub from "next-auth/providers/github";

// Extend the session type to include custom properties
declare module "next-auth" {
  interface Session {
    accessToken?: string;
    githubId?: string;
    githubUsername?: string;
  }
}

export const { handlers, signIn, signOut, auth } = NextAuth({
  providers: [
    GitHub({
      clientId: process.env.AUTH_GITHUB_ID!,
      clientSecret: process.env.AUTH_GITHUB_SECRET!,
      authorization: {
        params: {
          scope: "read:user user:email repo read:org",
        },
      },
    }),
  ],
  callbacks: {
    async signIn({ account }) {
      if (account?.provider === "github") {
        return true;
      }
      return true;
    },

    async jwt({ token, account, profile }) {
      // Persist the OAuth access_token and refresh_token to the token right after signin
      if (account) {
        token.accessToken = account.access_token;
        token.refreshToken = account.refresh_token;
        token.githubId = profile?.id;
        token.githubUsername = profile?.login;
      }

      return token;
    },

    async session({ session, token }) {
      // Send properties to the client
      if (token.accessToken) {
        session.accessToken = token.accessToken as string;
        session.githubId = token.githubId as string;
        session.githubUsername = token.githubUsername as string;
      }

      return session;
    },
  },
  debug: process.env.NODE_ENV === "development", // Enable debug mode to see more logs
});



================================================
FILE: templates/v0-clone/lib/hooks.ts
================================================
import { useEffect, useState, useRef } from "react";

interface UseUrlAvailabilityOptions {
  url?: string;
  enabled?: boolean;
  retryInterval?: number;
  timeout?: number;
}

export function useUrlAvailability({
  url,
  enabled = true,
  retryInterval = 2000,
  timeout = 5000,
}: UseUrlAvailabilityOptions) {
  const [isUrlReady, setIsUrlReady] = useState(false);
  const [isChecking, setIsChecking] = useState(false);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  const checkUrlWithIframe = (urlToCheck: string) => {
    if (!urlToCheck) return;

    setIsChecking(true);
    setIsUrlReady(false);

    // Create a hidden iframe to test the URL
    const testIframe = document.createElement("iframe");
    testIframe.style.display = "none";
    testIframe.style.width = "1px";
    testIframe.style.height = "1px";

    let hasLoaded = false;
    let hasError = false;

    const cleanup = () => {
      if (document.body.contains(testIframe)) {
        document.body.removeChild(testIframe);
      }
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
    };

    const onLoad = () => {
      if (!hasLoaded && !hasError) {
        hasLoaded = true;
        setIsUrlReady(true);
        setIsChecking(false);
        cleanup();
      }
    };

    const onError = () => {
      if (!hasLoaded && !hasError) {
        hasError = true;
        // If error, try again after retry interval
        timeoutRef.current = setTimeout(() => {
          if (!isUrlReady) {
            checkUrlWithIframe(urlToCheck);
          }
        }, retryInterval);
        cleanup();
      }
    };

    // Set timeout to prevent infinite waiting
    timeoutRef.current = setTimeout(() => {
      if (!hasLoaded && !hasError) {
        hasError = true;
        // If timeout, try again after retry interval
        timeoutRef.current = setTimeout(() => {
          if (!isUrlReady) {
            checkUrlWithIframe(urlToCheck);
          }
        }, retryInterval);
        cleanup();
      }
    }, timeout);

    testIframe.onload = onLoad;
    testIframe.onerror = onError;
    testIframe.src = urlToCheck;

    document.body.appendChild(testIframe);
  };

  useEffect(() => {
    if (url && enabled) {
      checkUrlWithIframe(url);
    } else {
      setIsUrlReady(false);
      setIsChecking(false);
    }

    // Cleanup on unmount or when dependencies change
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
    };
  }, [url, enabled, retryInterval, timeout]);

  return {
    isUrlReady,
    isChecking,
    checkUrl: () => url && checkUrlWithIframe(url),
  };
}



================================================
FILE: templates/v0-clone/lib/inngest.ts
================================================
import { Inngest } from "inngest";
import { realtimeMiddleware, channel, topic } from "@inngest/realtime";
import { VibeKit, VibeKitConfig } from "@vibe-kit/sdk";
import { fetchMutation } from "convex/nextjs";

import { api } from "@/convex/_generated/api";
import { runAgentAction } from "@/app/actions/vibekit";
import { generateSessionTitle } from "@/app/actions/session";
import { createRepo } from "@/app/actions/github";
import { Template } from "@/config";
import { Id } from "@/convex/_generated/dataModel";

let app: Inngest | undefined;
// Create a client to send and receive events
export const inngest = new Inngest({
  id: "vibe0",
  middleware: [realtimeMiddleware()],
});

export const sessionChannel = channel("sessions")
  .addTopic(
    topic("status").type<{
      status:
        | "IN_PROGRESS"
        | "CLONING_REPO"
        | "INSTALLING_DEPENDENCIES"
        | "STARTING_DEV_SERVER"
        | "CREATING_TUNNEL"
        | "RUNNING";
      sessionId: string;
      id: string;
    }>()
  )
  .addTopic(
    topic("update").type<{
      sessionId: string;
      message: Record<string, unknown>;
    }>()
  );

export const getInngestApp = () => {
  return (app ??= new Inngest({
    id: typeof window !== "undefined" ? "client" : "server",
    middleware: [realtimeMiddleware()],
  }));
};

export const runAgent = inngest.createFunction(
  { id: "run-agent", retries: 0, concurrency: 100 },
  { event: "vibe0/run.agent" },
  async ({ event, step }) => {
    const {
      sessionId,
      id,
      message,
      template,
    }: {
      sessionId: string;
      id: Id<"sessions">;
      message: string;
      template: Template;
    } = event.data;

    const config: VibeKitConfig = {
      agent: {
        type: "claude",
        model: {
          apiKey: process.env.ANTHROPIC_API_KEY!,
        },
      },
      environment: {
        northflank: {
          apiKey: process.env.NORTHFLANK_API_KEY!,
          projectId: process.env.NORTHFLANK_PROJECT_ID!,
        },
      },
      sessionId,
    };

    const result = await step.run("generate code", async () => {
      const vibekit = new VibeKit(config);

      await fetchMutation(api.sessions.update, {
        id,
        status: "CUSTOM",
        statusMessage: "Working on task",
      });

      const prompt =
        template?.systemPrompt ||
        "# GOAL\nYou are an helpful assistant that is tasked with helping the user build a NextJS app.\n" +
          "- The NextJS dev server is running on port 3000.\n" +
          +"Do not run tests or restart the dev server.\n" +
          `Follow the users intructions:\n\n# INSTRUCTIONS\n${message}`;

      const response = await vibekit.generateCode({
        prompt: prompt,
        mode: "code",
        callbacks: {
          async onUpdate(message) {
            const data = JSON.parse(message);

            if (data.type === "user") {
              await fetchMutation(api.sessions.update, {
                id,
                status: "CUSTOM",
                statusMessage: data.message.content[0].content,
              });
            }

            if (data.type === "assistant") {
              await fetchMutation(api.sessions.update, {
                id,
                status: "CUSTOM",
                statusMessage: "Working on task",
              });

              switch (data.message.content[0].type) {
                case "text":
                  await fetchMutation(api.messages.add, {
                    sessionId: id,
                    content: data.message.content[0].text,
                    role: "assistant",
                  });
                  break;
                case "tool_use":
                  const toolName = data.message.content[0].name;

                  switch (toolName) {
                    case "TodoWrite":
                      await fetchMutation(api.messages.add, {
                        sessionId: id,
                        role: "assistant",
                        content: "",
                        todos: data.message.content[0].input.todos,
                      });
                      break;
                    case "Write":
                      await fetchMutation(api.messages.add, {
                        sessionId: id,
                        role: "assistant",
                        content: "",
                        edits: {
                          filePath: data.message.content[0].input.file_path,
                          oldString: "",
                          newString: data.message.content[0].input.content,
                        },
                      });
                      break;
                    case "Edit":
                      await fetchMutation(api.messages.add, {
                        sessionId: id,
                        role: "assistant",
                        content: "",
                        edits: {
                          filePath: data.message.content[0].input.file_path,
                          oldString: data.message.content[0].input.old_string,
                          newString: data.message.content[0].input.new_string,
                        },
                      });
                      break;
                    case "Read":
                      await fetchMutation(api.messages.add, {
                        sessionId: id,
                        role: "assistant",
                        content: "",
                        read: {
                          filePath: data.message.content[0].input.file_path,
                        },
                      });
                      break;
                    case "Write":
                      await fetchMutation(api.messages.add, {
                        sessionId: id,
                        role: "assistant",
                        content: "",
                        read: {
                          filePath: data.message.content[0].input.file_path,
                        },
                      });
                    default:
                      break;
                  }
                  break;
                default:
                  break;
              }
            }
          },
        },
      });

      // // Save checkpoint to database
      // if (checkpointBranch) {
      //   await fetchMutation(api.messages.add, {
      //     sessionId: id,
      //     role: "assistant",
      //     content: "",
      //     checkpoint: {
      //       branch: checkpointBranch,
      //       patch: patchContent.length > 0 ? patchContent : undefined,
      //     },
      //   });

      //   console.log("Checkpoint saved:", checkpointBranch);
      // }

      return response;
    });

    await step.run("update session", async () => {
      await fetchMutation(api.sessions.update, {
        id,
        status: "RUNNING",
      });
    });

    return result;
  }
);

export const createSession = inngest.createFunction(
  { id: "create-session", retries: 0, concurrency: 100 },
  { event: "vibe0/create.session" },

  async ({ event, step }) => {
    const {
      sessionId: id,
      message,
      repository,
      token,
      template,
    }: {
      sessionId: Id<"sessions">;
      message: string;
      repository: string;
      token: string;
      template: Template;
    } = event.data;

    let sandboxId: string;

    const config: VibeKitConfig = {
      agent: {
        type: "claude",
        model: {
          apiKey: process.env.ANTHROPIC_API_KEY!,
        },
      },
      environment: {
        northflank: {
          apiKey: process.env.NORTHFLANK_API_KEY!,
          projectId: process.env.NORTHFLANK_PROJECT_ID!,
          image: template?.image,
        },
      },
      secrets: template?.secrets,
    };

    const vibekit = new VibeKit(config);

    const data = await step.run("get tunnel url", async () => {
      const title = await generateSessionTitle(message);

      await fetchMutation(api.sessions.update, {
        id,
        status: "CLONING_REPO",
        name: title,
      });

      if (!repository && template) {
        const repository = await createRepo({
          repoName: `vibe0-${template.repository.replace("https://github.com/", "").replace("/", "-")}-${Date.now().toString().slice(-6)}`,
          token,
        });

        // Handle both full GitHub URLs and repo paths
        const templateCloneUrl = template.repository.startsWith(
          "https://github.com/"
        )
          ? `${template.repository}.git`
          : `https://github.com/${template.repository}.git`;

        const commands = [
          // Clone the template repo directly to root
          `git clone ${templateCloneUrl} .`,
          // Configure git user for commits
          `git config --global user.email "vibe0@vibekit.sh"`,
          `git config --global user.name "Vibe0 Bot"`,
          // Remove the template's git history and set up new repo
          `rm -rf .git`,
          `git init`,
          `git checkout -b main`,
          `git remote add origin https://${token}@github.com/${repository.full_name}.git`,
          // Add, commit and push all files
          `git add . && git commit -m "Initial commit from template ${template}" && git push -u origin main`,
        ];

        for (const command of commands) {
          const { sandboxId: _sandboxId } = await vibekit.executeCommand(
            command,
            {
              callbacks: {
                onUpdate(message) {
                  console.log(message);
                },
              },
            }
          );

          sandboxId = _sandboxId;
        }

        await fetchMutation(api.sessions.update, {
          id,
          repository: repository.full_name,
        });

        for await (const command of template.startCommands) {
          await fetchMutation(api.sessions.update, {
            id,
            status: command.status,
            sessionId: sandboxId,
          });

          await vibekit.executeCommand(command.command, {
            background: command.background,
            callbacks: {
              onUpdate(message) {
                console.log(message);
              },
            },
          });
        }

        const host = await vibekit.getHost(3000);

        return {
          sandboxId: sandboxId,
          tunnelUrl: `https://${host}`,
        };
      } else {
        const { sandboxId: _sandboxId } = await vibekit.executeCommand(
          `git clone https://${token}@github.com/${repository}.git .`
        );

        sandboxId = _sandboxId;

        await fetchMutation(api.sessions.update, {
          id,
          status: "INSTALLING_DEPENDENCIES",
        });

        await vibekit.executeCommand("npm i", {
          callbacks: {
            onUpdate(message) {
              console.log(message);
            },
          },
        });

        await fetchMutation(api.sessions.update, {
          id,
          status: "STARTING_DEV_SERVER",
        });

        await vibekit.executeCommand("npm run dev", {
          background: true,
          callbacks: {
            onUpdate(message) {
              console.log(message);
            },
          },
        });

        await fetchMutation(api.sessions.update, {
          id,
          status: "CREATING_TUNNEL",
        });

        const host = await vibekit.getHost(3000);

        return {
          sandboxId: sandboxId,
          tunnelUrl: `https://${host}`,
        };
      }
    });

    await step.sleep("wait-with-ms", 2 * 1000);

    await step.run("update session", async () => {
      await fetchMutation(api.sessions.update, {
        id,
        status: "RUNNING",
        tunnelUrl: data.tunnelUrl,
      });
    });

    if (message) {
      await step.run("run agent", async () => {
        await runAgentAction({
          sessionId: data.sandboxId,
          id,
          message,
          template,
          repository,
          token,
        });
      });
    }

    return data;
  }
);



================================================
FILE: templates/v0-clone/lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



================================================
FILE: templates/v0-clone/providers/auth-provider.tsx
================================================
"use client";

import { SessionProvider } from "next-auth/react";
import { ReactNode } from "react";

interface ProvidersProps {
  children: ReactNode;
}

export function AuthProvider({ children }: ProvidersProps) {
  return <SessionProvider>{children}</SessionProvider>;
}



================================================
FILE: templates/v0-clone/providers/convex-provider.tsx
================================================
"use client";

import { ConvexProvider, ConvexReactClient } from "convex/react";
import { ReactNode } from "react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export function ConvexClientProvider({ children }: { children: ReactNode }) {
  return <ConvexProvider client={convex}>{children}</ConvexProvider>;
}



================================================
FILE: templates/v0-clone/providers/theme-provider.tsx
================================================
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";

type ThemeProviderProps = React.ComponentProps<typeof NextThemesProvider>;

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}



================================================
FILE: templates/v0-clone/public/convex.webp
================================================
[Binary file]

