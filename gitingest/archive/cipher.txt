Directory structure:
└── campfirein-cipher/
    ├── README.md
    ├── CONTRIBUTING.md
    ├── docker-compose.yml
    ├── Dockerfile
    ├── eslint.config.js
    ├── LICENSE
    ├── package.json
    ├── pnpm-lock.yaml
    ├── tsconfig.json
    ├── tsconfig.typecheck.json
    ├── tsup.config.ts
    ├── vitest.config.ts
    ├── .dockerignore
    ├── .env.example
    ├── .prettierignore
    ├── .prettierrc
    ├── examples/
    │   ├── 01-kimi-k2-coding-assistant/
    │   │   ├── README.md
    │   │   ├── cipher.yml
    │   │   └── .env.example
    │   ├── 02-cli-coding-agents/
    │   │   ├── README.md
    │   │   ├── cipher.yml
    │   │   └── .env.example
    │   └── 03-strict-memory-layer/
    │       ├── README.md
    │       └── cipher.yml
    ├── memAgent/
    │   └── cipher.yml
    ├── src/
    │   ├── index.ts
    │   ├── app/
    │   │   ├── index.ts
    │   │   ├── api/
    │   │   │   ├── server.ts
    │   │   │   ├── middleware/
    │   │   │   │   ├── logging.ts
    │   │   │   │   └── validation.ts
    │   │   │   ├── routes/
    │   │   │   │   ├── config.ts
    │   │   │   │   ├── llm.ts
    │   │   │   │   ├── mcp.ts
    │   │   │   │   ├── message.ts
    │   │   │   │   └── session.ts
    │   │   │   └── utils/
    │   │   │       ├── response.ts
    │   │   │       └── security.ts
    │   │   ├── cli/
    │   │   │   ├── cli.ts
    │   │   │   ├── commands.ts
    │   │   │   ├── parser.ts
    │   │   │   ├── __test__/
    │   │   │   │   └── parser.test.ts
    │   │   │   └── utils/
    │   │   │       └── options.ts
    │   │   └── mcp/
    │   │       ├── aggregator-handler.ts
    │   │       └── mcp_handler.ts
    │   └── core/
    │       ├── env.ts
    │       ├── index.ts
    │       ├── brain/
    │       │   ├── index.ts
    │       │   ├── embedding/
    │       │   │   ├── config.ts
    │       │   │   ├── constants.ts
    │       │   │   ├── factory.ts
    │       │   │   ├── index.ts
    │       │   │   ├── manager.ts
    │       │   │   ├── types.ts
    │       │   │   ├── utils.ts
    │       │   │   └── backend/
    │       │   │       ├── index.ts
    │       │   │       ├── openai.ts
    │       │   │       └── types.ts
    │       │   ├── llm/
    │       │   │   ├── config.ts
    │       │   │   ├── errors.ts
    │       │   │   ├── index.ts
    │       │   │   ├── messages/
    │       │   │   │   ├── factory.ts
    │       │   │   │   ├── index.ts
    │       │   │   │   ├── manager.ts
    │       │   │   │   ├── types.ts
    │       │   │   │   ├── utils.ts
    │       │   │   │   ├── formatters/
    │       │   │   │   │   ├── anthropic.ts
    │       │   │   │   │   ├── openai.ts
    │       │   │   │   │   └── types.ts
    │       │   │   │   └── history/
    │       │   │   │       ├── database.ts
    │       │   │   │       ├── factory.ts
    │       │   │   │       ├── index.ts
    │       │   │   │       ├── types.ts
    │       │   │   │       └── __test__/
    │       │   │   │           ├── database.test.ts
    │       │   │   │           ├── factory.test.ts
    │       │   │   │           ├── integration.test.ts
    │       │   │   │           ├── types.test.ts
    │       │   │   │           └── utils.ts
    │       │   │   ├── services/
    │       │   │   │   ├── anthropic.service.ts
    │       │   │   │   ├── anthropic.ts
    │       │   │   │   ├── factory.ts
    │       │   │   │   ├── index.ts
    │       │   │   │   ├── ollama.ts
    │       │   │   │   ├── openai.ts
    │       │   │   │   ├── openrouter.ts
    │       │   │   │   └── types.ts
    │       │   │   └── utils/
    │       │   │       └── tool-result-formatter.ts
    │       │   ├── memAgent/
    │       │   │   ├── agent.ts
    │       │   │   ├── config.ts
    │       │   │   ├── index.ts
    │       │   │   ├── loader.ts
    │       │   │   ├── state-manager.ts
    │       │   │   └── __test__/
    │       │   │       ├── agent.test.ts
    │       │   │       └── loader.test.ts
    │       │   ├── reasoning/
    │       │   │   ├── content-detector.ts
    │       │   │   ├── index.ts
    │       │   │   ├── search-context-manager.ts
    │       │   │   └── __test__/
    │       │   │       ├── content-detector.test.ts
    │       │   │       └── search-context-manager.test.ts
    │       │   ├── systemPrompt/
    │       │   │   ├── manager.ts
    │       │   │   ├── tool-instructions.ts
    │       │   │   └── __test__/
    │       │   │       └── manager.test.ts
    │       │   └── tools/
    │       │       ├── def_reflective_memory_tools.ts
    │       │       ├── index.ts
    │       │       ├── manager.ts
    │       │       ├── registry.ts
    │       │       ├── types.ts
    │       │       ├── unified-tool-manager.ts
    │       │       ├── __test__/
    │       │       │   ├── definitions.test.ts
    │       │       │   ├── manager.test.ts
    │       │       │   ├── phase2-reflection-tools.test.ts
    │       │       │   ├── phase3-service-integration.test.ts
    │       │       │   ├── pr-validation.test.ts
    │       │       │   ├── registry.test.ts
    │       │       │   └── unified-tool-manager.test.ts
    │       │       └── definitions/
    │       │           ├── index.ts
    │       │           ├── knowledge_graph/
    │       │           │   ├── add-edge.ts
    │       │           │   ├── add-node.ts
    │       │           │   ├── delete-node.ts
    │       │           │   ├── enhanced-search.ts
    │       │           │   ├── extract-entities.ts
    │       │           │   ├── get-neighbors.ts
    │       │           │   ├── index.ts
    │       │           │   ├── intelligent-processor.ts
    │       │           │   ├── query-graph.ts
    │       │           │   ├── relationship-manager.ts
    │       │           │   ├── search-graph.ts
    │       │           │   ├── update-node.ts
    │       │           │   └── __test__/
    │       │           │       ├── add-edge.test.ts
    │       │           │       ├── add-node.test.ts
    │       │           │       ├── delete-node.test.ts
    │       │           │       ├── extract-entities.test.ts
    │       │           │       ├── get-neighbors.test.ts
    │       │           │       ├── query-graph.test.ts
    │       │           │       ├── search-graph.test.ts
    │       │           │       └── update-node.test.ts
    │       │           └── memory/
    │       │               ├── extract-knowledge.ts
    │       │               ├── extract_and_operate_memory.ts
    │       │               ├── index.ts
    │       │               ├── memory_operation.ts
    │       │               ├── payloads.ts
    │       │               ├── search_memory.ts
    │       │               ├── store_reasoning_memory.ts
    │       │               └── __test__/
    │       │                   ├── internal-tool-names.test.ts
    │       │                   ├── search_memory.test.ts
    │       │                   └── store_reasoning_memory.test.ts
    │       ├── events/
    │       │   ├── cli-tools.ts
    │       │   ├── event-manager.ts
    │       │   ├── event-types.ts
    │       │   ├── filtering.ts
    │       │   ├── index.ts
    │       │   ├── metrics.ts
    │       │   ├── persistence.ts
    │       │   ├── replay.ts
    │       │   ├── service-event-bus.ts
    │       │   ├── session-event-bus.ts
    │       │   ├── typed-event-emitter.ts
    │       │   ├── webhooks.ts
    │       │   └── __tests__/
    │       │       ├── event-manager.test.ts
    │       │       ├── integration.test.ts
    │       │       ├── performance.test.ts
    │       │       ├── service-event-bus.test.ts
    │       │       ├── session-event-bus.test.ts
    │       │       └── typed-event-emitter.test.ts
    │       ├── knowledge_graph/
    │       │   ├── config.ts
    │       │   ├── constants.ts
    │       │   ├── factory.ts
    │       │   ├── index.ts
    │       │   ├── manager.ts
    │       │   ├── types.ts
    │       │   └── backend/
    │       │       ├── in-memory.ts
    │       │       ├── knowledge-graph.ts
    │       │       ├── neo4j.ts
    │       │       └── types.ts
    │       ├── logger/
    │       │   ├── index.d.ts
    │       │   ├── index.ts
    │       │   ├── logger.ts
    │       │   └── __test__/
    │       │       └── logger.test.ts
    │       ├── mcp/
    │       │   ├── aggregator.ts
    │       │   ├── client.ts
    │       │   ├── config.ts
    │       │   ├── constants.ts
    │       │   ├── index.ts
    │       │   ├── manager.ts
    │       │   ├── schema-converter.ts
    │       │   ├── types.ts
    │       │   ├── validation.ts
    │       │   └── __test__/
    │       │       ├── aggregator.test.ts
    │       │       ├── manager.test.ts
    │       │       └── schema-converter.test.ts
    │       ├── session/
    │       │   ├── coversation-session.ts
    │       │   ├── index.ts
    │       │   ├── session-manager.ts
    │       │   └── __test__/
    │       │       ├── coversation-session.test.ts
    │       │       └── session-manager.test.ts
    │       ├── storage/
    │       │   ├── config.ts
    │       │   ├── constants.ts
    │       │   ├── factory.ts
    │       │   ├── index.ts
    │       │   ├── manager.ts
    │       │   ├── types.ts
    │       │   ├── __test__/
    │       │   │   ├── factory.test.ts
    │       │   │   └── manager.test.ts
    │       │   ├── backend/
    │       │   │   ├── cache-backend.ts
    │       │   │   ├── database-backend.ts
    │       │   │   ├── in-memory.ts
    │       │   │   ├── index.ts
    │       │   │   ├── postgresql.ts
    │       │   │   ├── redis-backend.ts
    │       │   │   ├── sqlite.ts
    │       │   │   ├── types.ts
    │       │   │   └── __test__/
    │       │   │       ├── in-memory.test.ts
    │       │   │       ├── postgresql.test.ts
    │       │   │       └── sqlite.test.ts
    │       │   └── memory-history/
    │       │       ├── index.ts
    │       │       ├── schema.ts
    │       │       ├── service.ts
    │       │       ├── types.ts
    │       │       └── __test__/
    │       │           ├── integration.test.ts
    │       │           └── service.test.ts
    │       ├── utils/
    │       │   ├── index.ts
    │       │   ├── path.ts
    │       │   └── service-initializer.ts
    │       └── vector_storage/
    │           ├── config.ts
    │           ├── constants.ts
    │           ├── dual-collection-manager.ts
    │           ├── event-aware-store.ts
    │           ├── factory.ts
    │           ├── index.ts
    │           ├── manager.ts
    │           ├── types.ts
    │           ├── __test__/
    │           │   ├── factory.test.ts
    │           │   ├── in-memory.test.ts
    │           │   ├── manager.test.ts
    │           │   ├── milvus.test.ts
    │           │   ├── phase1-reflection-memory.test.ts
    │           │   └── qdrant.test.ts
    │           └── backend/
    │               ├── in-memory.ts
    │               ├── index.ts
    │               ├── milvus.ts
    │               ├── qdrant.ts
    │               ├── types.ts
    │               └── vector-store.ts
    └── .github/
        ├── copilot-instructions.md
        ├── ISSUE_TEMPLATE/
        │   ├── bug_report.md
        │   └── feature_request.md
        └── workflows/
            ├── ci.yml
            └── publish.yml


Files Content:

(Files content cropped to 300k characters, download full ingest to see more)
================================================
FILE: README.md
================================================
[Binary file]


================================================
FILE: CONTRIBUTING.md
================================================
# Contributing to Cipher

Thank you for your interest in contributing to **cipher**! We're excited to have you as part of our community building the next generation of agent memory systems with Model Context Protocol (MCP).

## 🚀 Quick Start

### Prerequisites

Before you begin, ensure you have:

- **Node.js** ≥ 20.0.0
- **pnpm** ≥ 9.14.0 (we use pnpm, not npm)
- **Git** configured with your GitHub account

### 1. Fork & Clone

1. **Fork** the repository to your GitHub account by clicking the "Fork" button
2. **Clone** your fork:

   ```bash
   git clone https://github.com/YOUR_USERNAME/cipher.git
   cd cipher
   ```

### 2. Set Up Development Environment

```bash
# Install dependencies
pnpm install

# Set up environment variables
cp .env.example .env
# Edit .env and add your API keys (at least one required):
# OPENAI_API_KEY=your_openai_key
# ANTHROPIC_API_KEY=your_anthropic_key

# Build the project
pnpm run build

# Verify setup by running tests
pnpm test
```

### 3. Create Feature Branch

```bash
git checkout -b feature/your-descriptive-branch-name
# Examples:
# - feature/add-memory-persistence
# - fix/mcp-connection-timeout
# - docs/update-api-examples
```

## 🛠 Development Workflow

### Code Quality Standards

Before committing, ensure your code meets our standards:

```bash
# Type checking
pnpm run typecheck

# Linting (with auto-fix)
pnpm run lint:fix

# Code formatting
pnpm run format

# Run tests
pnpm test

# Full build verification
pnpm run build
```

### Project Structure

Understanding the codebase structure:

```
src/
├── app/           # CLI application entry point
├── core/
│   ├── brain/     # Core agent logic
│   │   ├── llm/       # LLM providers (OpenAI, Anthropic)
│   │   ├── memAgent/  # Agent management
│   │   └── systemPrompt/
│   ├── mcp/       # Model Context Protocol integration
│   ├── session/   # Session management
│   └── logger/    # Logging infrastructure
└── utils/         # Shared utilities
```

### Development Guidelines

#### TypeScript Best Practices

- Use strict TypeScript configuration
- Implement proper error handling with custom error types
- Use interfaces and types for clear API contracts

#### Code Style

- Follow existing naming conventions
- Write self-documenting code with clear variable names
- Add JSDoc comments for public APIs
- Maintain consistent indentation and formatting

#### Testing

- Write tests for new functionality in `__test__/` directories
- Maintain or improve test coverage
- Use descriptive test names that explain the behavior
- Mock external dependencies appropriately

#### MCP Integration

- Follow MCP protocol specifications
- Implement proper connection lifecycle management
- Add timeout and error handling for server connections
- Use type-safe server configuration validation

## 📋 Contribution Types

### 🐛 Bug Fixes

- Check existing issues before creating new ones
- Include reproduction steps and environment details
- Write regression tests to prevent future occurrences

### ✨ New Features

- **Open an issue first** for discussion on larger features
- Ensure the feature aligns with cipher's core mission
- Include comprehensive tests and documentation
- Update configuration schemas if needed

### 📚 Documentation

- Keep README.md and docs/ up to date
- Include code examples that work out-of-the-box
- Update configuration references for new options

### 🔧 Refactoring

- Maintain backward compatibility unless discussed
- Include performance benchmarks for optimization claims
- Update related tests and documentation

## 🔄 Submission Process

### 5. Commit Your Changes

Follow conventional commit format:

```bash
git add .
git commit -m "feat: add persistent memory layer for agent sessions"
# Other examples:
# git commit -m "fix: resolve MCP connection timeout issues"
# git commit -m "docs: update configuration examples"
# git commit -m "test: add integration tests for memory persistence"
```

### 6. Push and Create Pull Request

```bash
git push origin feature/your-branch-name
```

Open a Pull Request against the `main` branch with:

- **Clear title** describing the change
- **Detailed description** explaining:
  - What problem this solves
  - How you solved it
  - Any breaking changes
  - Testing performed
- **Link related issues** using `Fixes #123` or `Closes #123`

### Pull Request Checklist

- [ ] Code follows project style guidelines
- [ ] Self-review completed
- [ ] Tests added/updated and passing
- [ ] Documentation updated if needed
- [ ] No breaking changes (or clearly documented)
- [ ] Commits follow conventional format
- [ ] Branch is up to date with main

## 🧪 Testing

### Running Tests

```bash
# Run all tests
pnpm test

```

### Test Categories

- **Unit tests**: Test individual functions and classes

## 🐛 Reporting Issues

When reporting bugs, include:

1. **Environment details**: Node.js version, OS, pnpm version
2. **Reproduction steps**: Minimal code example that demonstrates the issue
3. **Expected behavior**: What should happen
4. **Actual behavior**: What actually happens
5. **Configuration**: Relevant parts of your `cipher.yml` and `.env` (redact API keys)
6. **Logs**: Any error messages or relevant log output

## 💡 Feature Requests

Before suggesting new features:

1. **Check existing issues** to avoid duplicates
2. **Explain the use case** - what problem does this solve?
3. **Propose implementation** if you have ideas
4. **Consider alternatives** that might already exist

## 🏷 Release Process

We follow semantic versioning:

- **Patch** (0.1.x): Bug fixes, small improvements
- **Minor** (0.x.0): New features, non-breaking changes
- **Major** (x.0.0): Breaking changes

## 🤝 Community

- **Discord**: Join our [Discord community](https://discord.com/invite/UMRrpNjh5W)
- **GitHub Discussions**: For broader conversations and Q&A
- **Issues**: For bug reports and feature requests

## 📜 License

By contributing to cipher, you agree that your contributions will be licensed under the [Elastic License 2.0](LICENSE).

---

**Questions?** Don't hesitate to ask in our Discord or open a discussion on GitHub. We're here to help make your contribution experience smooth and rewarding!

Happy coding! 🎉



================================================
FILE: docker-compose.yml
================================================
version: '3.8'

services:
  cipher-api:
    build: .
    ports:
      - '3000:3000'
    environment:
      - PORT=3000
      - NODE_ENV=production
    env_file:
      - .env
    command:
      [
        'sh',
        '-c',
        'node dist/src/app/index.cjs --mode api --port 3000 --host 0.0.0.0 --agent /app/memAgent/cipher.yml',
      ]
    volumes:
      - ./memAgent:/app/memAgent:ro # Mount custom agent config
      - cipher-data:/app/.cipher # Persist application data
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'sh',
          '-c',
          'wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: testdb
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data

volumes:
  cipher-data:
  pgdata:



================================================
FILE: Dockerfile
================================================
################################################################################
# Build stage - includes dev dependencies
ARG NODE_VERSION=20.18.1

################################################################################
# Build stage - optimized for smaller final image
FROM node:${NODE_VERSION}-alpine AS builder

# Install build dependencies for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files first for better caching
COPY package*.json pnpm-lock.yaml ./

# Install pnpm
RUN npm install -g pnpm@9.14.0

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source and build
COPY . .
RUN pnpm run build

# Clean up and prepare production node_modules
RUN pnpm prune --prod && \
    pnpm store prune && \
    rm -rf /root/.npm /tmp/* /usr/lib/node_modules/npm/man /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html /usr/lib/node_modules/npm/scripts

################################################################################
# Production stage - minimal Alpine
FROM node:${NODE_VERSION}-alpine AS production

WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S cipher && adduser -S cipher -u 1001

# Create .cipher directory with proper permissions for database
RUN mkdir -p /app/.cipher/database && \
    chown -R cipher:cipher /app/.cipher

# Copy only essential production files
COPY --from=builder --chown=cipher:cipher /app/dist ./dist
COPY --from=builder --chown=cipher:cipher /app/node_modules ./node_modules
COPY --from=builder --chown=cipher:cipher /app/package.json ./
COPY --from=builder --chown=cipher:cipher /app/memAgent ./memAgent

# Create a minimal .env file for Docker (environment variables will be passed via docker)
RUN echo "# Docker environment - variables passed via docker run" > .env

# Environment variables
ENV NODE_ENV=production \
    PORT=3000 \
    CONFIG_FILE=/app/memAgent/cipher.yml

# Switch to non-root user
USER cipher

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "const http = require('http'); const req = http.request({host:'localhost',port:process.env.PORT||3000,path:'/health'}, (res) => process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () => process.exit(1)); req.end();"

# Single port for deployment platform
EXPOSE $PORT

# API server mode: REST APIs on single port
CMD ["sh", "-c", "node dist/src/app/index.cjs --mode api --port $PORT --host 0.0.0.0 --agent $CONFIG_FILE"]


================================================
FILE: eslint.config.js
================================================
import tseslint from '@typescript-eslint/eslint-plugin';
import tsParser from '@typescript-eslint/parser';
import js from '@eslint/js';
import prettier from 'eslint-config-prettier';

export default [
	// Base config for all files
	js.configs.recommended,
	{
		linterOptions: {
			reportUnusedDisableDirectives: 'warn',
		},
	},

	// TypeScript specific config
	{
		files: ['**/*.ts'],
		languageOptions: {
			parser: tsParser,
			ecmaVersion: 2022,
			sourceType: 'module',
			globals: {
				console: 'readonly',
				process: 'readonly',
				setTimeout: 'readonly',
				clearTimeout: 'readonly',
				global: 'readonly',
				require: 'readonly',
				__dirname: 'readonly',
				module: 'readonly',
				document: 'readonly',
				window: 'readonly',
				HTMLElement: 'readonly',
				HTMLAnchorElement: 'readonly',
				HTMLImageElement: 'readonly',
				Element: 'readonly',
				Node: 'readonly',
				clearInterval: 'readonly',
				setInterval: 'readonly',
				Buffer: 'readonly',
				URL: 'readonly',
				AbortController: 'readonly',
				AbortSignal: 'readonly',
				structuredClone: 'readonly',
				NodeJS: 'readonly',
				CustomEvent: 'readonly',
				localStorage: 'readonly',
				FileReader: 'readonly',
				WebSocket: 'readonly',
				// Test globals
				describe: 'readonly',
				test: 'readonly',
				it: 'readonly',
				expect: 'readonly',
				beforeEach: 'readonly',
				afterEach: 'readonly',
				beforeAll: 'readonly',
				afterAll: 'readonly',
				vi: 'readonly',
				setImmediate: 'readonly',
				clearImmediate: 'readonly',
			},
		},
		plugins: {
			'@typescript-eslint': tseslint,
		},
		rules: {
			'no-console': 'off',
			'no-unused-vars': 'off',
			'@typescript-eslint/explicit-module-boundary-types': 'off',
			'@typescript-eslint/no-explicit-any': 'off',
			'@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
			'no-dupe-class-members': 'off', // Allow TypeScript method overloading
		},
	},

	// JavaScript Client-side specific config
	{
		files: ['app/web/client/script.js'], // Make the path specific
		languageOptions: {
			ecmaVersion: 2022,
			sourceType: 'module',
			globals: {
				// Define Browser globals
				window: 'readonly',
				document: 'readonly',
				console: 'readonly',
				setTimeout: 'readonly',
				clearTimeout: 'readonly', // Added clearTimeout
				WebSocket: 'readonly',
				// Add other browser APIs you use e.g.:
				// fetch: 'readonly',
				// localStorage: 'readonly',
				// navigator: 'readonly',
			},
		},
		rules: {
			// Add any JS specific rules if needed, otherwise inherit from recommended
			'no-unused-vars': ['warn', { argsIgnorePattern: '^_' }], // Example JS rule
			// Disable no-undef specifically for this block if necessary,
			// but defining globals is preferred.
			// 'no-undef': 'off'
		},
	},

	// Ignore patterns (keep existing ignores)
	{
		ignores: [
			'node_modules/**',
			'dist/**',
			'.cursor/**',
			'public/**',
			'src/app/webui/.next/**',
			'src/app/webui/out/**',
			'**/build/**',
			'**/coverage/**',
			'test-temp/**',
			'**/*.min.js',
			'**/generated/**',
			'docs/.docusaurus/**',
			'scripts/dev.js',
			'scripts/dev-status.js',
			'src/app/web/client/script.js',
			'src/app/webui/tailwind.config.js',
		],
	},
	prettier,
];



================================================
FILE: LICENSE
================================================
Elastic License 2.0 (ELv2)

Acceptance
By using the software, you agree to all of the terms and conditions below.

Copyright License
The licensor grants you a non-exclusive, royalty-free, worldwide, non-sublicensable, non-transferable license to use, copy, distribute, make available, and prepare derivative works of the software, in each case subject to the limitations and conditions below

Limitations
You may not provide the software to third parties as a hosted or managed service, where the service provides users with access to any substantial set of the features or functionality of the software.

You may not move, change, disable, or circumvent the license key functionality in the software, and you may not remove or obscure any functionality in the software that is protected by the license key.

You may not alter, remove, or obscure any licensing, copyright, or other notices of the licensor in the software. Any use of the licensor's trademarks is subject to applicable law.

Patents
The licensor grants you a license, under any patent claims the licensor can license, or becomes able to license, to make, have made, use, sell, offer for sale, import and have imported the software, in each case subject to the limitations and conditions in this license. This license does not cover any patent claims that you cause to be infringed by modifications or additions to the software. If you or your company make any written claim that the software infringes or contributes to infringement of any patent, your patent license for the software granted under these terms ends immediately. If your company makes such a claim, your patent license ends immediately for work on behalf of your company.

Notices
You must ensure that anyone who gets a copy of any part of the software from you also gets a copy of these terms.

If you modify the software, you must include in any modified copies of the software prominent notices stating that you have modified the software.

No Other Rights
These terms do not imply any licenses other than those expressly granted in these terms.

Termination
If you use the software in violation of these terms, such use is not licensed, and your licenses will automatically terminate. If the licensor provides you with a notice of your violation, and you cease all violation of this license no later than 30 days after you receive that notice, your licenses will be reinstated retroactively. However, if you violate these terms after such reinstatement, any additional violation of these terms will cause your licenses to terminate automatically and permanently.

No Liability
As far as the law allows, the software comes as is, without any warranty or condition, and the licensor will not be liable to you for any damages arising out of these terms or the use or nature of the software, under any kind of legal claim.

Definitions
The _licensor_ is the entity offering these terms, and the _software_ is the software the licensor makes available under these terms, including any portion of it.

_you_ refers to the individual or entity agreeing to these terms.

_your company_ is any legal entity, sole proprietorship, or other kind of organization that you work for, plus all organizations that have control over, are under the control of, or are under common control with that organization. _control_ means ownership of substantially all the assets of an entity, or the power to direct its management and policies by vote, contract, or otherwise. Control can be direct or indirect.

_your licenses_ are all the licenses granted to you for the software under these terms.

_use_ means anything you do with the software requiring one of your licenses.

_trademark_ means trademarks, service marks, and similar rights.


================================================
FILE: package.json
================================================
{
	"name": "@byterover/cipher",
	"version": "0.1.1",
	"engines": {
		"node": ">=20.0.0",
		"pnpm": ">=9.14.0"
	},
	"description": "Build effective agents's memory with Model Context Protocol (MCP) with composable patterns",
	"type": "module",
	"main": "dist/index.js",
	"module": "dist/index.js",
	"types": "dist/index.d.ts",
	"bin": {
		"cipher": "./dist/src/app/index.cjs"
	},
	"exports": {
		".": {
			"types": "./dist/index.d.ts",
			"import": "./dist/index.js",
			"require": "./dist/index.cjs"
		},
		"./core": {
			"types": "./dist/src/core/index.d.ts",
			"import": "./dist/src/core/index.js",
			"require": "./dist/src/core/index.cjs"
		},
		"./package.json": "./package.json"
	},
	"files": [
		"dist/",
		"memAgent/cipher.yml"
	],
	"scripts": {
		"clean": "rm -rf dist",
		"prebuild": "pnpm run clean",
		"build": "tsup",
		"prepare": "husky",
		"start": "node dist/src/app/index.cjs",
		"dev": "tsc --watch",
		"typecheck": "tsc --project tsconfig.typecheck.json",
		"precommit": "pnpm run lint && pnpm run typecheck && pnpm run format:check && pnpm run test:ci && pnpm run build",
		"test": "vitest run",
		"test:unit": "vitest run --exclude '**/integration/**' --exclude '**/*.integration.test.ts'",
		"test:integration": "vitest run --include '**/integration/**' --include '**/*.integration.test.ts'",
		"test:ci": "pnpm run test:unit",
		"lint": "eslint .",
		"lint:fix": "eslint . --fix",
		"format": "prettier --write \"src/**/*.ts\" \"*.{js,json,md,yml,yaml}\"",
		"format:check": "prettier --check \"src/**/*.ts\" \"*.{js,json,md,yml,yaml}\"",
		"prepublishOnly": "pnpm run build"
	},
	"keywords": [
		"mcp",
		"model-context-protocol",
		"memory",
		"vibe-coding",
		"byterover",
		"openai"
	],
	"author": "BYTEROVER",
	"license": "Elastic-2.0",
	"devDependencies": {
		"@ai-sdk/openai": "^1.3.3",
		"@eslint/js": "^9.29.0",
		"@types/better-sqlite3": "^7.6.13",
		"@types/cors": "^2.8.19",
		"@types/express": "^5.0.3",
		"@types/js-yaml": "^4.0.9",
		"@types/node": "^24.0.3",
		"@types/pg": "^8.15.4",
		"@types/uuid": "^10.0.0",
		"@typescript-eslint/eslint-plugin": "^8.34.1",
		"@typescript-eslint/parser": "^8.34.1",
		"@vitest/coverage-v8": "^3.2.4",
		"@web-std/file": "^3.0.3",
		"eslint": "^9.29.0",
		"eslint-config-prettier": "^10.1.5",
		"pg": "^8.16.3",
		"prettier": "^3.5.3",
		"recheck": "^4.5.0",
		"ts-node": "^10.9.2",
		"tsup": "^8.5.0",
		"tsx": "^4.19.2",
		"typescript": "^5.8.3",
		"vitest": "^3.2.4",
		"zod": "^3.25.76"
	},
	"dependencies": {
		"@anthropic-ai/sdk": "^0.39.0",
		"@modelcontextprotocol/sdk": "^1.15.1",
		"@qdrant/js-client-rest": "^1.14.1",
		"@zilliz/milvus2-sdk-node": "^2.5.12",
		"axios": "^1.10.0",
		"better-sqlite3": "^12.2.0",
		"boxen": "^8.0.1",
		"chalk": "^5.4.1",
		"commander": "^11.1.0",
		"cors": "^2.8.5",
		"dotenv": "^16.6.0",
		"express": "^5.1.0",
		"express-rate-limit": "^7.5.1",
		"express-validator": "^7.2.1",
		"helmet": "^8.1.0",
		"husky": "^9.1.7",
		"ioredis": "^5.6.1",
		"js-yaml": "^4.1.0",
		"neo4j-driver": "^5.28.1",
		"openai": "^4.89.0",
		"pg": "^8.16.3",
		"undici": "^7.11.0",
		"uuid": "^11.1.0",
		"winston": "^3.17.0",
		"yaml": "^2.3.1"
	}
}



================================================
FILE: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@anthropic-ai/sdk':
        specifier: ^0.39.0
        version: 0.39.0
      '@modelcontextprotocol/sdk':
        specifier: ^1.15.1
        version: 1.15.1
      '@qdrant/js-client-rest':
        specifier: ^1.14.1
        version: 1.14.1(typescript@5.8.3)
      '@zilliz/milvus2-sdk-node':
        specifier: ^2.5.12
        version: 2.5.12
      axios:
        specifier: ^1.10.0
        version: 1.10.0
      better-sqlite3:
        specifier: ^12.2.0
        version: 12.2.0
      boxen:
        specifier: ^8.0.1
        version: 8.0.1
      chalk:
        specifier: ^5.4.1
        version: 5.4.1
      commander:
        specifier: ^11.1.0
        version: 11.1.0
      cors:
        specifier: ^2.8.5
        version: 2.8.5
      dotenv:
        specifier: ^16.6.0
        version: 16.6.0
      express:
        specifier: ^5.1.0
        version: 5.1.0
      express-rate-limit:
        specifier: ^7.5.1
        version: 7.5.1(express@5.1.0)
      express-validator:
        specifier: ^7.2.1
        version: 7.2.1
      helmet:
        specifier: ^8.1.0
        version: 8.1.0
      husky:
        specifier: ^9.1.7
        version: 9.1.7
      ioredis:
        specifier: ^5.6.1
        version: 5.6.1
      js-yaml:
        specifier: ^4.1.0
        version: 4.1.0
      neo4j-driver:
        specifier: ^5.28.1
        version: 5.28.1
      openai:
        specifier: ^4.89.0
        version: 4.104.0(ws@8.18.3)(zod@3.25.76)
      pg:
        specifier: ^8.16.3
        version: 8.16.3
      undici:
        specifier: ^7.11.0
        version: 7.11.0
      uuid:
        specifier: ^11.1.0
        version: 11.1.0
      winston:
        specifier: ^3.17.0
        version: 3.17.0
      yaml:
        specifier: ^2.3.1
        version: 2.8.0
    devDependencies:
      '@ai-sdk/openai':
        specifier: ^1.3.3
        version: 1.3.22(zod@3.25.76)
      '@eslint/js':
        specifier: ^9.29.0
        version: 9.29.0
      '@types/better-sqlite3':
        specifier: ^7.6.13
        version: 7.6.13
      '@types/cors':
        specifier: ^2.8.19
        version: 2.8.19
      '@types/express':
        specifier: ^5.0.3
        version: 5.0.3
      '@types/js-yaml':
        specifier: ^4.0.9
        version: 4.0.9
      '@types/node':
        specifier: ^24.0.3
        version: 24.0.3
      '@types/pg':
        specifier: ^8.15.4
        version: 8.15.4
      '@types/uuid':
        specifier: ^10.0.0
        version: 10.0.0
      '@typescript-eslint/eslint-plugin':
        specifier: ^8.34.1
        version: 8.35.0(@typescript-eslint/parser@8.35.0(eslint@9.29.0)(typescript@5.8.3))(eslint@9.29.0)(typescript@5.8.3)
      '@typescript-eslint/parser':
        specifier: ^8.34.1
        version: 8.35.0(eslint@9.29.0)(typescript@5.8.3)
      '@vitest/coverage-v8':
        specifier: ^3.2.4
        version: 3.2.4(vitest@3.2.4(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0))
      '@web-std/file':
        specifier: ^3.0.3
        version: 3.0.3
      eslint:
        specifier: ^9.29.0
        version: 9.29.0
      eslint-config-prettier:
        specifier: ^10.1.5
        version: 10.1.5(eslint@9.29.0)
      prettier:
        specifier: ^3.5.3
        version: 3.6.0
      recheck:
        specifier: ^4.5.0
        version: 4.5.0
      ts-node:
        specifier: ^10.9.2
        version: 10.9.2(@types/node@24.0.3)(typescript@5.8.3)
      tsup:
        specifier: ^8.5.0
        version: 8.5.0(postcss@8.5.6)(tsx@4.20.3)(typescript@5.8.3)(yaml@2.8.0)
      tsx:
        specifier: ^4.19.2
        version: 4.20.3
      typescript:
        specifier: ^5.8.3
        version: 5.8.3
      vitest:
        specifier: ^3.2.4
        version: 3.2.4(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0)
      zod:
        specifier: ^3.25.76
        version: 3.25.76

packages:

  '@ai-sdk/openai@1.3.22':
    resolution: {integrity: sha512-QwA+2EkG0QyjVR+7h6FE7iOu2ivNqAVMm9UJZkVxxTk5OIq5fFJDTEI/zICEMuHImTTXR2JjsL6EirJ28Jc4cw==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.0.0

  '@ai-sdk/provider-utils@2.2.8':
    resolution: {integrity: sha512-fqhG+4sCVv8x7nFzYnFo19ryhAa3w096Kmc3hWxMQfW/TubPOmt3A6tYZhl4mUfQWWQMsuSkLrtjlWuXBVSGQA==}
    engines: {node: '>=18'}
    peerDependencies:
      zod: ^3.23.8

  '@ai-sdk/provider@1.1.3':
    resolution: {integrity: sha512-qZMxYJ0qqX/RfnuIaab+zp8UAeJn/ygXXAffR5I4N0n1IrvA6qBsjc8hXLmBiMV2zoXlifkacF7sEFnYnjBcqg==}
    engines: {node: '>=18'}

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@anthropic-ai/sdk@0.39.0':
    resolution: {integrity: sha512-eMyDIPRZbt1CCLErRCi3exlAvNkBtRe+kW5vvJyef93PmNr/clstYgHhtvmkxN82nlKgzyGPCyGxrm0JQ1ZIdg==}

  '@babel/helper-string-parser@7.27.1':
    resolution: {integrity: sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.27.1':
    resolution: {integrity: sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.27.5':
    resolution: {integrity: sha512-OsQd175SxWkGlzbny8J3K8TnnDD0N3lrIUtB92xwyRpzaenGZhxDvxN/JgU00U3CDZNj9tPuDJ5H0WS4Nt3vKg==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/types@7.27.6':
    resolution: {integrity: sha512-ETyHEk2VHHvl9b9jZP5IHPavHYk57EhanlRRuae9XCpb/j5bDCbPPMOBfCWhnl/7EDJz0jEMCi/RhccCE8r1+Q==}
    engines: {node: '>=6.9.0'}

  '@bcoe/v8-coverage@1.0.2':
    resolution: {integrity: sha512-6zABk/ECA/QYSCQ1NGiVwwbQerUCZ+TQbp64Q3AgmfNvurHH0j8TtXa1qbShXA6qqkpAj4V5W8pP6mLe1mcMqA==}
    engines: {node: '>=18'}

  '@colors/colors@1.6.0':
    resolution: {integrity: sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA==}
    engines: {node: '>=0.1.90'}

  '@cspotcode/source-map-support@0.8.1':
    resolution: {integrity: sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==}
    engines: {node: '>=12'}

  '@dabh/diagnostics@2.0.3':
    resolution: {integrity: sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==}

  '@esbuild/aix-ppc64@0.25.5':
    resolution: {integrity: sha512-9o3TMmpmftaCMepOdA5k/yDw8SfInyzWWTjYTFCX3kPSDJMROQTb8jg+h9Cnwnmm1vOzvxN7gIfB5V2ewpjtGA==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.25.5':
    resolution: {integrity: sha512-VGzGhj4lJO+TVGV1v8ntCZWJktV7SGCs3Pn1GRWI1SBFtRALoomm8k5E9Pmwg3HOAal2VDc2F9+PM/rEY6oIDg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.25.5':
    resolution: {integrity: sha512-AdJKSPeEHgi7/ZhuIPtcQKr5RQdo6OO2IL87JkianiMYMPbCtot9fxPbrMiBADOWWm3T2si9stAiVsGbTQFkbA==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.25.5':
    resolution: {integrity: sha512-D2GyJT1kjvO//drbRT3Hib9XPwQeWd9vZoBJn+bu/lVsOZ13cqNdDeqIF/xQ5/VmWvMduP6AmXvylO/PIc2isw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.25.5':
    resolution: {integrity: sha512-GtaBgammVvdF7aPIgH2jxMDdivezgFu6iKpmT+48+F8Hhg5J/sfnDieg0aeG/jfSvkYQU2/pceFPDKlqZzwnfQ==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.25.5':
    resolution: {integrity: sha512-1iT4FVL0dJ76/q1wd7XDsXrSW+oLoquptvh4CLR4kITDtqi2e/xwXwdCVH8hVHU43wgJdsq7Gxuzcs6Iq/7bxQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.25.5':
    resolution: {integrity: sha512-nk4tGP3JThz4La38Uy/gzyXtpkPW8zSAmoUhK9xKKXdBCzKODMc2adkB2+8om9BDYugz+uGV7sLmpTYzvmz6Sw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.25.5':
    resolution: {integrity: sha512-PrikaNjiXdR2laW6OIjlbeuCPrPaAl0IwPIaRv+SMV8CiM8i2LqVUHFC1+8eORgWyY7yhQY+2U2fA55mBzReaw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.25.5':
    resolution: {integrity: sha512-Z9kfb1v6ZlGbWj8EJk9T6czVEjjq2ntSYLY2cw6pAZl4oKtfgQuS4HOq41M/BcoLPzrUbNd+R4BXFyH//nHxVg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.25.5':
    resolution: {integrity: sha512-cPzojwW2okgh7ZlRpcBEtsX7WBuqbLrNXqLU89GxWbNt6uIg78ET82qifUy3W6OVww6ZWobWub5oqZOVtwolfw==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.25.5':
    resolution: {integrity: sha512-sQ7l00M8bSv36GLV95BVAdhJ2QsIbCuCjh/uYrWiMQSUuV+LpXwIqhgJDcvMTj+VsQmqAHL2yYaasENvJ7CDKA==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.25.5':
    resolution: {integrity: sha512-0ur7ae16hDUC4OL5iEnDb0tZHDxYmuQyhKhsPBV8f99f6Z9KQM02g33f93rNH5A30agMS46u2HP6qTdEt6Q1kg==}
    engines: {node: '>=18'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.25.5':
    resolution: {integrity: sha512-kB/66P1OsHO5zLz0i6X0RxlQ+3cu0mkxS3TKFvkb5lin6uwZ/ttOkP3Z8lfR9mJOBk14ZwZ9182SIIWFGNmqmg==}
    engines: {node: '>=18'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.25.5':
    resolution: {integrity: sha512-UZCmJ7r9X2fe2D6jBmkLBMQetXPXIsZjQJCjgwpVDz+YMcS6oFR27alkgGv3Oqkv07bxdvw7fyB71/olceJhkQ==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.25.5':
    resolution: {integrity: sha512-kTxwu4mLyeOlsVIFPfQo+fQJAV9mh24xL+y+Bm6ej067sYANjyEw1dNHmvoqxJUCMnkBdKpvOn0Ahql6+4VyeA==}
    engines: {node: '>=18'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.25.5':
    resolution: {integrity: sha512-K2dSKTKfmdh78uJ3NcWFiqyRrimfdinS5ErLSn3vluHNeHVnBAFWC8a4X5N+7FgVE1EjXS1QDZbpqZBjfrqMTQ==}
    engines: {node: '>=18'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.25.5':
    resolution: {integrity: sha512-uhj8N2obKTE6pSZ+aMUbqq+1nXxNjZIIjCjGLfsWvVpy7gKCOL6rsY1MhRh9zLtUtAI7vpgLMK6DxjO8Qm9lJw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-arm64@0.25.5':
    resolution: {integrity: sha512-pwHtMP9viAy1oHPvgxtOv+OkduK5ugofNTVDilIzBLpoWAM16r7b/mxBvfpuQDpRQFMfuVr5aLcn4yveGvBZvw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.25.5':
    resolution: {integrity: sha512-WOb5fKrvVTRMfWFNCroYWWklbnXH0Q5rZppjq0vQIdlsQKuw6mdSihwSo4RV/YdQ5UCKKvBy7/0ZZYLBZKIbwQ==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-arm64@0.25.5':
    resolution: {integrity: sha512-7A208+uQKgTxHd0G0uqZO8UjK2R0DDb4fDmERtARjSHWxqMTye4Erz4zZafx7Di9Cv+lNHYuncAkiGFySoD+Mw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.25.5':
    resolution: {integrity: sha512-G4hE405ErTWraiZ8UiSoesH8DaCsMm0Cay4fsFWOOUcz8b8rC6uCvnagr+gnioEjWn0wC+o1/TAHt+It+MpIMg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.25.5':
    resolution: {integrity: sha512-l+azKShMy7FxzY0Rj4RCt5VD/q8mG/e+mDivgspo+yL8zW7qEwctQ6YqKX34DTEleFAvCIUviCFX1SDZRSyMQA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.25.5':
    resolution: {integrity: sha512-O2S7SNZzdcFG7eFKgvwUEZ2VG9D/sn/eIiz8XRZ1Q/DO5a3s76Xv0mdBzVM5j5R639lXQmPmSo0iRpHqUUrsxw==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.25.5':
    resolution: {integrity: sha512-onOJ02pqs9h1iMJ1PQphR+VZv8qBMQ77Klcsqv9CNW2w6yLqoURLcgERAIurY6QE63bbLuqgP9ATqajFLK5AMQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.25.5':
    resolution: {integrity: sha512-TXv6YnJ8ZMVdX+SXWVBo/0p8LTcrUYngpWjvm91TMjjBQii7Oz11Lw5lbDV5Y0TzuhSJHwiH4hEtC1I42mMS0g==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [win32]

  '@eslint-community/eslint-utils@4.7.0':
    resolution: {integrity: sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.12.1':
    resolution: {integrity: sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/config-array@0.20.1':
    resolution: {integrity: sha512-OL0RJzC/CBzli0DrrR31qzj6d6i6Mm3HByuhflhl4LOBiWxN+3i6/t/ZQQNii4tjksXi8r2CRW1wMpWA2ULUEw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/config-helpers@0.2.3':
    resolution: {integrity: sha512-u180qk2Um1le4yf0ruXH3PYFeEZeYC3p/4wCTKrr2U1CmGdzGi3KtY0nuPDH48UJxlKCC5RDzbcbh4X0XlqgHg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.14.0':
    resolution: {integrity: sha512-qIbV0/JZr7iSDjqAc60IqbLdsj9GDt16xQtWD+B78d/HAlvysGdZZ6rpJHGAc2T0FQx1X6thsSPdnoiGKdNtdg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/core@0.15.0':
    resolution: {integrity: sha512-b7ePw78tEWWkpgZCDYkbqDOP8dmM6qe+AOC6iuJqlq1R/0ahMAeH3qynpnqKFGkMltrp44ohV4ubGyvLX28tzw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/eslintrc@3.3.1':
    resolution: {integrity: sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/js@9.29.0':
    resolution: {integrity: sha512-3PIF4cBw/y+1u2EazflInpV+lYsSG0aByVIQzAgb1m1MhHFSbqTyNqtBKHgWf/9Ykud+DhILS9EGkmekVhbKoQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/object-schema@2.1.6':
    resolution: {integrity: sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/plugin-kit@0.3.2':
    resolution: {integrity: sha512-4SaFZCNfJqvk/kenHpI8xvN42DMaoycy4PzKc5otHxRswww1kAt82OlBuwRVLofCACCTZEcla2Ydxv8scMXaTg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@grpc/grpc-js@1.7.3':
    resolution: {integrity: sha512-H9l79u4kJ2PVSxUNA08HMYAnUBLj9v6KjYQ7SQ71hOZcEXhShE/y5iQCesP8+6/Ik/7i2O0a10bPquIcYfufog==}
    engines: {node: ^8.13.0 || >=10.10.0}

  '@grpc/proto-loader@0.7.15':
    resolution: {integrity: sha512-tMXdRCfYVixjuFK+Hk0Q1s38gV9zDiDJfWL3h1rv4Qc39oILCu1TRTDt7+fGUI8K4G1Fj125Hx/ru3azECWTyQ==}
    engines: {node: '>=6'}
    hasBin: true

  '@humanfs/core@0.19.1':
    resolution: {integrity: sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==}
    engines: {node: '>=18.18.0'}

  '@humanfs/node@0.16.6':
    resolution: {integrity: sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==}
    engines: {node: '>=18.18.0'}

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/retry@0.3.1':
    resolution: {integrity: sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==}
    engines: {node: '>=18.18'}

  '@humanwhocodes/retry@0.4.3':
    resolution: {integrity: sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==}
    engines: {node: '>=18.18'}

  '@ioredis/commands@1.2.0':
    resolution: {integrity: sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg==}

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@istanbuljs/schema@0.1.3':
    resolution: {integrity: sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==}
    engines: {node: '>=8'}

  '@jridgewell/gen-mapping@0.3.8':
    resolution: {integrity: sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@jridgewell/trace-mapping@0.3.9':
    resolution: {integrity: sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==}

  '@modelcontextprotocol/sdk@1.15.1':
    resolution: {integrity: sha512-W/XlN9c528yYn+9MQkVjxiTPgPxoxt+oczfjHBDsJx0+59+O7B75Zhsp0B16Xbwbz8ANISDajh6+V7nIcPMc5w==}
    engines: {node: '>=18'}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@opentelemetry/api@1.9.0':
    resolution: {integrity: sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==}
    engines: {node: '>=8.0.0'}

  '@petamoriken/float16@3.9.2':
    resolution: {integrity: sha512-VgffxawQde93xKxT3qap3OH+meZf7VaSB5Sqd4Rqc+FP5alWbpOyan/7tRbOAvynjpG3GpdtAuGU/NdhQpmrog==}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@pkgr/core@0.1.2':
    resolution: {integrity: sha512-fdDH1LSGfZdTH2sxdpVMw31BanV28K/Gry0cVFxaNP77neJSkd82mM8ErPNYs9e+0O7SdHBLTDzDgwUuy18RnQ==}
    engines: {node: ^12.20.0 || ^14.18.0 || >=16.0.0}

  '@protobufjs/aspromise@1.1.2':
    resolution: {integrity: sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==}

  '@protobufjs/base64@1.1.2':
    resolution: {integrity: sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==}

  '@protobufjs/codegen@2.0.4':
    resolution: {integrity: sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==}

  '@protobufjs/eventemitter@1.1.0':
    resolution: {integrity: sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==}

  '@protobufjs/fetch@1.1.0':
    resolution: {integrity: sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==}

  '@protobufjs/float@1.0.2':
    resolution: {integrity: sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==}

  '@protobufjs/inquire@1.1.0':
    resolution: {integrity: sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==}

  '@protobufjs/path@1.1.2':
    resolution: {integrity: sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==}

  '@protobufjs/pool@1.1.0':
    resolution: {integrity: sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==}

  '@protobufjs/utf8@1.1.0':
    resolution: {integrity: sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==}

  '@qdrant/js-client-rest@1.14.1':
    resolution: {integrity: sha512-CkCCTDc4gCXq+hhjB3yDw9Hs/PxCJ0bKqk/LjAAmuL9+nDm/RPue4C/tGOIMlzouTQ2l6J6t+JPeM//j38VFug==}
    engines: {node: '>=18.17.0', pnpm: '>=8'}
    peerDependencies:
      typescript: '>=4.7'

  '@qdrant/openapi-typescript-fetch@1.2.6':
    resolution: {integrity: sha512-oQG/FejNpItrxRHoyctYvT3rwGZOnK4jr3JdppO/c78ktDvkWiPXPHNsrDf33K9sZdRb6PR7gi4noIapu5q4HA==}
    engines: {node: '>=18.0.0', pnpm: '>=8'}

  '@rollup/rollup-android-arm-eabi@4.44.0':
    resolution: {integrity: sha512-xEiEE5oDW6tK4jXCAyliuntGR+amEMO7HLtdSshVuhFnKTYoeYMyXQK7pLouAJJj5KHdwdn87bfHAR2nSdNAUA==}
    cpu: [arm]
    os: [android]

  '@rollup/rollup-android-arm64@4.44.0':
    resolution: {integrity: sha512-uNSk/TgvMbskcHxXYHzqwiyBlJ/lGcv8DaUfcnNwict8ba9GTTNxfn3/FAoFZYgkaXXAdrAA+SLyKplyi349Jw==}
    cpu: [arm64]
    os: [android]

  '@rollup/rollup-darwin-arm64@4.44.0':
    resolution: {integrity: sha512-VGF3wy0Eq1gcEIkSCr8Ke03CWT+Pm2yveKLaDvq51pPpZza3JX/ClxXOCmTYYq3us5MvEuNRTaeyFThCKRQhOA==}
    cpu: [arm64]
    os: [darwin]

  '@rollup/rollup-darwin-x64@4.44.0':
    resolution: {integrity: sha512-fBkyrDhwquRvrTxSGH/qqt3/T0w5Rg0L7ZIDypvBPc1/gzjJle6acCpZ36blwuwcKD/u6oCE/sRWlUAcxLWQbQ==}
    cpu: [x64]
    os: [darwin]

  '@rollup/rollup-freebsd-arm64@4.44.0':
    resolution: {integrity: sha512-u5AZzdQJYJXByB8giQ+r4VyfZP+walV+xHWdaFx/1VxsOn6eWJhK2Vl2eElvDJFKQBo/hcYIBg/jaKS8ZmKeNQ==}
    cpu: [arm64]
    os: [freebsd]

  '@rollup/rollup-freebsd-x64@4.44.0':
    resolution: {integrity: sha512-qC0kS48c/s3EtdArkimctY7h3nHicQeEUdjJzYVJYR3ct3kWSafmn6jkNCA8InbUdge6PVx6keqjk5lVGJf99g==}
    cpu: [x64]
    os: [freebsd]

  '@rollup/rollup-linux-arm-gnueabihf@4.44.0':
    resolution: {integrity: sha512-x+e/Z9H0RAWckn4V2OZZl6EmV0L2diuX3QB0uM1r6BvhUIv6xBPL5mrAX2E3e8N8rEHVPwFfz/ETUbV4oW9+lQ==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm-musleabihf@4.44.0':
    resolution: {integrity: sha512-1exwiBFf4PU/8HvI8s80icyCcnAIB86MCBdst51fwFmH5dyeoWVPVgmQPcKrMtBQ0W5pAs7jBCWuRXgEpRzSCg==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm64-gnu@4.44.0':
    resolution: {integrity: sha512-ZTR2mxBHb4tK4wGf9b8SYg0Y6KQPjGpR4UWwTFdnmjB4qRtoATZ5dWn3KsDwGa5Z2ZBOE7K52L36J9LueKBdOQ==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-arm64-musl@4.44.0':
    resolution: {integrity: sha512-GFWfAhVhWGd4r6UxmnKRTBwP1qmModHtd5gkraeW2G490BpFOZkFtem8yuX2NyafIP/mGpRJgTJ2PwohQkUY/Q==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-loongarch64-gnu@4.44.0':
    resolution: {integrity: sha512-xw+FTGcov/ejdusVOqKgMGW3c4+AgqrfvzWEVXcNP6zq2ue+lsYUgJ+5Rtn/OTJf7e2CbgTFvzLW2j0YAtj0Gg==}
    cpu: [loong64]
    os: [linux]

  '@rollup/rollup-linux-powerpc64le-gnu@4.44.0':
    resolution: {integrity: sha512-bKGibTr9IdF0zr21kMvkZT4K6NV+jjRnBoVMt2uNMG0BYWm3qOVmYnXKzx7UhwrviKnmK46IKMByMgvpdQlyJQ==}
    cpu: [ppc64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-gnu@4.44.0':
    resolution: {integrity: sha512-vV3cL48U5kDaKZtXrti12YRa7TyxgKAIDoYdqSIOMOFBXqFj2XbChHAtXquEn2+n78ciFgr4KIqEbydEGPxXgA==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-musl@4.44.0':
    resolution: {integrity: sha512-TDKO8KlHJuvTEdfw5YYFBjhFts2TR0VpZsnLLSYmB7AaohJhM8ctDSdDnUGq77hUh4m/djRafw+9zQpkOanE2Q==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-s390x-gnu@4.44.0':
    resolution: {integrity: sha512-8541GEyktXaw4lvnGp9m84KENcxInhAt6vPWJ9RodsB/iGjHoMB2Pp5MVBCiKIRxrxzJhGCxmNzdu+oDQ7kwRA==}
    cpu: [s390x]
    os: [linux]

  '@rollup/rollup-linux-x64-gnu@4.44.0':
    resolution: {integrity: sha512-iUVJc3c0o8l9Sa/qlDL2Z9UP92UZZW1+EmQ4xfjTc1akr0iUFZNfxrXJ/R1T90h/ILm9iXEY6+iPrmYB3pXKjw==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-linux-x64-musl@4.44.0':
    resolution: {integrity: sha512-PQUobbhLTQT5yz/SPg116VJBgz+XOtXt8D1ck+sfJJhuEsMj2jSej5yTdp8CvWBSceu+WW+ibVL6dm0ptG5fcA==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-win32-arm64-msvc@4.44.0':
    resolution: {integrity: sha512-M0CpcHf8TWn+4oTxJfh7LQuTuaYeXGbk0eageVjQCKzYLsajWS/lFC94qlRqOlyC2KvRT90ZrfXULYmukeIy7w==}
    cpu: [arm64]
    os: [win32]

  '@rollup/rollup-win32-ia32-msvc@4.44.0':
    resolution: {integrity: sha512-3XJ0NQtMAXTWFW8FqZKcw3gOQwBtVWP/u8TpHP3CRPXD7Pd6s8lLdH3sHWh8vqKCyyiI8xW5ltJScQmBU9j7WA==}
    cpu: [ia32]
    os: [win32]

  '@rollup/rollup-win32-x64-msvc@4.44.0':
    resolution: {integrity: sha512-Q2Mgwt+D8hd5FIPUuPDsvPR7Bguza6yTkJxspDGkZj7tBRn2y4KSWYuIXpftFSjBra76TbKerCV7rgFPQrn+wQ==}
    cpu: [x64]
    os: [win32]

  '@sevinf/maybe@0.5.0':
    resolution: {integrity: sha512-ARhyoYDnY1LES3vYI0fiG6e9esWfTNcXcO6+MPJJXcnyMV3bim4lnFt45VXouV7y82F4x3YH8nOQ6VztuvUiWg==}

  '@tsconfig/node10@1.0.11':
    resolution: {integrity: sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==}

  '@tsconfig/node12@1.0.11':
    resolution: {integrity: sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==}

  '@tsconfig/node14@1.0.3':
    resolution: {integrity: sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==}

  '@tsconfig/node16@1.0.4':
    resolution: {integrity: sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==}

  '@types/better-sqlite3@7.6.13':
    resolution: {integrity: sha512-NMv9ASNARoKksWtsq/SHakpYAYnhBrQgGD8zkLYk/jaK8jUGn08CfEdTRgYhMypUQAfzSP8W6gNLe0q19/t4VA==}

  '@types/body-parser@1.19.6':
    resolution: {integrity: sha512-HLFeCYgz89uk22N5Qg3dvGvsv46B8GLvKKo1zKG4NybA8U2DiEO3w9lqGg29t/tfLRJpJ6iQxnVw4OnB7MoM9g==}

  '@types/chai@5.2.2':
    resolution: {integrity: sha512-8kB30R7Hwqf40JPiKhVzodJs2Qc1ZJ5zuT3uzw5Hq/dhNCl3G3l83jfpdI1e20BP348+fV7VIL/+FxaXkqBmWg==}

  '@types/connect@3.4.38':
    resolution: {integrity: sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==}

  '@types/cors@2.8.19':
    resolution: {integrity: sha512-mFNylyeyqN93lfe/9CSxOGREz8cpzAhH+E93xJ4xWQf62V8sQ/24reV2nyzUWM6H6Xji+GGHpkbLe7pVoUEskg==}

  '@types/deep-eql@4.0.2':
    resolution: {integrity: sha512-c9h9dVVMigMPc4bwTvC5dxqtqJZwQPePsWjPlpSOnojbor6pGqdk541lfA7AqFQr5pB1BRdq0juY9db81BwyFw==}

  '@types/estree@1.0.8':
    resolution: {integrity: sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==}

  '@types/express-serve-static-core@5.0.6':
    resolution: {integrity: sha512-3xhRnjJPkULekpSzgtoNYYcTWgEZkp4myc+Saevii5JPnHNvHMRlBSHDbs7Bh1iPPoVTERHEZXyhyLbMEsExsA==}

  '@types/express@5.0.3':
    resolution: {integrity: sha512-wGA0NX93b19/dZC1J18tKWVIYWyyF2ZjT9vin/NRu0qzzvfVzWjs04iq2rQ3H65vCTQYlRqs3YHfY7zjdV+9Kw==}

  '@types/http-errors@2.0.5':
    resolution: {integrity: sha512-r8Tayk8HJnX0FztbZN7oVqGccWgw98T/0neJphO91KkmOzug1KkofZURD4UaD5uH8AqcFLfdPErnBod0u71/qg==}

  '@types/js-yaml@4.0.9':
    resolution: {integrity: sha512-k4MGaQl5TGo/iipqb2UDG2UwjXziSWkh0uysQelTlJpX1qGlpUZYm8PnO4DxG1qBomtJUdYJ6qR6xdIah10JLg==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/mime@1.3.5':
    resolution: {integrity: sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==}

  '@types/node-fetch@2.6.12':
    resolution: {integrity: sha512-8nneRWKCg3rMtF69nLQJnOYUcbafYeFSjqkw3jCRLsqkWFlHaoQrr5mXmofFGOx3DKn7UfmBMyov8ySvLRVldA==}

  '@types/node@18.19.112':
    resolution: {integrity: sha512-i+Vukt9POdS/MBI7YrrkkI5fMfwFtOjphSmt4WXYLfwqsfr6z/HdCx7LqT9M7JktGob8WNgj8nFB4TbGNE4Cog==}

  '@types/node@24.0.3':
    resolution: {integrity: sha512-R4I/kzCYAdRLzfiCabn9hxWfbuHS573x+r0dJMkkzThEa7pbrcDWK+9zu3e7aBOouf+rQAciqPFMnxwr0aWgKg==}

  '@types/pg@8.15.4':
    resolution: {integrity: sha512-I6UNVBAoYbvuWkkU3oosC8yxqH21f4/Jc4DK71JLG3dT2mdlGe1z+ep/LQGXaKaOgcvUrsQoPRqfgtMcvZiJhg==}

  '@types/qs@6.14.0':
    resolution: {integrity: sha512-eOunJqu0K1923aExK6y8p6fsihYEn/BYuQ4g0CxAAgFc4b/ZLN4CrsRZ55srTdqoiLzU2B2evC+apEIxprEzkQ==}

  '@types/range-parser@1.2.7':
    resolution: {integrity: sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==}

  '@types/send@0.17.5':
    resolution: {integrity: sha512-z6F2D3cOStZvuk2SaP6YrwkNO65iTZcwA2ZkSABegdkAh/lf+Aa/YQndZVfmEXT5vgAp6zv06VQ3ejSVjAny4w==}

  '@types/serve-static@1.15.8':
    resolution: {integrity: sha512-roei0UY3LhpOJvjbIP6ZZFngyLKl5dskOtDhxY5THRSpO+ZI+nzJ+m5yUMzGrp89YRa7lvknKkMYjqQFGwA7Sg==}

  '@types/triple-beam@1.3.5':
    resolution: {integrity: sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw==}

  '@types/uuid@10.0.0':
    resolution: {integrity: sha512-7gqG38EyHgyP1S+7+xomFtL+ZNHcKv6DwNaCZmJmo1vgMugyF3TCnXVg4t1uk89mLNwnLtnY3TpOpCOyp1/xHQ==}

  '@typescript-eslint/eslint-plugin@8.35.0':
    resolution: {integrity: sha512-ijItUYaiWuce0N1SoSMrEd0b6b6lYkYt99pqCPfybd+HKVXtEvYhICfLdwp42MhiI5mp0oq7PKEL+g1cNiz/Eg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      '@typescript-eslint/parser': ^8.35.0
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/parser@8.35.0':
    resolution: {integrity: sha512-6sMvZePQrnZH2/cJkwRpkT7DxoAWh+g6+GFRK6bV3YQo7ogi3SX5rgF6099r5Q53Ma5qeT7LGmOmuIutF4t3lA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/project-service@8.35.0':
    resolution: {integrity: sha512-41xatqRwWZuhUMF/aZm2fcUsOFKNcG28xqRSS6ZVr9BVJtGExosLAm5A1OxTjRMagx8nJqva+P5zNIGt8RIgbQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/scope-manager@8.35.0':
    resolution: {integrity: sha512-+AgL5+mcoLxl1vGjwNfiWq5fLDZM1TmTPYs2UkyHfFhgERxBbqHlNjRzhThJqz+ktBqTChRYY6zwbMwy0591AA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/tsconfig-utils@8.35.0':
    resolution: {integrity: sha512-04k/7247kZzFraweuEirmvUj+W3bJLI9fX6fbo1Qm2YykuBvEhRTPl8tcxlYO8kZZW+HIXfkZNoasVb8EV4jpA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/type-utils@8.35.0':
    resolution: {integrity: sha512-ceNNttjfmSEoM9PW87bWLDEIaLAyR+E6BoYJQ5PfaDau37UGca9Nyq3lBk8Bw2ad0AKvYabz6wxc7DMTO2jnNA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/types@8.35.0':
    resolution: {integrity: sha512-0mYH3emanku0vHw2aRLNGqe7EXh9WHEhi7kZzscrMDf6IIRUQ5Jk4wp1QrledE/36KtdZrVfKnE32eZCf/vaVQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/typescript-estree@8.35.0':
    resolution: {integrity: sha512-F+BhnaBemgu1Qf8oHrxyw14wq6vbL8xwWKKMwTMwYIRmFFY/1n/9T/jpbobZL8vp7QyEUcC6xGrnAO4ua8Kp7w==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/utils@8.35.0':
    resolution: {integrity: sha512-nqoMu7WWM7ki5tPgLVsmPM8CkqtoPUG6xXGeefM5t4x3XumOEKMoUZPdi+7F+/EotukN4R9OWdmDxN80fqoZeg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '>=4.8.4 <5.9.0'

  '@typescript-eslint/visitor-keys@8.35.0':
    resolution: {integrity: sha512-zTh2+1Y8ZpmeQaQVIc/ZZxsx8UzgKJyNg1PTvjzC7WMhPSVS8bfDX34k1SrwOf016qd5RU3az2UxUNue3IfQ5g==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@vitest/coverage-v8@3.2.4':
    resolution: {integrity: sha512-EyF9SXU6kS5Ku/U82E259WSnvg6c8KTjppUncuNdm5QHpe17mwREHnjDzozC8x9MZ0xfBUFSaLkRv4TMA75ALQ==}
    peerDependencies:
      '@vitest/browser': 3.2.4
      vitest: 3.2.4
    peerDependenciesMeta:
      '@vitest/browser':
        optional: true

  '@vitest/expect@3.2.4':
    resolution: {integrity: sha512-Io0yyORnB6sikFlt8QW5K7slY4OjqNX9jmJQ02QDda8lyM6B5oNgVWoSoKPac8/kgnCUzuHQKrSLtu/uOqqrig==}

  '@vitest/mocker@3.2.4':
    resolution: {integrity: sha512-46ryTE9RZO/rfDd7pEqFl7etuyzekzEhUbTW3BvmeO/BcCMEgq59BKhek3dXDWgAj4oMK6OZi+vRr1wPW6qjEQ==}
    peerDependencies:
      msw: ^2.4.9
      vite: ^5.0.0 || ^6.0.0 || ^7.0.0-0
    peerDependenciesMeta:
      msw:
        optional: true
      vite:
        optional: true

  '@vitest/pretty-format@3.2.4':
    resolution: {integrity: sha512-IVNZik8IVRJRTr9fxlitMKeJeXFFFN0JaB9PHPGQ8NKQbGpfjlTx9zO4RefN8gp7eqjNy8nyK3NZmBzOPeIxtA==}

  '@vitest/runner@3.2.4':
    resolution: {integrity: sha512-oukfKT9Mk41LreEW09vt45f8wx7DordoWUZMYdY/cyAk7w5TWkTRCNZYF7sX7n2wB7jyGAl74OxgwhPgKaqDMQ==}

  '@vitest/snapshot@3.2.4':
    resolution: {integrity: sha512-dEYtS7qQP2CjU27QBC5oUOxLE/v5eLkGqPE0ZKEIDGMs4vKWe7IjgLOeauHsR0D5YuuycGRO5oSRXnwnmA78fQ==}

  '@vitest/spy@3.2.4':
    resolution: {integrity: sha512-vAfasCOe6AIK70iP5UD11Ac4siNUNJ9i/9PZ3NKx07sG6sUxeag1LWdNrMWeKKYBLlzuK+Gn65Yd5nyL6ds+nw==}

  '@vitest/utils@3.2.4':
    resolution: {integrity: sha512-fB2V0JFrQSMsCo9HiSq3Ezpdv4iYaXRG1Sx8edX3MwxfyNn83mKiGzOcH+Fkxt4MHxr3y42fQi1oeAInqgX2QA==}

  '@web-std/blob@3.0.5':
    resolution: {integrity: sha512-Lm03qr0eT3PoLBuhkvFBLf0EFkAsNz/G/AYCzpOdi483aFaVX86b4iQs0OHhzHJfN5C15q17UtDbyABjlzM96A==}

  '@web-std/file@3.0.3':
    resolution: {integrity: sha512-X7YYyvEERBbaDfJeC9lBKC5Q5lIEWYCP1SNftJNwNH/VbFhdHm+3neKOQP+kWEYJmosbDFq+NEUG7+XIvet/Jw==}

  '@web-std/stream@1.0.0':
    resolution: {integrity: sha512-jyIbdVl+0ZJyKGTV0Ohb9E6UnxP+t7ZzX4Do3AHjZKxUXKMs9EmqnBDQgHF7bEw0EzbQygOjtt/7gvtmi//iCQ==}

  '@zilliz/milvus2-sdk-node@2.5.12':
    resolution: {integrity: sha512-pr1EK7zdcp902xxvV2tLSDBSQrGxpb6pAvRhn/T+RRR/xEBo+cYKNpz4GLRauAxXC2y9wUUdQhVYfM4wg5VHwg==}

  '@zxing/text-encoding@0.9.0':
    resolution: {integrity: sha512-U/4aVJ2mxI0aDNI8Uq0wEhMgY+u4CNtEb0om3+y3+niDAsoTCOB33UF0sxpzqzdqXLqmvc+vZyAt4O8pPdfkwA==}

  abort-controller@3.0.0:
    resolution: {integrity: sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==}
    engines: {node: '>=6.5'}

  accepts@2.0.0:
    resolution: {integrity: sha512-5cvg6CtKwfgdmVqY1WIiXKc3Q1bkRqGLi+2W/6ao+6Y7gu/RCwRuAhGEzh5B4KlszSuTLgZYuqFqo5bImjNKng==}
    engines: {node: '>= 0.6'}

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn-walk@8.3.4:
    resolution: {integrity: sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==}
    engines: {node: '>=0.4.0'}

  acorn@8.15.0:
    resolution: {integrity: sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  agentkeepalive@4.6.0:
    resolution: {integrity: sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==}
    engines: {node: '>= 8.0.0'}

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ansi-align@3.0.1:
    resolution: {integrity: sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.1.0:
    resolution: {integrity: sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  arg@4.1.3:
    resolution: {integrity: sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  assertion-error@2.0.1:
    resolution: {integrity: sha512-Izi8RQcffqCeNVgFigKli1ssklIbpHnCYc6AknXGYoB6grJqyeby7jv12JUQgmTAnIDnbck1uxksT4dzN3PWBA==}
    engines: {node: '>=12'}

  ast-v8-to-istanbul@0.3.3:
    resolution: {integrity: sha512-MuXMrSLVVoA6sYN/6Hke18vMzrT4TZNbZIj/hvh0fnYFpO+/kFXcLIaiPwXXWaQUPg4yJD8fj+lfJ7/1EBconw==}

  async@3.2.6:
    resolution: {integrity: sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  available-typed-arrays@1.0.7:
    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
    engines: {node: '>= 0.4'}

  axios@1.10.0:
    resolution: {integrity: sha512-/1xYAC4MP/HEG+3duIhFr4ZQXR4sQXOIe+o6sdqzeykGLx6Upp/1p8MHqhINOvGeP7xyNHe7tsiJByc4SSVUxw==}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}

  better-sqlite3@12.2.0:
    resolution: {integrity: sha512-eGbYq2CT+tos1fBwLQ/tkBt9J5M3JEHjku4hbvQUePCckkvVf14xWj+1m7dGoK81M/fOjFT7yM9UMeKT/+vFLQ==}
    engines: {node: 20.x || 22.x || 23.x || 24.x}

  bindings@1.5.0:
    resolution: {integrity: sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==}

  bl@4.1.0:
    resolution: {integrity: sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==}

  body-parser@2.2.0:
    resolution: {integrity: sha512-02qvAaxv8tp7fBa/mw1ga98OGm+eCbqzJOKoRt70sLmfEEi+jyBYVTDGfCL/k06/4EMk/z01gCe7HoCH/f2LTg==}
    engines: {node: '>=18'}

  boxen@8.0.1:
    resolution: {integrity: sha512-F3PH5k5juxom4xktynS7MoFY+NUWH5LC4CnH11YB8NPew+HLpmBLCybSAEyb2F+4pRXhuhWqFesoQd6DAyc2hw==}
    engines: {node: '>=18'}

  brace-expansion@1.1.12:
    resolution: {integrity: sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==}

  brace-expansion@2.0.2:
    resolution: {integrity: sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  buffer@5.7.1:
    resolution: {integrity: sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==}

  buffer@6.0.3:
    resolution: {integrity: sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==}

  bundle-require@5.1.0:
    resolution: {integrity: sha512-3WrrOuZiyaaZPWiEt4G3+IffISVC9HYlWueJEBWED4ZH4aIAC2PnkdnuRrR94M+w6yGWn4AglWtJtBI8YqvgoA==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
    peerDependencies:
      esbuild: '>=0.18'

  bytes@3.1.2:
    resolution: {integrity: sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==}
    engines: {node: '>= 0.8'}

  cac@6.7.14:
    resolution: {integrity: sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==}
    engines: {node: '>=8'}

  call-bind-apply-helpers@1.0.2:
    resolution: {integrity: sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==}
    engines: {node: '>= 0.4'}

  call-bind@1.0.8:
    resolution: {integrity: sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==}
    engines: {node: '>= 0.4'}

  call-bound@1.0.4:
    resolution: {integrity: sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==}
    engines: {node: '>= 0.4'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase@8.0.0:
    resolution: {integrity: sha512-8WB3Jcas3swSvjIeA2yvCJ+Miyz5l1ZmB6HFb9R1317dt9LCQoswg/BGrmAmkWVEszSrrg4RwmO46qIm2OEnSA==}
    engines: {node: '>=16'}

  chai@5.2.0:
    resolution: {integrity: sha512-mCuXncKXk5iCLhfhwTc0izo0gtEmpz5CtG2y8GiOINBlMVS6v8TMRc5TaLWKS6692m9+dVVfzgeVxR5UxWHTYw==}
    engines: {node: '>=12'}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chalk@5.4.1:
    resolution: {integrity: sha512-zgVZuo2WcZgfUEmsn6eO3kINexW8RAE4maiQ8QNs8CtpPCSyMiYsULR3HQYkm3w8FIA3SberyMJMSldGsW+U3w==}
    engines: {node: ^12.17.0 || ^14.13 || >=16.0.0}

  check-error@2.1.1:
    resolution: {integrity: sha512-OAlb+T7V4Op9OwdkjmguYRqncdlx5JiofwOAUkmTF+jNdHwzTaTs4sRAGpzLF3oOz5xAyDGrPgeIDFQmDOTiJw==}
    engines: {node: '>= 16'}

  chokidar@4.0.3:
    resolution: {integrity: sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==}
    engines: {node: '>= 14.16.0'}

  chownr@1.1.4:
    resolution: {integrity: sha512-jJ0bqzaylmJtVnNgzTeSOs8DPavpbYgEr/b0YL8/2GO3xJEhInFmhKMUnEJQjZumK7KXGFhUy89PrsJWlakBVg==}

  cli-boxes@3.0.0:
    resolution: {integrity: sha512-/lzGpEWL/8PfI0BmBOPRwp0c/wFNX1RdUML3jK/RcSBA9T8mZDdQpqYBKtCFTOfQbwPqWEOpjqW+Fnayc0969g==}
    engines: {node: '>=10'}

  cliui@8.0.1:
    resolution: {integrity: sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==}
    engines: {node: '>=12'}

  cluster-key-slot@1.1.2:
    resolution: {integrity: sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==}
    engines: {node: '>=0.10.0'}

  color-convert@1.9.3:
    resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.3:
    resolution: {integrity: sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  color-string@1.9.1:
    resolution: {integrity: sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==}

  color@3.2.1:
    resolution: {integrity: sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==}

  colorspace@1.1.4:
    resolution: {integrity: sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  commander@11.1.0:
    resolution: {integrity: sha512-yPVavfyCcRhmorC7rWlkHn15b4wDVgVmBA7kV4QVBsF7kv/9TKJAbAXVTxvTnwP8HHKjRCJDClKbciiYS7p0DQ==}
    engines: {node: '>=16'}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  confbox@0.1.8:
    resolution: {integrity: sha512-RMtmw0iFkeR4YV+fUOSucriAQNb9g8zFR52MWCtl+cCZOFRNL6zeB395vPzFhEjjn4fMxXudmELnl/KF/WrK6w==}

  consola@3.4.2:
    resolution: {integrity: sha512-5IKcdX0nnYavi6G7TtOhwkYzyjfJlatbjMjuLSfE2kYT5pMDOilZ4OvMhi637CcDICTmz3wARPoyhqyX1Y+XvA==}
    engines: {node: ^14.18.0 || >=16.10.0}

  content-disposition@1.0.0:
    resolution: {integrity: sha512-Au9nRL8VNUut/XSzbQA38+M78dzP4D+eqg3gfJHMIHHYa3bg067xj1KxMUWj+VULbiZMowKngFFbKczUrNJ1mg==}
    engines: {node: '>= 0.6'}

  content-type@1.0.5:
    resolution: {integrity: sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==}
    engines: {node: '>= 0.6'}

  cookie-signature@1.2.2:
    resolution: {integrity: sha512-D76uU73ulSXrD1UXF4KE2TMxVVwhsnCgfAyTg9k8P6KGZjlXKrOLe4dJQKI3Bxi5wjesZoFXJWElNWBjPZMbhg==}
    engines: {node: '>=6.6.0'}

  cookie@0.7.2:
    resolution: {integrity: sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==}
    engines: {node: '>= 0.6'}

  cors@2.8.5:
    resolution: {integrity: sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==}
    engines: {node: '>= 0.10'}

  create-require@1.1.1:
    resolution: {integrity: sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==}

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  dayjs@1.11.13:
    resolution: {integrity: sha512-oaMBel6gjolK862uaPQOVTA7q3TZhuSvuMQAAglQDOWYO9A91IrAOUJEyKVlqJlHE0vq5p5UXxzdPfMH/x6xNg==}

  debug@4.4.1:
    resolution: {integrity: sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  decompress-response@6.0.0:
    resolution: {integrity: sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==}
    engines: {node: '>=10'}

  deep-eql@5.0.2:
    resolution: {integrity: sha512-h5k/5U50IJJFpzfL6nO9jaaumfjO/f2NjK/oYB2Djzm4p9L+3T9qWpZqZ2hAbLPuuYq9wrU08WQyBTL5GbPk5Q==}
    engines: {node: '>=6'}

  deep-extend@0.6.0:
    resolution: {integrity: sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==}
    engines: {node: '>=4.0.0'}

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  define-data-property@1.1.4:
    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
    engines: {node: '>= 0.4'}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  denque@2.1.0:
    resolution: {integrity: sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==}
    engines: {node: '>=0.10'}

  depd@2.0.0:
    resolution: {integrity: sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==}
    engines: {node: '>= 0.8'}

  detect-libc@2.0.4:
    resolution: {integrity: sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==}
    engines: {node: '>=8'}

  diff@4.0.2:
    resolution: {integrity: sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==}
    engines: {node: '>=0.3.1'}

  dotenv@16.6.0:
    resolution: {integrity: sha512-Omf1L8paOy2VJhILjyhrhqwLIdstqm1BvcDPKg4NGAlkwEu9ODyrFbvk8UymUOMCT+HXo31jg1lArIrVAAhuGA==}
    engines: {node: '>=12'}

  dunder-proto@1.0.1:
    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
    engines: {node: '>= 0.4'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  ee-first@1.1.1:
    resolution: {integrity: sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==}

  emoji-regex@10.4.0:
    resolution: {integrity: sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  enabled@2.0.0:
    resolution: {integrity: sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ==}

  encodeurl@2.0.0:
    resolution: {integrity: sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==}
    engines: {node: '>= 0.8'}

  end-of-stream@1.4.5:
    resolution: {integrity: sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==}

  es-define-property@1.0.1:
    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-module-lexer@1.7.0:
    resolution: {integrity: sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==}

  es-object-atoms@1.1.1:
    resolution: {integrity: sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==}
    engines: {node: '>= 0.4'}

  es-set-tostringtag@2.1.0:
    resolution: {integrity: sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==}
    engines: {node: '>= 0.4'}

  esbuild@0.25.5:
    resolution: {integrity: sha512-P8OtKZRv/5J5hhz0cUAdu/cLuPIKXpQl1R9pZtvmHWQvrAUVd0UNIPT4IB4W3rNOqVO0rlqHmCIbSwxh/c9yUQ==}
    engines: {node: '>=18'}
    hasBin: true

  escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}

  escape-html@1.0.3:
    resolution: {integrity: sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-config-prettier@10.1.5:
    resolution: {integrity: sha512-zc1UmCpNltmVY34vuLRV61r1K27sWuX39E+uyUnY8xS2Bex88VV9cugG+UZbRSRGtGyFboj+D8JODyme1plMpw==}
    hasBin: true
    peerDependencies:
      eslint: '>=7.0.0'

  eslint-scope@8.4.0:
    resolution: {integrity: sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@4.2.1:
    resolution: {integrity: sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint@9.29.0:
    resolution: {integrity: sha512-GsGizj2Y1rCWDu6XoEekL3RLilp0voSePurjZIkxL3wlm5o5EC9VpgaP7lrCvjnkuLvzFBQWB3vWB3K5KQTveQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    hasBin: true
    peerDependencies:
      jiti: '*'
    peerDependenciesMeta:
      jiti:
        optional: true

  espree@10.4.0:
    resolution: {integrity: sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  estree-walker@3.0.3:
    resolution: {integrity: sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  etag@1.8.1:
    resolution: {integrity: sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==}
    engines: {node: '>= 0.6'}

  event-target-shim@5.0.1:
    resolution: {integrity: sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==}
    engines: {node: '>=6'}

  eventsource-parser@3.0.2:
    resolution: {integrity: sha512-6RxOBZ/cYgd8usLwsEl+EC09Au/9BcmCKYF2/xbml6DNczf7nv0MQb+7BA2F+li6//I+28VNlQR37XfQtcAJuA==}
    engines: {node: '>=18.0.0'}

  eventsource@3.0.7:
    resolution: {integrity: sha512-CRT1WTyuQoD771GW56XEZFQ/ZoSfWid1alKGDYMmkt2yl8UXrVR4pspqWNEcqKvVIzg6PAltWjxcSSPrboA4iA==}
    engines: {node: '>=18.0.0'}

  expand-template@2.0.3:
    resolution: {integrity: sha512-XYfuKMvj4O35f/pOXLObndIRvyQ+/+6AhODh+OKWj9S9498pHHn/IMszH+gt0fBCRWMNfk1ZSp5x3AifmnI2vg==}
    engines: {node: '>=6'}

  expect-type@1.2.1:
    resolution: {integrity: sha512-/kP8CAwxzLVEeFrMm4kMmy4CCDlpipyA7MYLVrdJIkV0fYF0UaigQHRsxHiuY/GEea+bh4KSv3TIlgr+2UL6bw==}
    engines: {node: '>=12.0.0'}

  express-rate-limit@7.5.1:
    resolution: {integrity: sha512-7iN8iPMDzOMHPUYllBEsQdWVB6fPDMPqwjBaFrgr4Jgr/+okjvzAy+UHlYYL/Vs0OsOrMkwS6PJDkFlJwoxUnw==}
    engines: {node: '>= 16'}
    peerDependencies:
      express: '>= 4.11'

  express-validator@7.2.1:
    resolution: {integrity: sha512-CjNE6aakfpuwGaHQZ3m8ltCG2Qvivd7RHtVMS/6nVxOM7xVGqr4bhflsm4+N5FP5zI7Zxp+Hae+9RE+o8e3ZOQ==}
    engines: {node: '>= 8.0.0'}

  express@5.1.0:
    resolution: {integrity: sha512-DT9ck5YIRU+8GYzzU5kT3eHGA5iL+1Zd0EutOmTE9Dtk+Tvuzd23VBU+ec7HPNSTxXYO55gPV/hq4pSBJDjFpA==}
    engines: {node: '>= 18'}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-glob@3.3.3:
    resolution: {integrity: sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fastq@1.19.1:
    resolution: {integrity: sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==}

  fdir@6.4.6:
    resolution: {integrity: sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==}
    peerDependencies:
      picomatch: ^3 || ^4
    peerDependenciesMeta:
      picomatch:
        optional: true

  fecha@4.2.3:
    resolution: {integrity: sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw==}

  file-entry-cache@8.0.0:
    resolution: {integrity: sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==}
    engines: {node: '>=16.0.0'}

  file-uri-to-path@1.0.0:
    resolution: {integrity: sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  finalhandler@2.1.0:
    resolution: {integrity: sha512-/t88Ty3d5JWQbWYgaOGCCYfXRwV1+be02WqYYlL6h0lEiUAMPM8o8qKGO01YIkOHzka2up08wvgYD0mDiI+q3Q==}
    engines: {node: '>= 0.8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  fix-dts-default-cjs-exports@1.0.1:
    resolution: {integrity: sha512-pVIECanWFC61Hzl2+oOCtoJ3F17kglZC/6N94eRWycFgBH35hHx0Li604ZIzhseh97mf2p0cv7vVrOZGoqhlEg==}

  flat-cache@4.0.1:
    resolution: {integrity: sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==}
    engines: {node: '>=16'}

  flatted@3.3.3:
    resolution: {integrity: sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==}

  fn.name@1.1.0:
    resolution: {integrity: sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw==}

  follow-redirects@1.15.9:
    resolution: {integrity: sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  for-each@0.3.5:
    resolution: {integrity: sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==}
    engines: {node: '>= 0.4'}

  foreground-child@3.3.1:
    resolution: {integrity: sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==}
    engines: {node: '>=14'}

  form-data-encoder@1.7.2:
    resolution: {integrity: sha512-qfqtYan3rxrnCk1VYaA4H+Ms9xdpPqvLZa6xmMgFvhO32x7/3J/ExcTd6qpxM0vH2GdMI+poehyBZvqfMTto8A==}

  form-data@4.0.3:
    resolution: {integrity: sha512-qsITQPfmvMOSAdeyZ+12I1c+CKSstAFAwu+97zrnWAbIr5u8wfsExUzCesVLC8NgHuRUqNN4Zy6UPWUTRGslcA==}
    engines: {node: '>= 6'}

  formdata-node@4.4.1:
    resolution: {integrity: sha512-0iirZp3uVDjVGt9p49aTaqjk84TrglENEDuqfdlZQ1roC9CWlPk6Avf8EEnZNcAqPonwkG35x4n3ww/1THYAeQ==}
    engines: {node: '>= 12.20'}

  forwarded@0.2.0:
    resolution: {integrity: sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==}
    engines: {node: '>= 0.6'}

  fresh@2.0.0:
    resolution: {integrity: sha512-Rx/WycZ60HOaqLKAi6cHRKKI7zxWbJ31MhntmtwMoaTeF7XFH9hhBp8vITaMidfljRQ6eYWCKkaTK+ykVJHP2A==}
    engines: {node: '>= 0.8'}

  fs-constants@1.0.0:
    resolution: {integrity: sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  generic-pool@3.9.0:
    resolution: {integrity: sha512-hymDOu5B53XvN4QT9dBmZxPX4CWhBPPLguTZ9MMFeFa/Kg0xWVfylOVNlJji/E7yTZWFd/q9GO5TxDLq156D7g==}
    engines: {node: '>= 4'}

  get-caller-file@2.0.5:
    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}
    engines: {node: 6.* || 8.* || >= 10.*}

  get-east-asian-width@1.3.0:
    resolution: {integrity: sha512-vpeMIQKxczTD/0s2CdEWHcb0eeJe6TFjxb+J5xgX7hScxqrGuyjmv4c1D4A/gelKfyox0gJJwIHF+fLjeaM8kQ==}
    engines: {node: '>=18'}

  get-intrinsic@1.3.0:
    resolution: {integrity: sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==}
    engines: {node: '>= 0.4'}

  get-proto@1.0.1:
    resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}
    engines: {node: '>= 0.4'}

  get-tsconfig@4.10.1:
    resolution: {integrity: sha512-auHyJ4AgMz7vgS8Hp3N6HXSmlMdUyhSUrfBF16w153rxtLIEOE+HGqaBppczZvnHLqQJfiHotCYpNhl0lUROFQ==}

  github-from-package@0.0.0:
    resolution: {integrity: sha512-SyHy3T1v2NUXn29OsWdxmK6RwHD+vkj3v8en8AOBZ1wBQ/hCAQ5bAQTD02kW4W9tUp/3Qh6J8r9EvntiyCmOOw==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  globals@14.0.0:
    resolution: {integrity: sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==}
    engines: {node: '>=18'}

  gopd@1.2.0:
    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
    engines: {node: '>= 0.4'}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  has-property-descriptors@1.0.2:
    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}

  has-symbols@1.1.0:
    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
    engines: {node: '>= 0.4'}

  has-tostringtag@1.0.2:
    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
    engines: {node: '>= 0.4'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  helmet@8.1.0:
    resolution: {integrity: sha512-jOiHyAZsmnr8LqoPGmCjYAaiuWwjAPLgY8ZX2XrmHawt99/u1y6RgrZMTeoPfpUbV96HOalYgz1qzkRbw54Pmg==}
    engines: {node: '>=18.0.0'}

  html-escaper@2.0.2:
    resolution: {integrity: sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==}

  http-errors@2.0.0:
    resolution: {integrity: sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==}
    engines: {node: '>= 0.8'}

  humanize-ms@1.2.1:
    resolution: {integrity: sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==}

  husky@9.1.7:
    resolution: {integrity: sha512-5gs5ytaNjBrh5Ow3zrvdUUY+0VxIuWVL4i9irt6friV+BqdCfmV11CQTWMiBYWHbXhco+J1kHfTOUkePhCDvMA==}
    engines: {node: '>=18'}
    hasBin: true

  iconv-lite@0.6.3:
    resolution: {integrity: sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==}
    engines: {node: '>=0.10.0'}

  ieee754@1.2.1:
    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}

  ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}

  ignore@7.0.5:
    resolution: {integrity: sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==}
    engines: {node: '>= 4'}

  import-fresh@3.3.1:
    resolution: {integrity: sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==}
    engines: {node: '>=6'}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  ini@1.3.8:
    resolution: {integrity: sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==}

  ioredis@5.6.1:
    resolution: {integrity: sha512-UxC0Yv1Y4WRJiGQxQkP0hfdL0/5/6YvdfOOClRgJ0qppSarkhneSa6UvkMkms0AkdGimSH3Ikqm+6mkMmX7vGA==}
    engines: {node: '>=12.22.0'}

  ipaddr.js@1.9.1:
    resolution: {integrity: sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==}
    engines: {node: '>= 0.10'}

  is-arguments@1.2.0:
    resolution: {integrity: sha512-7bVbi0huj/wrIAOzb8U1aszg9kdi3KN/CyU19CTI7tAoZYEZoL9yCDXpbXN+uPsuWnP02cyug1gleqq+TU+YCA==}
    engines: {node: '>= 0.4'}

  is-arrayish@0.3.2:
    resolution: {integrity: sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==}

  is-callable@1.2.7:
    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
    engines: {node: '>= 0.4'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-generator-function@1.1.0:
    resolution: {integrity: sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==}
    engines: {node: '>= 0.4'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-promise@4.0.0:
    resolution: {integrity: sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==}

  is-regex@1.2.1:
    resolution: {integrity: sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==}
    engines: {node: '>= 0.4'}

  is-stream@2.0.1:
    resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
    engines: {node: '>=8'}

  is-typed-array@1.1.15:
    resolution: {integrity: sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==}
    engines: {node: '>= 0.4'}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  istanbul-lib-coverage@3.2.2:
    resolution: {integrity: sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==}
    engines: {node: '>=8'}

  istanbul-lib-report@3.0.1:
    resolution: {integrity: sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==}
    engines: {node: '>=10'}

  istanbul-lib-source-maps@5.0.6:
    resolution: {integrity: sha512-yg2d+Em4KizZC5niWhQaIomgf5WlL4vOOjZ5xGCmF8SnPE/mDWWXgvRExdcpCgh9lLRRa1/fSYp2ymmbJ1pI+A==}
    engines: {node: '>=10'}

  istanbul-reports@3.1.7:
    resolution: {integrity: sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==}
    engines: {node: '>=8'}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  joycon@3.1.1:
    resolution: {integrity: sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw==}
    engines: {node: '>=10'}

  js-tokens@9.0.1:
    resolution: {integrity: sha512-mxa9E9ITFOt0ban3j6L5MpjwegGz6lBQmM1IJkWeBZGcMxto50+eWdjC/52xDbS2vy0k7vIMK0Fe2wfL9OQSpQ==}

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-schema@0.4.0:
    resolution: {integrity: sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  kuler@2.0.0:
    resolution: {integrity: sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A==}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lilconfig@3.1.3:
    resolution: {integrity: sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  load-tsconfig@0.2.5:
    resolution: {integrity: sha512-IXO6OCs9yg8tMKzfPZ1YmheJbZCiEsnBdcB03l0OcfK9prKnJb96siuHCr5Fl37/yo9DnKU+TLpxzTUspw9shg==}
    engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.camelcase@4.3.0:
    resolution: {integrity: sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==}

  lodash.defaults@4.2.0:
    resolution: {integrity: sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ==}

  lodash.isarguments@3.1.0:
    resolution: {integrity: sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg==}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lodash.sortby@4.7.0:
    resolution: {integrity: sha512-HDWXG8isMntAyRF5vZ7xKuEvOhT4AhlRt/3czTSjvGUxjYCBVRQY48ViDHyfYz9VIoBkW4TMGQNapx+l3RUwdA==}

  lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}

  logform@2.7.0:
    resolution: {integrity: sha512-TFYA4jnP7PVbmlBIfhlSe+WKxs9dklXMTEGcBCIvLhE/Tn3H6Gk1norupVW7m5Cnd4bLcr08AytbyV/xj7f/kQ==}
    engines: {node: '>= 12.0.0'}

  long@5.3.2:
    resolution: {integrity: sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==}

  loupe@3.1.4:
    resolution: {integrity: sha512-wJzkKwJrheKtknCOKNEtDK4iqg/MxmZheEMtSTYvnzRdEYaZzmgH976nenp8WdJRdx5Vc1X/9MO0Oszl6ezeXg==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@9.1.2:
    resolution: {integrity: sha512-ERJq3FOzJTxBbFjZ7iDs+NiK4VI9Wz+RdrrAB8dio1oV+YvdPzUEE4QNiT2VD51DkIbCYRUUzCRkssXCHqSnKQ==}
    engines: {node: 14 || >=16.14}

  magic-string@0.30.17:
    resolution: {integrity: sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==}

  magicast@0.3.5:
    resolution: {integrity: sha512-L0WhttDl+2BOsybvEOLK7fW3UA0OQ0IQ2d6Zl2x/a6vVRs3bAY0ECOSHHeL5jD+SbOpOCUEi0y1DgHEn9Qn1AQ==}

  make-dir@4.0.0:
    resolution: {integrity: sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==}
    engines: {node: '>=10'}

  make-error@1.3.6:
    resolution: {integrity: sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==}

  math-intrinsics@1.1.0:
    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
    engines: {node: '>= 0.4'}

  media-typer@1.1.0:
    resolution: {integrity: sha512-aisnrDP4GNe06UcKFnV5bfMNPBUw4jsLGaWwWfnH3v02GnBuXX2MCVn5RbrWo0j3pczUilYblq7fQ7Nw2t5XKw==}
    engines: {node: '>= 0.8'}

  merge-descriptors@2.0.0:
    resolution: {integrity: sha512-Snk314V5ayFLhp3fkUREub6WtjBfPdCPY1Ln8/8munuLuiYhsABgBVWsozAG+MWMbVEvcdcpbi9R7ww22l9Q3g==}
    engines: {node: '>=18'}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-db@1.54.0:
    resolution: {integrity: sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  mime-types@3.0.1:
    resolution: {integrity: sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==}
    engines: {node: '>= 0.6'}

  mimic-response@3.1.0:
    resolution: {integrity: sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==}
    engines: {node: '>=10'}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimist@1.2.8:
    resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  mkdirp-classic@0.5.3:
    resolution: {integrity: sha512-gKLcREMhtuZRwRAfqP3RFW+TK4JqApVBtOIftVgjuABpAtpxhPGaDcfvbhNvD0B8iD1oUr/txX35NjcaY6Ns/A==}

  mlly@1.7.4:
    resolution: {integrity: sha512-qmdSIPC4bDJXgZTCR7XosJiNKySV7O215tsPtDN9iEO/7q/76b/ijtgRu/+epFXSJhijtTCCGp3DWS549P3xKw==}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  nanoid@3.3.11:
    resolution: {integrity: sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  napi-build-utils@2.0.0:
    resolution: {integrity: sha512-GEbrYkbfF7MoNaoh2iGG84Mnf/WZfB0GdGEsM8wz7Expx/LlWf5U8t9nvJKXSp3qr5IsEbK04cBGhol/KwOsWA==}

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  negotiator@1.0.0:
    resolution: {integrity: sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==}
    engines: {node: '>= 0.6'}

  neo4j-driver-bolt-connection@5.28.1:
    resolution: {integrity: sha512-nY8GBhjOW7J0rDtpiyJn6kFdk2OiNVZZhZrO8//mwNXnf5VQJ6HqZQTDthH/9pEaX0Jvbastz1xU7ZL8xzqY0w==}

  neo4j-driver-core@5.28.1:
    resolution: {integrity: sha512-14vN8TlxC0JvJYfjWic5PwjsZ38loQLOKFTXwk4fWLTbCk6VhrhubB2Jsy9Rz+gM6PtTor4+6ClBEFDp1q/c8g==}

  neo4j-driver@5.28.1:
    resolution: {integrity: sha512-jbyBwyM0a3RLGcP43q3hIxPUPxA+1bE04RovOKdNAS42EtBMVCKcPSeOvWiHxgXp1ZFd0a8XqK+7LtguInOLUg==}

  node-abi@3.75.0:
    resolution: {integrity: sha512-OhYaY5sDsIka7H7AtijtI9jwGYLyl29eQn/W623DiN/MIv5sUqc4g7BIDThX+gb7di9f6xK02nkp8sdfFWZLTg==}
    engines: {node: '>=10'}

  node-domexception@1.0.0:
    resolution: {integrity: sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==}
    engines: {node: '>=10.5.0'}
    deprecated: Use your platform's native DOMException instead

  node-fetch@2.7.0:
    resolution: {integrity: sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-inspect@1.13.4:
    resolution: {integrity: sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==}
    engines: {node: '>= 0.4'}

  on-finished@2.4.1:
    resolution: {integrity: sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==}
    engines: {node: '>= 0.8'}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  one-time@1.0.0:
    resolution: {integrity: sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==}

  openai@4.104.0:
    resolution: {integrity: sha512-p99EFNsA/yX6UhVO93f5kJsDRLAg+CTA2RBqdHK4RtK8u5IJw32Hyb2dTGKbnnFmnuoBv5r7Z2CURI9sGZpSuA==}
    hasBin: true
    peerDependencies:
      ws: ^8.18.0
      zod: ^3.23.8
    peerDependenciesMeta:
      ws:
        optional: true
      zod:
        optional: true

  optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  package-json-from-dist@1.0.1:
    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parseurl@1.3.3:
    resolution: {integrity: sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==}
    engines: {node: '>= 0.8'}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  path-to-regexp@8.2.0:
    resolution: {integrity: sha512-TdrF7fW9Rphjq4RjrW0Kp2AW0Ahwu9sRGTkS6bvDi0SCwZlEZYmcfDbEsTz8RVk0EHIS/Vd1bv3JhG+1xZuAyQ==}
    engines: {node: '>=16'}

  pathe@2.0.3:
    resolution: {integrity: sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==}

  pathval@2.0.0:
    resolution: {integrity: sha512-vE7JKRyES09KiunauX7nd2Q9/L7lhok4smP9RZTDeD4MVs72Dp2qNFVz39Nz5a0FVEW0BJR6C0DYrq6unoziZA==}
    engines: {node: '>= 14.16'}

  pg-cloudflare@1.2.7:
    resolution: {integrity: sha512-YgCtzMH0ptvZJslLM1ffsY4EuGaU0cx4XSdXLRFae8bPP4dS5xL1tNB3k2o/N64cHJpwU7dxKli/nZ2lUa5fLg==}

  pg-connection-string@2.9.1:
    resolution: {integrity: sha512-nkc6NpDcvPVpZXxrreI/FOtX3XemeLl8E0qFr6F2Lrm/I8WOnaWNhIPK2Z7OHpw7gh5XJThi6j6ppgNoaT1w4w==}

  pg-int8@1.0.1:
    resolution: {integrity: sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==}
    engines: {node: '>=4.0.0'}

  pg-pool@3.10.1:
    resolution: {integrity: sha512-Tu8jMlcX+9d8+QVzKIvM/uJtp07PKr82IUOYEphaWcoBhIYkoHpLXN3qO59nAI11ripznDsEzEv8nUxBVWajGg==}
    peerDependencies:
      pg: '>=8.0'

  pg-protocol@1.10.3:
    resolution: {integrity: sha512-6DIBgBQaTKDJyxnXaLiLR8wBpQQcGWuAESkRBX/t6OwA8YsqP+iVSiond2EDy6Y/dsGk8rh/jtax3js5NeV7JQ==}

  pg-types@2.2.0:
    resolution: {integrity: sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==}
    engines: {node: '>=4'}

  pg@8.16.3:
    resolution: {integrity: sha512-enxc1h0jA/aq5oSDMvqyW3q89ra6XIIDZgCX9vkMrnz5DFTw/Ny3Li2lFQ+pt3L6MCgm/5o2o8HW9hiJji+xvw==}
    engines: {node: '>= 16.0.0'}
    peerDependencies:
      pg-native: '>=3.0.1'
    peerDependenciesMeta:
      pg-native:
        optional: true

  pgpass@1.0.5:
    resolution: {integrity: sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==}

  picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  picomatch@4.0.2:
    resolution: {integrity: sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==}
    engines: {node: '>=12'}

  pirates@4.0.7:
    resolution: {integrity: sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==}
    engines: {node: '>= 6'}

  pkce-challenge@5.0.0:
    resolution: {integrity: sha512-ueGLflrrnvwB3xuo/uGob5pd5FN7l0MsLf0Z87o/UQmRtwjvfylfc9MurIxRAWywCYTgrvpXBcqjV4OfCYGCIQ==}
    engines: {node: '>=16.20.0'}

  pkg-types@1.3.1:
    resolution: {integrity: sha512-/Jm5M4RvtBFVkKWRu2BLUTNP8/M2a+UwuAX+ae4770q1qVGtfjG+WTCupoZixokjmHiry8uI+dlY8KXYV5HVVQ==}

  possible-typed-array-names@1.1.0:
    resolution: {integrity: sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==}
    engines: {node: '>= 0.4'}

  postcss-load-config@6.0.1:
    resolution: {integrity: sha512-oPtTM4oerL+UXmx+93ytZVN82RrlY/wPUV8IeDxFrzIjXOLF1pN+EmKPLbubvKHT2HC20xXsCAH2Z+CKV6Oz/g==}
    engines: {node: '>= 18'}
    peerDependencies:
      jiti: '>=1.21.0'
      postcss: '>=8.0.9'
      tsx: ^4.8.1
      yaml: ^2.4.2
    peerDependenciesMeta:
      jiti:
        optional: true
      postcss:
        optional: true
      tsx:
        optional: true
      yaml:
        optional: true

  postcss@8.5.6:
    resolution: {integrity: sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==}
    engines: {node: ^10 || ^12 || >=14}

  postgres-array@2.0.0:
    resolution: {integrity: sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==}
    engines: {node: '>=4'}

  postgres-bytea@1.0.0:
    resolution: {integrity: sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==}
    engines: {node: '>=0.10.0'}

  postgres-date@1.0.7:
    resolution: {integrity: sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==}
    engines: {node: '>=0.10.0'}

  postgres-interval@1.2.0:
    resolution: {integrity: sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==}
    engines: {node: '>=0.10.0'}

  prebuild-install@7.1.3:
    resolution: {integrity: sha512-8Mf2cbV7x1cXPUILADGI3wuhfqWvtiLA1iclTDbFRZkgRQS0NqsPZphna9V+HyTEadheuPmjaJMsbzKQFOzLug==}
    engines: {node: '>=10'}
    hasBin: true

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  prettier@3.6.0:
    resolution: {integrity: sha512-ujSB9uXHJKzM/2GBuE0hBOUgC77CN3Bnpqa+g80bkv3T3A93wL/xlzDATHhnhkzifz/UE2SNOvmbTz5hSkDlHw==}
    engines: {node: '>=14'}
    hasBin: true

  protobufjs@7.5.3:
    resolution: {integrity: sha512-sildjKwVqOI2kmFDiXQ6aEB0fjYTafpEvIBs8tOR8qI4spuL9OPROLVu2qZqi/xgCfsHIwVqlaF8JBjWFHnKbw==}
    engines: {node: '>=12.0.0'}

  proxy-addr@2.0.7:
    resolution: {integrity: sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==}
    engines: {node: '>= 0.10'}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  pump@3.0.3:
    resolution: {integrity: sha512-todwxLMY7/heScKmntwQG8CXVkWUOdYxIvY2s0VWAAMh/nd8SoYiRaKjlr7+iCs984f2P8zvrfWcDDYVb73NfA==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  qs@6.14.0:
    resolution: {integrity: sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==}
    engines: {node: '>=0.6'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  range-parser@1.2.1:
    resolution: {integrity: sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==}
    engines: {node: '>= 0.6'}

  raw-body@3.0.0:
    resolution: {integrity: sha512-RmkhL8CAyCRPXCE28MMH0z2PNWQBNk2Q09ZdxM9IOOXwxwZbN+qbWaatPkdkWIKL2ZVDImrN/pK5HTRz2PcS4g==}
    engines: {node: '>= 0.8'}

  rc@1.2.8:
    resolution: {integrity: sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==}
    hasBin: true

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  readdirp@4.1.2:
    resolution: {integrity: sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==}
    engines: {node: '>= 14.18.0'}

  recheck-jar@4.5.0:
    resolution: {integrity: sha512-Ad7oCQmY8cQLzd3QVNXjzZ+S6MbImGhR4AaW2yiGzteOfMV45522rt6nSzFyt8p3mCEaMcm/4MoZrMSxUcCbrA==}

  recheck-linux-x64@4.5.0:
    resolution: {integrity: sha512-52kXsR/v+IbGIKYYFZfSZcgse/Ci9IA2HnuzrtvRRcfODkcUGe4n72ESQ8nOPwrdHFg9i4j9/YyPh1HWWgpJ6A==}
    cpu: [x64]
    os: [linux]

  recheck-macos-arm64@4.5.0:
    resolution: {integrity: sha512-qIyK3dRuLkORQvv0b59fZZRXweSmjjWaoA4K8Kgifz0anMBH4pqsDV6plBlgjcRmW9yC12wErIRzifREaKnk2w==}
    cpu: [arm64]
    os: [darwin]

  recheck-macos-x64@4.5.0:
    resolution: {integrity: sha512-1wp/eiLxcjC/Ex4wurlrS/LGzt8IiF4TiK5sEjldu4HVAKdNCnnmsS9a5vFpfcikDz4ZuZlLlTi1VbQTxHlwZg==}
    cpu: [x64]
    os: [darwin]

  recheck-windows-x64@4.5.0:
    resolution: {integrity: sha512-ekBKwAp0oKkMULn5zgmHEYLwSJfkfb95AbTtbDkQazNkqYw9PRD/mVyFUR6Ff2IeRyZI0gxy+N2AKBISWydhug==}
    cpu: [x64]
    os: [win32]

  recheck@4.5.0:
    resolution: {integrity: sha512-kPnbOV6Zfx9a25AZ++28fI1q78L/UVRQmmuazwVRPfiiqpMs+WbOU69Shx820XgfKWfak0JH75PUvZMFtRGSsw==}
    engines: {node: '>=20'}

  redis-errors@1.2.0:
    resolution: {integrity: sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==}
    engines: {node: '>=4'}

  redis-parser@3.0.0:
    resolution: {integrity: sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==}
    engines: {node: '>=4'}

  require-directory@2.1.1:
    resolution: {integrity: sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==}
    engines: {node: '>=0.10.0'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-from@5.0.0:
    resolution: {integrity: sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==}
    engines: {node: '>=8'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  reusify@1.1.0:
    resolution: {integrity: sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rollup@4.44.0:
    resolution: {integrity: sha512-qHcdEzLCiktQIfwBq420pn2dP+30uzqYxv9ETm91wdt2R9AFcWfjNAmje4NWlnCIQ5RMTzVf0ZyisOKqHR6RwA==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true

  router@2.2.0:
    resolution: {integrity: sha512-nLTrUKm2UyiL7rlhapu/Zl45FwNgkZGaCpZbIHajDYgwlJCOzLSk+cIPAnsEqV955GjILJnKbdQC1nVPz+gAYQ==}
    engines: {node: '>= 18'}

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  rxjs@7.8.2:
    resolution: {integrity: sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safe-regex-test@1.1.0:
    resolution: {integrity: sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==}
    engines: {node: '>= 0.4'}

  safe-stable-stringify@2.5.0:
    resolution: {integrity: sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==}
    engines: {node: '>=10'}

  safer-buffer@2.1.2:
    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}

  secure-json-parse@2.7.0:
    resolution: {integrity: sha512-6aU+Rwsezw7VR8/nyvKTx8QpWH9FrcYiXXlqC4z5d5XQBDRqtbfsRjnwGyqbi3gddNtWHuEk9OANUotL26qKUw==}

  semver@7.7.2:
    resolution: {integrity: sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==}
    engines: {node: '>=10'}
    hasBin: true

  send@1.2.0:
    resolution: {integrity: sha512-uaW0WwXKpL9blXE2o0bRhoL2EGXIrZxQ2ZQ4mgcfoBxdFmQold+qWsD2jLrfZ0trjKL6vOw0j//eAwcALFjKSw==}
    engines: {node: '>= 18'}

  serve-static@2.2.0:
    resolution: {integrity: sha512-61g9pCh0Vnh7IutZjtLGGpTA355+OPn2TyDv/6ivP2h/AdAVX9azsoxmg2/M6nZeQZNYBEwIcsne1mJd9oQItQ==}
    engines: {node: '>= 18'}

  set-function-length@1.2.2:
    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
    engines: {node: '>= 0.4'}

  setprototypeof@1.2.0:
    resolution: {integrity: sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  side-channel-list@1.0.0:
    resolution: {integrity: sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==}
    engines: {node: '>= 0.4'}

  side-channel-map@1.0.1:
    resolution: {integrity: sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==}
    engines: {node: '>= 0.4'}

  side-channel-weakmap@1.0.2:
    resolution: {integrity: sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==}
    engines: {node: '>= 0.4'}

  side-channel@1.1.0:
    resolution: {integrity: sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==}
    engines: {node: '>= 0.4'}

  siginfo@2.0.0:
    resolution: {integrity: sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  simple-concat@1.0.1:
    resolution: {integrity: sha512-cSFtAPtRhljv69IK0hTVZQ+OfE9nePi/rtJmw5UjHeVyVroEqJXP1sFztKUy1qU+xvz3u/sfYJLa947b7nAN2Q==}

  simple-get@4.0.1:
    resolution: {integrity: sha512-brv7p5WgH0jmQJr1ZDDfKDOSeWWg+OVypG99A/5vYGPqJ6pxiaHLy8nxtFjBA7oMa01ebA9gfh1uMCFqOuXxvA==}

  simple-swizzle@0.2.2:
    resolution: {integrity: sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==}

  source-map-js@1.2.1:
    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
    engines: {node: '>=0.10.0'}

  source-map@0.8.0-beta.0:
    resolution: {integrity: sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==}
    engines: {node: '>= 8'}

  split2@4.2.0:
    resolution: {integrity: sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==}
    engines: {node: '>= 10.x'}

  stack-trace@0.0.10:
    resolution: {integrity: sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==}

  stackback@0.0.2:
    resolution: {integrity: sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==}

  standard-as-callback@2.1.0:
    resolution: {integrity: sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A==}

  statuses@2.0.1:
    resolution: {integrity: sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==}
    engines: {node: '>= 0.8'}

  statuses@2.0.2:
    resolution: {integrity: sha512-DvEy55V3DB7uknRo+4iOGT5fP1slR8wQohVdknigZPMpMstaKJQWhwiYBACJE3Ul2pTnATihhBYnRhZQHGBiRw==}
    engines: {node: '>= 0.8'}

  std-env@3.9.0:
    resolution: {integrity: sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  string-width@7.2.0:
    resolution: {integrity: sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==}
    engines: {node: '>=18'}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-json-comments@2.0.1:
    resolution: {integrity: sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==}
    engines: {node: '>=0.10.0'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  strip-literal@3.0.0:
    resolution: {integrity: sha512-TcccoMhJOM3OebGhSBEmp3UZ2SfDMZUEBdRA/9ynfLi8yYajyWX3JiXArcJt4Umh4vISpspkQIY8ZZoCqjbviA==}

  sucrase@3.35.0:
    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  synckit@0.9.2:
    resolution: {integrity: sha512-vrozgXDQwYO72vHjUb/HnFbQx1exDjoKzqx23aXEg2a9VIg2TSFZ8FmeZpTjUCFMYw7mpX4BE2SFu8wI7asYsw==}
    engines: {node: ^14.18.0 || >=16.0.0}

  tar-fs@2.1.3:
    resolution: {integrity: sha512-090nwYJDmlhwFwEW3QQl+vaNnxsO2yVsd45eTKRBzSzu+hlb1w2K9inVq5b0ngXuLVqQ4ApvsUHHnu/zQNkWAg==}

  tar-stream@2.2.0:
    resolution: {integrity: sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==}
    engines: {node: '>=6'}

  test-exclude@7.0.1:
    resolution: {integrity: sha512-pFYqmTw68LXVjeWJMST4+borgQP2AyMNbg1BpZh9LbyhUeNkeaPF9gzfPGUAnSMV3qPYdWUwDIjjCLiSDOl7vg==}
    engines: {node: '>=18'}

  text-hex@1.0.0:
    resolution: {integrity: sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg==}

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  tinybench@2.9.0:
    resolution: {integrity: sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==}

  tinyexec@0.3.2:
    resolution: {integrity: sha512-KQQR9yN7R5+OSwaK0XQoj22pwHoTlgYqmUscPYoknOoWCWfj/5/ABTMRi69FrKU5ffPVh5QcFikpWJI/P1ocHA==}

  tinyglobby@0.2.14:
    resolution: {integrity: sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==}
    engines: {node: '>=12.0.0'}

  tinypool@1.1.1:
    resolution: {integrity: sha512-Zba82s87IFq9A9XmjiX5uZA/ARWDrB03OHlq+Vw1fSdt0I+4/Kutwy8BP4Y/y/aORMo61FQ0vIb5j44vSo5Pkg==}
    engines: {node: ^18.0.0 || >=20.0.0}

  tinyrainbow@2.0.0:
    resolution: {integrity: sha512-op4nsTR47R6p0vMUUoYl/a+ljLFVtlfaXkLQmqfLR1qHma1h/ysYk4hEXZ880bf2CYgTskvTa/e196Vd5dDQXw==}
    engines: {node: '>=14.0.0'}

  tinyspy@4.0.3:
    resolution: {integrity: sha512-t2T/WLB2WRgZ9EpE4jgPJ9w+i66UZfDc8wHh0xrwiRNN+UwH98GIJkTeZqX9rg0i0ptwzqW+uYeIF0T4F8LR7A==}
    engines: {node: '>=14.0.0'}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  toidentifier@1.0.1:
    resolution: {integrity: sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==}
    engines: {node: '>=0.6'}

  tr46@0.0.3:
    resolution: {integrity: sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==}

  tr46@1.0.1:
    resolution: {integrity: sha512-dTpowEjclQ7Kgx5SdBkqRzVhERQXov8/l9Ft9dVM9fmg0W0KQSVaXX9T4i6twCPNtYiZM53lpSSUAwJbFPOHxA==}

  tree-kill@1.2.2:
    resolution: {integrity: sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==}
    hasBin: true

  triple-beam@1.4.1:
    resolution: {integrity: sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg==}
    engines: {node: '>= 14.0.0'}

  ts-api-utils@2.1.0:
    resolution: {integrity: sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==}
    engines: {node: '>=18.12'}
    peerDependencies:
      typescript: '>=4.8.4'

  ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}

  ts-node@10.9.2:
    resolution: {integrity: sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==}
    hasBin: true
    peerDependencies:
      '@swc/core': '>=1.2.50'
      '@swc/wasm': '>=1.2.50'
      '@types/node': '*'
      typescript: '>=2.7'
    peerDependenciesMeta:
      '@swc/core':
        optional: true
      '@swc/wasm':
        optional: true

  tslib@2.8.1:
    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}

  tsup@8.5.0:
    resolution: {integrity: sha512-VmBp77lWNQq6PfuMqCHD3xWl22vEoWsKajkF8t+yMBawlUS8JzEI+vOVMeuNZIuMML8qXRizFKi9oD5glKQVcQ==}
    engines: {node: '>=18'}
    hasBin: true
    peerDependencies:
      '@microsoft/api-extractor': ^7.36.0
      '@swc/core': ^1
      postcss: ^8.4.12
      typescript: '>=4.5.0'
    peerDependenciesMeta:
      '@microsoft/api-extractor':
        optional: true
      '@swc/core':
        optional: true
      postcss:
        optional: true
      typescript:
        optional: true

  tsx@4.20.3:
    resolution: {integrity: sha512-qjbnuR9Tr+FJOMBqJCW5ehvIo/buZq7vH7qD7JziU98h6l3qGy0a/yPFjwO+y0/T7GFpNgNAvEcPPVfyT8rrPQ==}
    engines: {node: '>=18.0.0'}
    hasBin: true

  tunnel-agent@0.6.0:
    resolution: {integrity: sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==}

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-fest@4.41.0:
    resolution: {integrity: sha512-TeTSQ6H5YHvpqVwBRcnLDCBnDOHWYu7IvGbHT6N8AOymcr9PJGjc1GTtiWZTYg0NCgYwvnYWEkVChQAr9bjfwA==}
    engines: {node: '>=16'}

  type-is@2.0.1:
    resolution: {integrity: sha512-OZs6gsjF4vMp32qrCbiVSkrFmXtG/AZhY3t0iAMrMBiAZyV9oALtXO8hsrHbMXF9x6L3grlFuwW2oAz7cav+Gw==}
    engines: {node: '>= 0.6'}

  typescript@5.8.3:
    resolution: {integrity: sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==}
    engines: {node: '>=14.17'}
    hasBin: true

  ufo@1.6.1:
    resolution: {integrity: sha512-9a4/uxlTWJ4+a5i0ooc1rU7C7YOw3wT+UGqdeNNHWnOF9qcMBgLRS+4IYUqbczewFx4mLEig6gawh7X6mFlEkA==}

  undici-types@5.26.5:
    resolution: {integrity: sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==}

  undici-types@7.8.0:
    resolution: {integrity: sha512-9UJ2xGDvQ43tYyVMpuHlsgApydB8ZKfVYTsLDhXkFL/6gfkp+U8xTGdh8pMJv1SpZna0zxG1DwsKZsreLbXBxw==}

  undici@6.21.3:
    resolution: {integrity: sha512-gBLkYIlEnSp8pFbT64yFgGE6UIB9tAkhukC23PmMDCe5Nd+cRqKxSjw5y54MK2AZMgZfJWMaNE4nYUHgi1XEOw==}
    engines: {node: '>=18.17'}

  undici@7.11.0:
    resolution: {integrity: sha512-heTSIac3iLhsmZhUCjyS3JQEkZELateufzZuBaVM5RHXdSBMb1LPMQf5x+FH7qjsZYDP0ttAc3nnVpUB+wYbOg==}
    engines: {node: '>=20.18.1'}

  unpipe@1.0.0:
    resolution: {integrity: sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==}
    engines: {node: '>= 0.8'}

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  util@0.12.5:
    resolution: {integrity: sha512-kZf/K6hEIrWHI6XqOFUiiMa+79wE/D8Q+NCNAWclkyg3b4d2k7s0QGepNjiABc+aR3N1PAyHL7p6UcLY6LmrnA==}

  uuid@11.1.0:
    resolution: {integrity: sha512-0/A9rDy9P7cJ+8w1c9WD9V//9Wj15Ce2MPz8Ri6032usz+NfePxx5AcN3bN+r6ZL6jEo066/yNYB3tn4pQEx+A==}
    hasBin: true

  v8-compile-cache-lib@3.0.1:
    resolution: {integrity: sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==}

  validator@13.12.0:
    resolution: {integrity: sha512-c1Q0mCiPlgdTVVVIJIrBuxNicYE+t/7oKeI9MWLj3fh/uq2Pxh/3eeWbVZ4OcGW1TUf53At0njHw5SMdA3tmMg==}
    engines: {node: '>= 0.10'}

  vary@1.1.2:
    resolution: {integrity: sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==}
    engines: {node: '>= 0.8'}

  vite-node@3.2.4:
    resolution: {integrity: sha512-EbKSKh+bh1E1IFxeO0pg1n4dvoOTt0UDiXMd/qn++r98+jPO1xtJilvXldeuQ8giIB5IkpjCgMleHMNEsGH6pg==}
    engines: {node: ^18.0.0 || ^20.0.0 || >=22.0.0}
    hasBin: true

  vite@7.0.0:
    resolution: {integrity: sha512-ixXJB1YRgDIw2OszKQS9WxGHKwLdCsbQNkpJN171udl6szi/rIySHL6/Os3s2+oE4P/FLD4dxg4mD7Wust+u5g==}
    engines: {node: ^20.19.0 || >=22.12.0}
    hasBin: true
    peerDependencies:
      '@types/node': ^20.19.0 || >=22.12.0
      jiti: '>=1.21.0'
      less: ^4.0.0
      lightningcss: ^1.21.0
      sass: ^1.70.0
      sass-embedded: ^1.70.0
      stylus: '>=0.54.8'
      sugarss: ^5.0.0
      terser: ^5.16.0
      tsx: ^4.8.1
      yaml: ^2.4.2
    peerDependenciesMeta:
      '@types/node':
        optional: true
      jiti:
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      sass-embedded:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true
      tsx:
        optional: true
      yaml:
        optional: true

  vitest@3.2.4:
    resolution: {integrity: sha512-LUCP5ev3GURDysTWiP47wRRUpLKMOfPh+yKTx3kVIEiu5KOMeqzpnYNsKyOoVrULivR8tLcks4+lga33Whn90A==}
    engines: {node: ^18.0.0 || ^20.0.0 || >=22.0.0}
    hasBin: true
    peerDependencies:
      '@edge-runtime/vm': '*'
      '@types/debug': ^4.1.12
      '@types/node': ^18.0.0 || ^20.0.0 || >=22.0.0
      '@vitest/browser': 3.2.4
      '@vitest/ui': 3.2.4
      happy-dom: '*'
      jsdom: '*'
    peerDependenciesMeta:
      '@edge-runtime/vm':
        optional: true
      '@types/debug':
        optional: true
      '@types/node':
        optional: true
      '@vitest/browser':
        optional: true
      '@vitest/ui':
        optional: true
      happy-dom:
        optional: true
      jsdom:
        optional: true

  web-encoding@1.1.5:
    resolution: {integrity: sha512-HYLeVCdJ0+lBYV2FvNZmv3HJ2Nt0QYXqZojk3d9FJOLkwnuhzM9tmamh8d7HPM8QqjKH8DeHkFTx+CFlWpZZDA==}

  web-streams-polyfill@3.3.3:
    resolution: {integrity: sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==}
    engines: {node: '>= 8'}

  web-streams-polyfill@4.0.0-beta.3:
    resolution: {integrity: sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==}
    engines: {node: '>= 14'}

  webidl-conversions@3.0.1:
    resolution: {integrity: sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==}

  webidl-conversions@4.0.2:
    resolution: {integrity: sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==}

  whatwg-url@5.0.0:
    resolution: {integrity: sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==}

  whatwg-url@7.1.0:
    resolution: {integrity: sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==}

  which-typed-array@1.1.19:
    resolution: {integrity: sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==}
    engines: {node: '>= 0.4'}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  why-is-node-running@2.3.0:
    resolution: {integrity: sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==}
    engines: {node: '>=8'}
    hasBin: true

  widest-line@5.0.0:
    resolution: {integrity: sha512-c9bZp7b5YtRj2wOe6dlj32MK+Bx/M/d+9VB2SHM1OtsUHR0aV0tdP6DWh/iMt0kWi1t5g1Iudu6hQRNd1A4PVA==}
    engines: {node: '>=18'}

  winston-transport@4.9.0:
    resolution: {integrity: sha512-8drMJ4rkgaPo1Me4zD/3WLfI/zPdA9o2IipKODunnGDcuqbHwjsbB79ylv04LCGGzU0xQ6vTznOMpQGaLhhm6A==}
    engines: {node: '>= 12.0.0'}

  winston@3.17.0:
    resolution: {integrity: sha512-DLiFIXYC5fMPxaRg832S6F5mJYvePtmO5G9v9IgUFPhXm9/GkXarH/TUrBAVzhTCzAj9anE/+GjrgXp/54nOgw==}
    engines: {node: '>= 12.0.0'}

  word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrap-ansi@9.0.0:
    resolution: {integrity: sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==}
    engines: {node: '>=18'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  ws@8.18.3:
    resolution: {integrity: sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==}
    engines: {node: '>=10.0.0'}
    peerDependencies:
      bufferutil: ^4.0.1
      utf-8-validate: '>=5.0.2'
    peerDependenciesMeta:
      bufferutil:
        optional: true
      utf-8-validate:
        optional: true

  xtend@4.0.2:
    resolution: {integrity: sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==}
    engines: {node: '>=0.4'}

  y18n@5.0.8:
    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}
    engines: {node: '>=10'}

  yaml@2.8.0:
    resolution: {integrity: sha512-4lLa/EcQCB0cJkyts+FpIRx5G/llPxfP6VQU5KByHEhLxY3IJCH0f0Hy1MHI8sClTvsIb8qwRJ6R/ZdlDJ/leQ==}
    engines: {node: '>= 14.6'}
    hasBin: true

  yargs-parser@21.1.1:
    resolution: {integrity: sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==}
    engines: {node: '>=12'}

  yargs@17.7.2:
    resolution: {integrity: sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==}
    engines: {node: '>=12'}

  yn@3.1.1:
    resolution: {integrity: sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==}
    engines: {node: '>=6'}

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

  zod-to-json-schema@3.24.5:
    resolution: {integrity: sha512-/AuWwMP+YqiPbsJx5D6TfgRTc4kTLjsh5SOcd4bLsfUg2RcEXrFMJl1DGgdHy2aCfsIA/cr/1JM0xcB2GZji8g==}
    peerDependencies:
      zod: ^3.24.1

  zod@3.25.76:
    resolution: {integrity: sha512-gzUt/qt81nXsFGKIFcC3YnfEAx5NkunCfnDlvuBSSFS02bcXu4Lmea0AFIUwbLWxWPx3d9p8S5QoaujKcNQxcQ==}

snapshots:

  '@ai-sdk/openai@1.3.22(zod@3.25.76)':
    dependencies:
      '@ai-sdk/provider': 1.1.3
      '@ai-sdk/provider-utils': 2.2.8(zod@3.25.76)
      zod: 3.25.76

  '@ai-sdk/provider-utils@2.2.8(zod@3.25.76)':
    dependencies:
      '@ai-sdk/provider': 1.1.3
      nanoid: 3.3.11
      secure-json-parse: 2.7.0
      zod: 3.25.76

  '@ai-sdk/provider@1.1.3':
    dependencies:
      json-schema: 0.4.0

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25

  '@anthropic-ai/sdk@0.39.0':
    dependencies:
      '@types/node': 18.19.112
      '@types/node-fetch': 2.6.12
      abort-controller: 3.0.0
      agentkeepalive: 4.6.0
      form-data-encoder: 1.7.2
      formdata-node: 4.4.1
      node-fetch: 2.7.0
    transitivePeerDependencies:
      - encoding

  '@babel/helper-string-parser@7.27.1': {}

  '@babel/helper-validator-identifier@7.27.1': {}

  '@babel/parser@7.27.5':
    dependencies:
      '@babel/types': 7.27.6

  '@babel/types@7.27.6':
    dependencies:
      '@babel/helper-string-parser': 7.27.1
      '@babel/helper-validator-identifier': 7.27.1

  '@bcoe/v8-coverage@1.0.2': {}

  '@colors/colors@1.6.0': {}

  '@cspotcode/source-map-support@0.8.1':
    dependencies:
      '@jridgewell/trace-mapping': 0.3.9

  '@dabh/diagnostics@2.0.3':
    dependencies:
      colorspace: 1.1.4
      enabled: 2.0.0
      kuler: 2.0.0

  '@esbuild/aix-ppc64@0.25.5':
    optional: true

  '@esbuild/android-arm64@0.25.5':
    optional: true

  '@esbuild/android-arm@0.25.5':
    optional: true

  '@esbuild/android-x64@0.25.5':
    optional: true

  '@esbuild/darwin-arm64@0.25.5':
    optional: true

  '@esbuild/darwin-x64@0.25.5':
    optional: true

  '@esbuild/freebsd-arm64@0.25.5':
    optional: true

  '@esbuild/freebsd-x64@0.25.5':
    optional: true

  '@esbuild/linux-arm64@0.25.5':
    optional: true

  '@esbuild/linux-arm@0.25.5':
    optional: true

  '@esbuild/linux-ia32@0.25.5':
    optional: true

  '@esbuild/linux-loong64@0.25.5':
    optional: true

  '@esbuild/linux-mips64el@0.25.5':
    optional: true

  '@esbuild/linux-ppc64@0.25.5':
    optional: true

  '@esbuild/linux-riscv64@0.25.5':
    optional: true

  '@esbuild/linux-s390x@0.25.5':
    optional: true

  '@esbuild/linux-x64@0.25.5':
    optional: true

  '@esbuild/netbsd-arm64@0.25.5':
    optional: true

  '@esbuild/netbsd-x64@0.25.5':
    optional: true

  '@esbuild/openbsd-arm64@0.25.5':
    optional: true

  '@esbuild/openbsd-x64@0.25.5':
    optional: true

  '@esbuild/sunos-x64@0.25.5':
    optional: true

  '@esbuild/win32-arm64@0.25.5':
    optional: true

  '@esbuild/win32-ia32@0.25.5':
    optional: true

  '@esbuild/win32-x64@0.25.5':
    optional: true

  '@eslint-community/eslint-utils@4.7.0(eslint@9.29.0)':
    dependencies:
      eslint: 9.29.0
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.12.1': {}

  '@eslint/config-array@0.20.1':
    dependencies:
      '@eslint/object-schema': 2.1.6
      debug: 4.4.1
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@eslint/config-helpers@0.2.3': {}

  '@eslint/core@0.14.0':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/core@0.15.0':
    dependencies:
      '@types/json-schema': 7.0.15

  '@eslint/eslintrc@3.3.1':
    dependencies:
      ajv: 6.12.6
      debug: 4.4.1
      espree: 10.4.0
      globals: 14.0.0
      ignore: 5.3.2
      import-fresh: 3.3.1
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@9.29.0': {}

  '@eslint/object-schema@2.1.6': {}

  '@eslint/plugin-kit@0.3.2':
    dependencies:
      '@eslint/core': 0.15.0
      levn: 0.4.1

  '@grpc/grpc-js@1.7.3':
    dependencies:
      '@grpc/proto-loader': 0.7.15
      '@types/node': 24.0.3

  '@grpc/proto-loader@0.7.15':
    dependencies:
      lodash.camelcase: 4.3.0
      long: 5.3.2
      protobufjs: 7.5.3
      yargs: 17.7.2

  '@humanfs/core@0.19.1': {}

  '@humanfs/node@0.16.6':
    dependencies:
      '@humanfs/core': 0.19.1
      '@humanwhocodes/retry': 0.3.1

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/retry@0.3.1': {}

  '@humanwhocodes/retry@0.4.3': {}

  '@ioredis/commands@1.2.0': {}

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@istanbuljs/schema@0.1.3': {}

  '@jridgewell/gen-mapping@0.3.8':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@jridgewell/trace-mapping@0.3.9':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@modelcontextprotocol/sdk@1.15.1':
    dependencies:
      ajv: 6.12.6
      content-type: 1.0.5
      cors: 2.8.5
      cross-spawn: 7.0.6
      eventsource: 3.0.7
      eventsource-parser: 3.0.2
      express: 5.1.0
      express-rate-limit: 7.5.1(express@5.1.0)
      pkce-challenge: 5.0.0
      raw-body: 3.0.0
      zod: 3.25.76
      zod-to-json-schema: 3.24.5(zod@3.25.76)
    transitivePeerDependencies:
      - supports-color

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.19.1

  '@opentelemetry/api@1.9.0': {}

  '@petamoriken/float16@3.9.2': {}

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@pkgr/core@0.1.2': {}

  '@protobufjs/aspromise@1.1.2': {}

  '@protobufjs/base64@1.1.2': {}

  '@protobufjs/codegen@2.0.4': {}

  '@protobufjs/eventemitter@1.1.0': {}

  '@protobufjs/fetch@1.1.0':
    dependencies:
      '@protobufjs/aspromise': 1.1.2
      '@protobufjs/inquire': 1.1.0

  '@protobufjs/float@1.0.2': {}

  '@protobufjs/inquire@1.1.0': {}

  '@protobufjs/path@1.1.2': {}

  '@protobufjs/pool@1.1.0': {}

  '@protobufjs/utf8@1.1.0': {}

  '@qdrant/js-client-rest@1.14.1(typescript@5.8.3)':
    dependencies:
      '@qdrant/openapi-typescript-fetch': 1.2.6
      '@sevinf/maybe': 0.5.0
      typescript: 5.8.3
      undici: 6.21.3

  '@qdrant/openapi-typescript-fetch@1.2.6': {}

  '@rollup/rollup-android-arm-eabi@4.44.0':
    optional: true

  '@rollup/rollup-android-arm64@4.44.0':
    optional: true

  '@rollup/rollup-darwin-arm64@4.44.0':
    optional: true

  '@rollup/rollup-darwin-x64@4.44.0':
    optional: true

  '@rollup/rollup-freebsd-arm64@4.44.0':
    optional: true

  '@rollup/rollup-freebsd-x64@4.44.0':
    optional: true

  '@rollup/rollup-linux-arm-gnueabihf@4.44.0':
    optional: true

  '@rollup/rollup-linux-arm-musleabihf@4.44.0':
    optional: true

  '@rollup/rollup-linux-arm64-gnu@4.44.0':
    optional: true

  '@rollup/rollup-linux-arm64-musl@4.44.0':
    optional: true

  '@rollup/rollup-linux-loongarch64-gnu@4.44.0':
    optional: true

  '@rollup/rollup-linux-powerpc64le-gnu@4.44.0':
    optional: true

  '@rollup/rollup-linux-riscv64-gnu@4.44.0':
    optional: true

  '@rollup/rollup-linux-riscv64-musl@4.44.0':
    optional: true

  '@rollup/rollup-linux-s390x-gnu@4.44.0':
    optional: true

  '@rollup/rollup-linux-x64-gnu@4.44.0':
    optional: true

  '@rollup/rollup-linux-x64-musl@4.44.0':
    optional: true

  '@rollup/rollup-win32-arm64-msvc@4.44.0':
    optional: true

  '@rollup/rollup-win32-ia32-msvc@4.44.0':
    optional: true

  '@rollup/rollup-win32-x64-msvc@4.44.0':
    optional: true

  '@sevinf/maybe@0.5.0': {}

  '@tsconfig/node10@1.0.11': {}

  '@tsconfig/node12@1.0.11': {}

  '@tsconfig/node14@1.0.3': {}

  '@tsconfig/node16@1.0.4': {}

  '@types/better-sqlite3@7.6.13':
    dependencies:
      '@types/node': 24.0.3

  '@types/body-parser@1.19.6':
    dependencies:
      '@types/connect': 3.4.38
      '@types/node': 24.0.3

  '@types/chai@5.2.2':
    dependencies:
      '@types/deep-eql': 4.0.2

  '@types/connect@3.4.38':
    dependencies:
      '@types/node': 24.0.3

  '@types/cors@2.8.19':
    dependencies:
      '@types/node': 24.0.3

  '@types/deep-eql@4.0.2': {}

  '@types/estree@1.0.8': {}

  '@types/express-serve-static-core@5.0.6':
    dependencies:
      '@types/node': 24.0.3
      '@types/qs': 6.14.0
      '@types/range-parser': 1.2.7
      '@types/send': 0.17.5

  '@types/express@5.0.3':
    dependencies:
      '@types/body-parser': 1.19.6
      '@types/express-serve-static-core': 5.0.6
      '@types/serve-static': 1.15.8

  '@types/http-errors@2.0.5': {}

  '@types/js-yaml@4.0.9': {}

  '@types/json-schema@7.0.15': {}

  '@types/mime@1.3.5': {}

  '@types/node-fetch@2.6.12':
    dependencies:
      '@types/node': 24.0.3
      form-data: 4.0.3

  '@types/node@18.19.112':
    dependencies:
      undici-types: 5.26.5

  '@types/node@24.0.3':
    dependencies:
      undici-types: 7.8.0

  '@types/pg@8.15.4':
    dependencies:
      '@types/node': 24.0.3
      pg-protocol: 1.10.3
      pg-types: 2.2.0

  '@types/qs@6.14.0': {}

  '@types/range-parser@1.2.7': {}

  '@types/send@0.17.5':
    dependencies:
      '@types/mime': 1.3.5
      '@types/node': 24.0.3

  '@types/serve-static@1.15.8':
    dependencies:
      '@types/http-errors': 2.0.5
      '@types/node': 24.0.3
      '@types/send': 0.17.5

  '@types/triple-beam@1.3.5': {}

  '@types/uuid@10.0.0': {}

  '@typescript-eslint/eslint-plugin@8.35.0(@typescript-eslint/parser@8.35.0(eslint@9.29.0)(typescript@5.8.3))(eslint@9.29.0)(typescript@5.8.3)':
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 8.35.0(eslint@9.29.0)(typescript@5.8.3)
      '@typescript-eslint/scope-manager': 8.35.0
      '@typescript-eslint/type-utils': 8.35.0(eslint@9.29.0)(typescript@5.8.3)
      '@typescript-eslint/utils': 8.35.0(eslint@9.29.0)(typescript@5.8.3)
      '@typescript-eslint/visitor-keys': 8.35.0
      eslint: 9.29.0
      graphemer: 1.4.0
      ignore: 7.0.5
      natural-compare: 1.4.0
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@8.35.0(eslint@9.29.0)(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/scope-manager': 8.35.0
      '@typescript-eslint/types': 8.35.0
      '@typescript-eslint/typescript-estree': 8.35.0(typescript@5.8.3)
      '@typescript-eslint/visitor-keys': 8.35.0
      debug: 4.4.1
      eslint: 9.29.0
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/project-service@8.35.0(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/tsconfig-utils': 8.35.0(typescript@5.8.3)
      '@typescript-eslint/types': 8.35.0
      debug: 4.4.1
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@8.35.0':
    dependencies:
      '@typescript-eslint/types': 8.35.0
      '@typescript-eslint/visitor-keys': 8.35.0

  '@typescript-eslint/tsconfig-utils@8.35.0(typescript@5.8.3)':
    dependencies:
      typescript: 5.8.3

  '@typescript-eslint/type-utils@8.35.0(eslint@9.29.0)(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/typescript-estree': 8.35.0(typescript@5.8.3)
      '@typescript-eslint/utils': 8.35.0(eslint@9.29.0)(typescript@5.8.3)
      debug: 4.4.1
      eslint: 9.29.0
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@8.35.0': {}

  '@typescript-eslint/typescript-estree@8.35.0(typescript@5.8.3)':
    dependencies:
      '@typescript-eslint/project-service': 8.35.0(typescript@5.8.3)
      '@typescript-eslint/tsconfig-utils': 8.35.0(typescript@5.8.3)
      '@typescript-eslint/types': 8.35.0
      '@typescript-eslint/visitor-keys': 8.35.0
      debug: 4.4.1
      fast-glob: 3.3.3
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.7.2
      ts-api-utils: 2.1.0(typescript@5.8.3)
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@8.35.0(eslint@9.29.0)(typescript@5.8.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.7.0(eslint@9.29.0)
      '@typescript-eslint/scope-manager': 8.35.0
      '@typescript-eslint/types': 8.35.0
      '@typescript-eslint/typescript-estree': 8.35.0(typescript@5.8.3)
      eslint: 9.29.0
      typescript: 5.8.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/visitor-keys@8.35.0':
    dependencies:
      '@typescript-eslint/types': 8.35.0
      eslint-visitor-keys: 4.2.1

  '@vitest/coverage-v8@3.2.4(vitest@3.2.4(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0))':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@bcoe/v8-coverage': 1.0.2
      ast-v8-to-istanbul: 0.3.3
      debug: 4.4.1
      istanbul-lib-coverage: 3.2.2
      istanbul-lib-report: 3.0.1
      istanbul-lib-source-maps: 5.0.6
      istanbul-reports: 3.1.7
      magic-string: 0.30.17
      magicast: 0.3.5
      std-env: 3.9.0
      test-exclude: 7.0.1
      tinyrainbow: 2.0.0
      vitest: 3.2.4(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0)
    transitivePeerDependencies:
      - supports-color

  '@vitest/expect@3.2.4':
    dependencies:
      '@types/chai': 5.2.2
      '@vitest/spy': 3.2.4
      '@vitest/utils': 3.2.4
      chai: 5.2.0
      tinyrainbow: 2.0.0

  '@vitest/mocker@3.2.4(vite@7.0.0(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0))':
    dependencies:
      '@vitest/spy': 3.2.4
      estree-walker: 3.0.3
      magic-string: 0.30.17
    optionalDependencies:
      vite: 7.0.0(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0)

  '@vitest/pretty-format@3.2.4':
    dependencies:
      tinyrainbow: 2.0.0

  '@vitest/runner@3.2.4':
    dependencies:
      '@vitest/utils': 3.2.4
      pathe: 2.0.3
      strip-literal: 3.0.0

  '@vitest/snapshot@3.2.4':
    dependencies:
      '@vitest/pretty-format': 3.2.4
      magic-string: 0.30.17
      pathe: 2.0.3

  '@vitest/spy@3.2.4':
    dependencies:
      tinyspy: 4.0.3

  '@vitest/utils@3.2.4':
    dependencies:
      '@vitest/pretty-format': 3.2.4
      loupe: 3.1.4
      tinyrainbow: 2.0.0

  '@web-std/blob@3.0.5':
    dependencies:
      '@web-std/stream': 1.0.0
      web-encoding: 1.1.5

  '@web-std/file@3.0.3':
    dependencies:
      '@web-std/blob': 3.0.5

  '@web-std/stream@1.0.0':
    dependencies:
      web-streams-polyfill: 3.3.3

  '@zilliz/milvus2-sdk-node@2.5.12':
    dependencies:
      '@grpc/grpc-js': 1.7.3
      '@grpc/proto-loader': 0.7.15
      '@opentelemetry/api': 1.9.0
      '@petamoriken/float16': 3.9.2
      dayjs: 1.11.13
      generic-pool: 3.9.0
      lru-cache: 9.1.2
      protobufjs: 7.5.3
      winston: 3.17.0

  '@zxing/text-encoding@0.9.0':
    optional: true

  abort-controller@3.0.0:
    dependencies:
      event-target-shim: 5.0.1

  accepts@2.0.0:
    dependencies:
      mime-types: 3.0.1
      negotiator: 1.0.0

  acorn-jsx@5.3.2(acorn@8.15.0):
    dependencies:
      acorn: 8.15.0

  acorn-walk@8.3.4:
    dependencies:
      acorn: 8.15.0

  acorn@8.15.0: {}

  agentkeepalive@4.6.0:
    dependencies:
      humanize-ms: 1.2.1

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ansi-align@3.0.1:
    dependencies:
      string-width: 4.2.3

  ansi-regex@5.0.1: {}

  ansi-regex@6.1.0: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  arg@4.1.3: {}

  argparse@2.0.1: {}

  assertion-error@2.0.1: {}

  ast-v8-to-istanbul@0.3.3:
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      estree-walker: 3.0.3
      js-tokens: 9.0.1

  async@3.2.6: {}

  asynckit@0.4.0: {}

  available-typed-arrays@1.0.7:
    dependencies:
      possible-typed-array-names: 1.1.0

  axios@1.10.0:
    dependencies:
      follow-redirects: 1.15.9
      form-data: 4.0.3
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  balanced-match@1.0.2: {}

  base64-js@1.5.1: {}

  better-sqlite3@12.2.0:
    dependencies:
      bindings: 1.5.0
      prebuild-install: 7.1.3

  bindings@1.5.0:
    dependencies:
      file-uri-to-path: 1.0.0

  bl@4.1.0:
    dependencies:
      buffer: 5.7.1
      inherits: 2.0.4
      readable-stream: 3.6.2

  body-parser@2.2.0:
    dependencies:
      bytes: 3.1.2
      content-type: 1.0.5
      debug: 4.4.1
      http-errors: 2.0.0
      iconv-lite: 0.6.3
      on-finished: 2.4.1
      qs: 6.14.0
      raw-body: 3.0.0
      type-is: 2.0.1
    transitivePeerDependencies:
      - supports-color

  boxen@8.0.1:
    dependencies:
      ansi-align: 3.0.1
      camelcase: 8.0.0
      chalk: 5.4.1
      cli-boxes: 3.0.0
      string-width: 7.2.0
      type-fest: 4.41.0
      widest-line: 5.0.0
      wrap-ansi: 9.0.0

  brace-expansion@1.1.12:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.2:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  buffer@5.7.1:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  buffer@6.0.3:
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1

  bundle-require@5.1.0(esbuild@0.25.5):
    dependencies:
      esbuild: 0.25.5
      load-tsconfig: 0.2.5

  bytes@3.1.2: {}

  cac@6.7.14: {}

  call-bind-apply-helpers@1.0.2:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2

  call-bind@1.0.8:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      get-intrinsic: 1.3.0
      set-function-length: 1.2.2

  call-bound@1.0.4:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      get-intrinsic: 1.3.0

  callsites@3.1.0: {}

  camelcase@8.0.0: {}

  chai@5.2.0:
    dependencies:
      assertion-error: 2.0.1
      check-error: 2.1.1
      deep-eql: 5.0.2
      loupe: 3.1.4
      pathval: 2.0.0

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chalk@5.4.1: {}

  check-error@2.1.1: {}

  chokidar@4.0.3:
    dependencies:
      readdirp: 4.1.2

  chownr@1.1.4: {}

  cli-boxes@3.0.0: {}

  cliui@8.0.1:
    dependencies:
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 7.0.0

  cluster-key-slot@1.1.2: {}

  color-convert@1.9.3:
    dependencies:
      color-name: 1.1.3

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.3: {}

  color-name@1.1.4: {}

  color-string@1.9.1:
    dependencies:
      color-name: 1.1.4
      simple-swizzle: 0.2.2

  color@3.2.1:
    dependencies:
      color-convert: 1.9.3
      color-string: 1.9.1

  colorspace@1.1.4:
    dependencies:
      color: 3.2.1
      text-hex: 1.0.0

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  commander@11.1.0: {}

  commander@4.1.1: {}

  concat-map@0.0.1: {}

  confbox@0.1.8: {}

  consola@3.4.2: {}

  content-disposition@1.0.0:
    dependencies:
      safe-buffer: 5.2.1

  content-type@1.0.5: {}

  cookie-signature@1.2.2: {}

  cookie@0.7.2: {}

  cors@2.8.5:
    dependencies:
      object-assign: 4.1.1
      vary: 1.1.2

  create-require@1.1.1: {}

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  dayjs@1.11.13: {}

  debug@4.4.1:
    dependencies:
      ms: 2.1.3

  decompress-response@6.0.0:
    dependencies:
      mimic-response: 3.1.0

  deep-eql@5.0.2: {}

  deep-extend@0.6.0: {}

  deep-is@0.1.4: {}

  define-data-property@1.1.4:
    dependencies:
      es-define-property: 1.0.1
      es-errors: 1.3.0
      gopd: 1.2.0

  delayed-stream@1.0.0: {}

  denque@2.1.0: {}

  depd@2.0.0: {}

  detect-libc@2.0.4: {}

  diff@4.0.2: {}

  dotenv@16.6.0: {}

  dunder-proto@1.0.1:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-errors: 1.3.0
      gopd: 1.2.0

  eastasianwidth@0.2.0: {}

  ee-first@1.1.1: {}

  emoji-regex@10.4.0: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  enabled@2.0.0: {}

  encodeurl@2.0.0: {}

  end-of-stream@1.4.5:
    dependencies:
      once: 1.4.0

  es-define-property@1.0.1: {}

  es-errors@1.3.0: {}

  es-module-lexer@1.7.0: {}

  es-object-atoms@1.1.1:
    dependencies:
      es-errors: 1.3.0

  es-set-tostringtag@2.1.0:
    dependencies:
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  esbuild@0.25.5:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.25.5
      '@esbuild/android-arm': 0.25.5
      '@esbuild/android-arm64': 0.25.5
      '@esbuild/android-x64': 0.25.5
      '@esbuild/darwin-arm64': 0.25.5
      '@esbuild/darwin-x64': 0.25.5
      '@esbuild/freebsd-arm64': 0.25.5
      '@esbuild/freebsd-x64': 0.25.5
      '@esbuild/linux-arm': 0.25.5
      '@esbuild/linux-arm64': 0.25.5
      '@esbuild/linux-ia32': 0.25.5
      '@esbuild/linux-loong64': 0.25.5
      '@esbuild/linux-mips64el': 0.25.5
      '@esbuild/linux-ppc64': 0.25.5
      '@esbuild/linux-riscv64': 0.25.5
      '@esbuild/linux-s390x': 0.25.5
      '@esbuild/linux-x64': 0.25.5
      '@esbuild/netbsd-arm64': 0.25.5
      '@esbuild/netbsd-x64': 0.25.5
      '@esbuild/openbsd-arm64': 0.25.5
      '@esbuild/openbsd-x64': 0.25.5
      '@esbuild/sunos-x64': 0.25.5
      '@esbuild/win32-arm64': 0.25.5
      '@esbuild/win32-ia32': 0.25.5
      '@esbuild/win32-x64': 0.25.5

  escalade@3.2.0: {}

  escape-html@1.0.3: {}

  escape-string-regexp@4.0.0: {}

  eslint-config-prettier@10.1.5(eslint@9.29.0):
    dependencies:
      eslint: 9.29.0

  eslint-scope@8.4.0:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint-visitor-keys@4.2.1: {}

  eslint@9.29.0:
    dependencies:
      '@eslint-community/eslint-utils': 4.7.0(eslint@9.29.0)
      '@eslint-community/regexpp': 4.12.1
      '@eslint/config-array': 0.20.1
      '@eslint/config-helpers': 0.2.3
      '@eslint/core': 0.14.0
      '@eslint/eslintrc': 3.3.1
      '@eslint/js': 9.29.0
      '@eslint/plugin-kit': 0.3.2
      '@humanfs/node': 0.16.6
      '@humanwhocodes/module-importer': 1.0.1
      '@humanwhocodes/retry': 0.4.3
      '@types/estree': 1.0.8
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.4.1
      escape-string-regexp: 4.0.0
      eslint-scope: 8.4.0
      eslint-visitor-keys: 4.2.1
      espree: 10.4.0
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 8.0.0
      find-up: 5.0.0
      glob-parent: 6.0.2
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      json-stable-stringify-without-jsonify: 1.0.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
    transitivePeerDependencies:
      - supports-color

  espree@10.4.0:
    dependencies:
      acorn: 8.15.0
      acorn-jsx: 5.3.2(acorn@8.15.0)
      eslint-visitor-keys: 4.2.1

  esquery@1.6.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@5.3.0: {}

  estree-walker@3.0.3:
    dependencies:
      '@types/estree': 1.0.8

  esutils@2.0.3: {}

  etag@1.8.1: {}

  event-target-shim@5.0.1: {}

  eventsource-parser@3.0.2: {}

  eventsource@3.0.7:
    dependencies:
      eventsource-parser: 3.0.2

  expand-template@2.0.3: {}

  expect-type@1.2.1: {}

  express-rate-limit@7.5.1(express@5.1.0):
    dependencies:
      express: 5.1.0

  express-validator@7.2.1:
    dependencies:
      lodash: 4.17.21
      validator: 13.12.0

  express@5.1.0:
    dependencies:
      accepts: 2.0.0
      body-parser: 2.2.0
      content-disposition: 1.0.0
      content-type: 1.0.5
      cookie: 0.7.2
      cookie-signature: 1.2.2
      debug: 4.4.1
      encodeurl: 2.0.0
      escape-html: 1.0.3
      etag: 1.8.1
      finalhandler: 2.1.0
      fresh: 2.0.0
      http-errors: 2.0.0
      merge-descriptors: 2.0.0
      mime-types: 3.0.1
      on-finished: 2.4.1
      once: 1.4.0
      parseurl: 1.3.3
      proxy-addr: 2.0.7
      qs: 6.14.0
      range-parser: 1.2.1
      router: 2.2.0
      send: 1.2.0
      serve-static: 2.2.0
      statuses: 2.0.2
      type-is: 2.0.1
      vary: 1.1.2
    transitivePeerDependencies:
      - supports-color

  fast-deep-equal@3.1.3: {}

  fast-glob@3.3.3:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fastq@1.19.1:
    dependencies:
      reusify: 1.1.0

  fdir@6.4.6(picomatch@4.0.2):
    optionalDependencies:
      picomatch: 4.0.2

  fecha@4.2.3: {}

  file-entry-cache@8.0.0:
    dependencies:
      flat-cache: 4.0.1

  file-uri-to-path@1.0.0: {}

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  finalhandler@2.1.0:
    dependencies:
      debug: 4.4.1
      encodeurl: 2.0.0
      escape-html: 1.0.3
      on-finished: 2.4.1
      parseurl: 1.3.3
      statuses: 2.0.2
    transitivePeerDependencies:
      - supports-color

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  fix-dts-default-cjs-exports@1.0.1:
    dependencies:
      magic-string: 0.30.17
      mlly: 1.7.4
      rollup: 4.44.0

  flat-cache@4.0.1:
    dependencies:
      flatted: 3.3.3
      keyv: 4.5.4

  flatted@3.3.3: {}

  fn.name@1.1.0: {}

  follow-redirects@1.15.9: {}

  for-each@0.3.5:
    dependencies:
      is-callable: 1.2.7

  foreground-child@3.3.1:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  form-data-encoder@1.7.2: {}

  form-data@4.0.3:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      es-set-tostringtag: 2.1.0
      hasown: 2.0.2
      mime-types: 2.1.35

  formdata-node@4.4.1:
    dependencies:
      node-domexception: 1.0.0
      web-streams-polyfill: 4.0.0-beta.3

  forwarded@0.2.0: {}

  fresh@2.0.0: {}

  fs-constants@1.0.0: {}

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  generic-pool@3.9.0: {}

  get-caller-file@2.0.5: {}

  get-east-asian-width@1.3.0: {}

  get-intrinsic@1.3.0:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      function-bind: 1.1.2
      get-proto: 1.0.1
      gopd: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      math-intrinsics: 1.1.0

  get-proto@1.0.1:
    dependencies:
      dunder-proto: 1.0.1
      es-object-atoms: 1.1.1

  get-tsconfig@4.10.1:
    dependencies:
      resolve-pkg-maps: 1.0.0

  github-from-package@0.0.0: {}

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.1
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.1
      path-scurry: 1.11.1

  globals@14.0.0: {}

  gopd@1.2.0: {}

  graphemer@1.4.0: {}

  has-flag@4.0.0: {}

  has-property-descriptors@1.0.2:
    dependencies:
      es-define-property: 1.0.1

  has-symbols@1.1.0: {}

  has-tostringtag@1.0.2:
    dependencies:
      has-symbols: 1.1.0

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  helmet@8.1.0: {}

  html-escaper@2.0.2: {}

  http-errors@2.0.0:
    dependencies:
      depd: 2.0.0
      inherits: 2.0.4
      setprototypeof: 1.2.0
      statuses: 2.0.1
      toidentifier: 1.0.1

  humanize-ms@1.2.1:
    dependencies:
      ms: 2.1.3

  husky@9.1.7: {}

  iconv-lite@0.6.3:
    dependencies:
      safer-buffer: 2.1.2

  ieee754@1.2.1: {}

  ignore@5.3.2: {}

  ignore@7.0.5: {}

  import-fresh@3.3.1:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  imurmurhash@0.1.4: {}

  inherits@2.0.4: {}

  ini@1.3.8: {}

  ioredis@5.6.1:
    dependencies:
      '@ioredis/commands': 1.2.0
      cluster-key-slot: 1.1.2
      debug: 4.4.1
      denque: 2.1.0
      lodash.defaults: 4.2.0
      lodash.isarguments: 3.1.0
      redis-errors: 1.2.0
      redis-parser: 3.0.0
      standard-as-callback: 2.1.0
    transitivePeerDependencies:
      - supports-color

  ipaddr.js@1.9.1: {}

  is-arguments@1.2.0:
    dependencies:
      call-bound: 1.0.4
      has-tostringtag: 1.0.2

  is-arrayish@0.3.2: {}

  is-callable@1.2.7: {}

  is-extglob@2.1.1: {}

  is-fullwidth-code-point@3.0.0: {}

  is-generator-function@1.1.0:
    dependencies:
      call-bound: 1.0.4
      get-proto: 1.0.1
      has-tostringtag: 1.0.2
      safe-regex-test: 1.1.0

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-number@7.0.0: {}

  is-promise@4.0.0: {}

  is-regex@1.2.1:
    dependencies:
      call-bound: 1.0.4
      gopd: 1.2.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  is-stream@2.0.1: {}

  is-typed-array@1.1.15:
    dependencies:
      which-typed-array: 1.1.19

  isexe@2.0.0: {}

  istanbul-lib-coverage@3.2.2: {}

  istanbul-lib-report@3.0.1:
    dependencies:
      istanbul-lib-coverage: 3.2.2
      make-dir: 4.0.0
      supports-color: 7.2.0

  istanbul-lib-source-maps@5.0.6:
    dependencies:
      '@jridgewell/trace-mapping': 0.3.25
      debug: 4.4.1
      istanbul-lib-coverage: 3.2.2
    transitivePeerDependencies:
      - supports-color

  istanbul-reports@3.1.7:
    dependencies:
      html-escaper: 2.0.2
      istanbul-lib-report: 3.0.1

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  joycon@3.1.1: {}

  js-tokens@9.0.1: {}

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  json-buffer@3.0.1: {}

  json-schema-traverse@0.4.1: {}

  json-schema@0.4.0: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  kuler@2.0.0: {}

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lilconfig@3.1.3: {}

  lines-and-columns@1.2.4: {}

  load-tsconfig@0.2.5: {}

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.camelcase@4.3.0: {}

  lodash.defaults@4.2.0: {}

  lodash.isarguments@3.1.0: {}

  lodash.merge@4.6.2: {}

  lodash.sortby@4.7.0: {}

  lodash@4.17.21: {}

  logform@2.7.0:
    dependencies:
      '@colors/colors': 1.6.0
      '@types/triple-beam': 1.3.5
      fecha: 4.2.3
      ms: 2.1.3
      safe-stable-stringify: 2.5.0
      triple-beam: 1.4.1

  long@5.3.2: {}

  loupe@3.1.4: {}

  lru-cache@10.4.3: {}

  lru-cache@9.1.2: {}

  magic-string@0.30.17:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.5.0

  magicast@0.3.5:
    dependencies:
      '@babel/parser': 7.27.5
      '@babel/types': 7.27.6
      source-map-js: 1.2.1

  make-dir@4.0.0:
    dependencies:
      semver: 7.7.2

  make-error@1.3.6: {}

  math-intrinsics@1.1.0: {}

  media-typer@1.1.0: {}

  merge-descriptors@2.0.0: {}

  merge2@1.4.1: {}

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-db@1.54.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  mime-types@3.0.1:
    dependencies:
      mime-db: 1.54.0

  mimic-response@3.1.0: {}

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.12

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.2

  minimist@1.2.8: {}

  minipass@7.1.2: {}

  mkdirp-classic@0.5.3: {}

  mlly@1.7.4:
    dependencies:
      acorn: 8.15.0
      pathe: 2.0.3
      pkg-types: 1.3.1
      ufo: 1.6.1

  ms@2.1.3: {}

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  nanoid@3.3.11: {}

  napi-build-utils@2.0.0: {}

  natural-compare@1.4.0: {}

  negotiator@1.0.0: {}

  neo4j-driver-bolt-connection@5.28.1:
    dependencies:
      buffer: 6.0.3
      neo4j-driver-core: 5.28.1
      string_decoder: 1.3.0

  neo4j-driver-core@5.28.1: {}

  neo4j-driver@5.28.1:
    dependencies:
      neo4j-driver-bolt-connection: 5.28.1
      neo4j-driver-core: 5.28.1
      rxjs: 7.8.2

  node-abi@3.75.0:
    dependencies:
      semver: 7.7.2

  node-domexception@1.0.0: {}

  node-fetch@2.7.0:
    dependencies:
      whatwg-url: 5.0.0

  object-assign@4.1.1: {}

  object-inspect@1.13.4: {}

  on-finished@2.4.1:
    dependencies:
      ee-first: 1.1.1

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  one-time@1.0.0:
    dependencies:
      fn.name: 1.1.0

  openai@4.104.0(ws@8.18.3)(zod@3.25.76):
    dependencies:
      '@types/node': 18.19.112
      '@types/node-fetch': 2.6.12
      abort-controller: 3.0.0
      agentkeepalive: 4.6.0
      form-data-encoder: 1.7.2
      formdata-node: 4.4.1
      node-fetch: 2.7.0
    optionalDependencies:
      ws: 8.18.3
      zod: 3.25.76
    transitivePeerDependencies:
      - encoding

  optionator@0.9.4:
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  package-json-from-dist@1.0.1: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parseurl@1.3.3: {}

  path-exists@4.0.0: {}

  path-key@3.1.1: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  path-to-regexp@8.2.0: {}

  pathe@2.0.3: {}

  pathval@2.0.0: {}

  pg-cloudflare@1.2.7:
    optional: true

  pg-connection-string@2.9.1: {}

  pg-int8@1.0.1: {}

  pg-pool@3.10.1(pg@8.16.3):
    dependencies:
      pg: 8.16.3

  pg-protocol@1.10.3: {}

  pg-types@2.2.0:
    dependencies:
      pg-int8: 1.0.1
      postgres-array: 2.0.0
      postgres-bytea: 1.0.0
      postgres-date: 1.0.7
      postgres-interval: 1.2.0

  pg@8.16.3:
    dependencies:
      pg-connection-string: 2.9.1
      pg-pool: 3.10.1(pg@8.16.3)
      pg-protocol: 1.10.3
      pg-types: 2.2.0
      pgpass: 1.0.5
    optionalDependencies:
      pg-cloudflare: 1.2.7

  pgpass@1.0.5:
    dependencies:
      split2: 4.2.0

  picocolors@1.1.1: {}

  picomatch@2.3.1: {}

  picomatch@4.0.2: {}

  pirates@4.0.7: {}

  pkce-challenge@5.0.0: {}

  pkg-types@1.3.1:
    dependencies:
      confbox: 0.1.8
      mlly: 1.7.4
      pathe: 2.0.3

  possible-typed-array-names@1.1.0: {}

  postcss-load-config@6.0.1(postcss@8.5.6)(tsx@4.20.3)(yaml@2.8.0):
    dependencies:
      lilconfig: 3.1.3
    optionalDependencies:
      postcss: 8.5.6
      tsx: 4.20.3
      yaml: 2.8.0

  postcss@8.5.6:
    dependencies:
      nanoid: 3.3.11
      picocolors: 1.1.1
      source-map-js: 1.2.1

  postgres-array@2.0.0: {}

  postgres-bytea@1.0.0: {}

  postgres-date@1.0.7: {}

  postgres-interval@1.2.0:
    dependencies:
      xtend: 4.0.2

  prebuild-install@7.1.3:
    dependencies:
      detect-libc: 2.0.4
      expand-template: 2.0.3
      github-from-package: 0.0.0
      minimist: 1.2.8
      mkdirp-classic: 0.5.3
      napi-build-utils: 2.0.0
      node-abi: 3.75.0
      pump: 3.0.3
      rc: 1.2.8
      simple-get: 4.0.1
      tar-fs: 2.1.3
      tunnel-agent: 0.6.0

  prelude-ls@1.2.1: {}

  prettier@3.6.0: {}

  protobufjs@7.5.3:
    dependencies:
      '@protobufjs/aspromise': 1.1.2
      '@protobufjs/base64': 1.1.2
      '@protobufjs/codegen': 2.0.4
      '@protobufjs/eventemitter': 1.1.0
      '@protobufjs/fetch': 1.1.0
      '@protobufjs/float': 1.0.2
      '@protobufjs/inquire': 1.1.0
      '@protobufjs/path': 1.1.2
      '@protobufjs/pool': 1.1.0
      '@protobufjs/utf8': 1.1.0
      '@types/node': 24.0.3
      long: 5.3.2

  proxy-addr@2.0.7:
    dependencies:
      forwarded: 0.2.0
      ipaddr.js: 1.9.1

  proxy-from-env@1.1.0: {}

  pump@3.0.3:
    dependencies:
      end-of-stream: 1.4.5
      once: 1.4.0

  punycode@2.3.1: {}

  qs@6.14.0:
    dependencies:
      side-channel: 1.1.0

  queue-microtask@1.2.3: {}

  range-parser@1.2.1: {}

  raw-body@3.0.0:
    dependencies:
      bytes: 3.1.2
      http-errors: 2.0.0
      iconv-lite: 0.6.3
      unpipe: 1.0.0

  rc@1.2.8:
    dependencies:
      deep-extend: 0.6.0
      ini: 1.3.8
      minimist: 1.2.8
      strip-json-comments: 2.0.1

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  readdirp@4.1.2: {}

  recheck-jar@4.5.0:
    optional: true

  recheck-linux-x64@4.5.0:
    optional: true

  recheck-macos-arm64@4.5.0:
    optional: true

  recheck-macos-x64@4.5.0:
    optional: true

  recheck-windows-x64@4.5.0:
    optional: true

  recheck@4.5.0:
    dependencies:
      synckit: 0.9.2
    optionalDependencies:
      recheck-jar: 4.5.0
      recheck-linux-x64: 4.5.0
      recheck-macos-arm64: 4.5.0
      recheck-macos-x64: 4.5.0
      recheck-windows-x64: 4.5.0

  redis-errors@1.2.0: {}

  redis-parser@3.0.0:
    dependencies:
      redis-errors: 1.2.0

  require-directory@2.1.1: {}

  resolve-from@4.0.0: {}

  resolve-from@5.0.0: {}

  resolve-pkg-maps@1.0.0: {}

  reusify@1.1.0: {}

  rollup@4.44.0:
    dependencies:
      '@types/estree': 1.0.8
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.44.0
      '@rollup/rollup-android-arm64': 4.44.0
      '@rollup/rollup-darwin-arm64': 4.44.0
      '@rollup/rollup-darwin-x64': 4.44.0
      '@rollup/rollup-freebsd-arm64': 4.44.0
      '@rollup/rollup-freebsd-x64': 4.44.0
      '@rollup/rollup-linux-arm-gnueabihf': 4.44.0
      '@rollup/rollup-linux-arm-musleabihf': 4.44.0
      '@rollup/rollup-linux-arm64-gnu': 4.44.0
      '@rollup/rollup-linux-arm64-musl': 4.44.0
      '@rollup/rollup-linux-loongarch64-gnu': 4.44.0
      '@rollup/rollup-linux-powerpc64le-gnu': 4.44.0
      '@rollup/rollup-linux-riscv64-gnu': 4.44.0
      '@rollup/rollup-linux-riscv64-musl': 4.44.0
      '@rollup/rollup-linux-s390x-gnu': 4.44.0
      '@rollup/rollup-linux-x64-gnu': 4.44.0
      '@rollup/rollup-linux-x64-musl': 4.44.0
      '@rollup/rollup-win32-arm64-msvc': 4.44.0
      '@rollup/rollup-win32-ia32-msvc': 4.44.0
      '@rollup/rollup-win32-x64-msvc': 4.44.0
      fsevents: 2.3.3

  router@2.2.0:
    dependencies:
      debug: 4.4.1
      depd: 2.0.0
      is-promise: 4.0.0
      parseurl: 1.3.3
      path-to-regexp: 8.2.0
    transitivePeerDependencies:
      - supports-color

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  rxjs@7.8.2:
    dependencies:
      tslib: 2.8.1

  safe-buffer@5.2.1: {}

  safe-regex-test@1.1.0:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      is-regex: 1.2.1

  safe-stable-stringify@2.5.0: {}

  safer-buffer@2.1.2: {}

  secure-json-parse@2.7.0: {}

  semver@7.7.2: {}

  send@1.2.0:
    dependencies:
      debug: 4.4.1
      encodeurl: 2.0.0
      escape-html: 1.0.3
      etag: 1.8.1
      fresh: 2.0.0
      http-errors: 2.0.0
      mime-types: 3.0.1
      ms: 2.1.3
      on-finished: 2.4.1
      range-parser: 1.2.1
      statuses: 2.0.2
    transitivePeerDependencies:
      - supports-color

  serve-static@2.2.0:
    dependencies:
      encodeurl: 2.0.0
      escape-html: 1.0.3
      parseurl: 1.3.3
      send: 1.2.0
    transitivePeerDependencies:
      - supports-color

  set-function-length@1.2.2:
    dependencies:
      define-data-property: 1.1.4
      es-errors: 1.3.0
      function-bind: 1.1.2
      get-intrinsic: 1.3.0
      gopd: 1.2.0
      has-property-descriptors: 1.0.2

  setprototypeof@1.2.0: {}

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  side-channel-list@1.0.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4

  side-channel-map@1.0.1:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4

  side-channel-weakmap@1.0.2:
    dependencies:
      call-bound: 1.0.4
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      object-inspect: 1.13.4
      side-channel-map: 1.0.1

  side-channel@1.1.0:
    dependencies:
      es-errors: 1.3.0
      object-inspect: 1.13.4
      side-channel-list: 1.0.0
      side-channel-map: 1.0.1
      side-channel-weakmap: 1.0.2

  siginfo@2.0.0: {}

  signal-exit@4.1.0: {}

  simple-concat@1.0.1: {}

  simple-get@4.0.1:
    dependencies:
      decompress-response: 6.0.0
      once: 1.4.0
      simple-concat: 1.0.1

  simple-swizzle@0.2.2:
    dependencies:
      is-arrayish: 0.3.2

  source-map-js@1.2.1: {}

  source-map@0.8.0-beta.0:
    dependencies:
      whatwg-url: 7.1.0

  split2@4.2.0: {}

  stack-trace@0.0.10: {}

  stackback@0.0.2: {}

  standard-as-callback@2.1.0: {}

  statuses@2.0.1: {}

  statuses@2.0.2: {}

  std-env@3.9.0: {}

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  string-width@7.2.0:
    dependencies:
      emoji-regex: 10.4.0
      get-east-asian-width: 1.3.0
      strip-ansi: 7.1.0

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.1.0

  strip-json-comments@2.0.1: {}

  strip-json-comments@3.1.1: {}

  strip-literal@3.0.0:
    dependencies:
      js-tokens: 9.0.1

  sucrase@3.35.0:
    dependencies:
      '@jridgewell/gen-mapping': 0.3.8
      commander: 4.1.1
      glob: 10.4.5
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.7
      ts-interface-checker: 0.1.13

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  synckit@0.9.2:
    dependencies:
      '@pkgr/core': 0.1.2
      tslib: 2.8.1

  tar-fs@2.1.3:
    dependencies:
      chownr: 1.1.4
      mkdirp-classic: 0.5.3
      pump: 3.0.3
      tar-stream: 2.2.0

  tar-stream@2.2.0:
    dependencies:
      bl: 4.1.0
      end-of-stream: 1.4.5
      fs-constants: 1.0.0
      inherits: 2.0.4
      readable-stream: 3.6.2

  test-exclude@7.0.1:
    dependencies:
      '@istanbuljs/schema': 0.1.3
      glob: 10.4.5
      minimatch: 9.0.5

  text-hex@1.0.0: {}

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  tinybench@2.9.0: {}

  tinyexec@0.3.2: {}

  tinyglobby@0.2.14:
    dependencies:
      fdir: 6.4.6(picomatch@4.0.2)
      picomatch: 4.0.2

  tinypool@1.1.1: {}

  tinyrainbow@2.0.0: {}

  tinyspy@4.0.3: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  toidentifier@1.0.1: {}

  tr46@0.0.3: {}

  tr46@1.0.1:
    dependencies:
      punycode: 2.3.1

  tree-kill@1.2.2: {}

  triple-beam@1.4.1: {}

  ts-api-utils@2.1.0(typescript@5.8.3):
    dependencies:
      typescript: 5.8.3

  ts-interface-checker@0.1.13: {}

  ts-node@10.9.2(@types/node@24.0.3)(typescript@5.8.3):
    dependencies:
      '@cspotcode/source-map-support': 0.8.1
      '@tsconfig/node10': 1.0.11
      '@tsconfig/node12': 1.0.11
      '@tsconfig/node14': 1.0.3
      '@tsconfig/node16': 1.0.4
      '@types/node': 24.0.3
      acorn: 8.15.0
      acorn-walk: 8.3.4
      arg: 4.1.3
      create-require: 1.1.1
      diff: 4.0.2
      make-error: 1.3.6
      typescript: 5.8.3
      v8-compile-cache-lib: 3.0.1
      yn: 3.1.1

  tslib@2.8.1: {}

  tsup@8.5.0(postcss@8.5.6)(tsx@4.20.3)(typescript@5.8.3)(yaml@2.8.0):
    dependencies:
      bundle-require: 5.1.0(esbuild@0.25.5)
      cac: 6.7.14
      chokidar: 4.0.3
      consola: 3.4.2
      debug: 4.4.1
      esbuild: 0.25.5
      fix-dts-default-cjs-exports: 1.0.1
      joycon: 3.1.1
      picocolors: 1.1.1
      postcss-load-config: 6.0.1(postcss@8.5.6)(tsx@4.20.3)(yaml@2.8.0)
      resolve-from: 5.0.0
      rollup: 4.44.0
      source-map: 0.8.0-beta.0
      sucrase: 3.35.0
      tinyexec: 0.3.2
      tinyglobby: 0.2.14
      tree-kill: 1.2.2
    optionalDependencies:
      postcss: 8.5.6
      typescript: 5.8.3
    transitivePeerDependencies:
      - jiti
      - supports-color
      - tsx
      - yaml

  tsx@4.20.3:
    dependencies:
      esbuild: 0.25.5
      get-tsconfig: 4.10.1
    optionalDependencies:
      fsevents: 2.3.3

  tunnel-agent@0.6.0:
    dependencies:
      safe-buffer: 5.2.1

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-fest@4.41.0: {}

  type-is@2.0.1:
    dependencies:
      content-type: 1.0.5
      media-typer: 1.1.0
      mime-types: 3.0.1

  typescript@5.8.3: {}

  ufo@1.6.1: {}

  undici-types@5.26.5: {}

  undici-types@7.8.0: {}

  undici@6.21.3: {}

  undici@7.11.0: {}

  unpipe@1.0.0: {}

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  util-deprecate@1.0.2: {}

  util@0.12.5:
    dependencies:
      inherits: 2.0.4
      is-arguments: 1.2.0
      is-generator-function: 1.1.0
      is-typed-array: 1.1.15
      which-typed-array: 1.1.19

  uuid@11.1.0: {}

  v8-compile-cache-lib@3.0.1: {}

  validator@13.12.0: {}

  vary@1.1.2: {}

  vite-node@3.2.4(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0):
    dependencies:
      cac: 6.7.14
      debug: 4.4.1
      es-module-lexer: 1.7.0
      pathe: 2.0.3
      vite: 7.0.0(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0)
    transitivePeerDependencies:
      - '@types/node'
      - jiti
      - less
      - lightningcss
      - sass
      - sass-embedded
      - stylus
      - sugarss
      - supports-color
      - terser
      - tsx
      - yaml

  vite@7.0.0(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0):
    dependencies:
      esbuild: 0.25.5
      fdir: 6.4.6(picomatch@4.0.2)
      picomatch: 4.0.2
      postcss: 8.5.6
      rollup: 4.44.0
      tinyglobby: 0.2.14
    optionalDependencies:
      '@types/node': 24.0.3
      fsevents: 2.3.3
      tsx: 4.20.3
      yaml: 2.8.0

  vitest@3.2.4(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0):
    dependencies:
      '@types/chai': 5.2.2
      '@vitest/expect': 3.2.4
      '@vitest/mocker': 3.2.4(vite@7.0.0(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0))
      '@vitest/pretty-format': 3.2.4
      '@vitest/runner': 3.2.4
      '@vitest/snapshot': 3.2.4
      '@vitest/spy': 3.2.4
      '@vitest/utils': 3.2.4
      chai: 5.2.0
      debug: 4.4.1
      expect-type: 1.2.1
      magic-string: 0.30.17
      pathe: 2.0.3
      picomatch: 4.0.2
      std-env: 3.9.0
      tinybench: 2.9.0
      tinyexec: 0.3.2
      tinyglobby: 0.2.14
      tinypool: 1.1.1
      tinyrainbow: 2.0.0
      vite: 7.0.0(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0)
      vite-node: 3.2.4(@types/node@24.0.3)(tsx@4.20.3)(yaml@2.8.0)
      why-is-node-running: 2.3.0
    optionalDependencies:
      '@types/node': 24.0.3
    transitivePeerDependencies:
      - jiti
      - less
      - lightningcss
      - msw
      - sass
      - sass-embedded
      - stylus
      - sugarss
      - supports-color
      - terser
      - tsx
      - yaml

  web-encoding@1.1.5:
    dependencies:
      util: 0.12.5
    optionalDependencies:
      '@zxing/text-encoding': 0.9.0

  web-streams-polyfill@3.3.3: {}

  web-streams-polyfill@4.0.0-beta.3: {}

  webidl-conversions@3.0.1: {}

  webidl-conversions@4.0.2: {}

  whatwg-url@5.0.0:
    dependencies:
      tr46: 0.0.3
      webidl-conversions: 3.0.1

  whatwg-url@7.1.0:
    dependencies:
      lodash.sortby: 4.7.0
      tr46: 1.0.1
      webidl-conversions: 4.0.2

  which-typed-array@1.1.19:
    dependencies:
      available-typed-arrays: 1.0.7
      call-bind: 1.0.8
      call-bound: 1.0.4
      for-each: 0.3.5
      get-proto: 1.0.1
      gopd: 1.2.0
      has-tostringtag: 1.0.2

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  why-is-node-running@2.3.0:
    dependencies:
      siginfo: 2.0.0
      stackback: 0.0.2

  widest-line@5.0.0:
    dependencies:
      string-width: 7.2.0

  winston-transport@4.9.0:
    dependencies:
      logform: 2.7.0
      readable-stream: 3.6.2
      triple-beam: 1.4.1

  winston@3.17.0:
    dependencies:
      '@colors/colors': 1.6.0
      '@dabh/diagnostics': 2.0.3
      async: 3.2.6
      is-stream: 2.0.1
      logform: 2.7.0
      one-time: 1.0.0
      readable-stream: 3.6.2
      safe-stable-stringify: 2.5.0
      stack-trace: 0.0.10
      triple-beam: 1.4.1
      winston-transport: 4.9.0

  word-wrap@1.2.5: {}

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrap-ansi@9.0.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 7.2.0
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  ws@8.18.3:
    optional: true

  xtend@4.0.2: {}

  y18n@5.0.8: {}

  yaml@2.8.0: {}

  yargs-parser@21.1.1: {}

  yargs@17.7.2:
    dependencies:
      cliui: 8.0.1
      escalade: 3.2.0
      get-caller-file: 2.0.5
      require-directory: 2.1.1
      string-width: 4.2.3
      y18n: 5.0.8
      yargs-parser: 21.1.1

  yn@3.1.1: {}

  yocto-queue@0.1.0: {}

  zod-to-json-schema@3.24.5(zod@3.25.76):
    dependencies:
      zod: 3.25.76

  zod@3.25.76: {}



================================================
FILE: tsconfig.json
================================================
{
	"compilerOptions": {
		"target": "ES2022",
		"module": "NodeNext",
		"moduleResolution": "NodeNext",
		"esModuleInterop": true,
		"allowSyntheticDefaultImports": true,
		"downlevelIteration": true,
		"baseUrl": ".",
		"paths": {
			"@app/*": ["src/app/*"],
			"@core/*": ["src/core/*"],
			"mitt": ["./node_modules/mitt/dist/index.d.ts"],
			"src/core/logger/index.js": ["src/core/logger/index.ts"]
		},
		"outDir": "./dist",
		"rootDir": ".",
		"strict": false,
		"skipLibCheck": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"types": ["node", "vitest/globals"],
		"lib": ["ES2022", "DOM"],
		"declaration": true,
		"declarationMap": true,
		"allowImportingTsExtensions": false,
		"noEmit": false
	},
	"include": ["src/**/*", "**/*.test.ts", "**/*.spec.ts", "vitest.config.ts"],
	"exclude": ["node_modules"]
}



================================================
FILE: tsconfig.typecheck.json
================================================
{
	"extends": "./tsconfig.json",
	"compilerOptions": {
		"noEmit": true,
		"strict": true,
		"noUncheckedIndexedAccess": true,
		"noImplicitReturns": true,
		"noFallthroughCasesInSwitch": true,
		"noImplicitOverride": true,
		"exactOptionalPropertyTypes": true,
		"skipLibCheck": true
	},
	"include": ["src/core/**/*", "src/app/**/*", "**/*.test.ts", "**/*.spec.ts"],
	"exclude": ["node_modules", "dist", "**/*.d.ts"]
}



================================================
FILE: tsup.config.ts
================================================
import { defineConfig } from 'tsup';
export default defineConfig([
	{
		entry: ['src/core/index.ts'],
		format: ['cjs','esm'],
		outDir: 'dist/src/core',
		dts: true,
		shims: true,
		bundle: true,
		noExternal: ['chalk', 'boxen'],
		external: ['better-sqlite3', 'pg', 'redis'],
	},
	{
		entry: ['src/app/index.ts'],
		format: ['cjs'],  // Use only CommonJS for app to avoid dynamic require issues
		outDir: 'dist/src/app',
		shims: true,
		bundle: true,
		platform: 'node',
		target: 'node18',  // Specify Node.js target version
		external: [
			// Database drivers
			'better-sqlite3', 
			'pg', 
			'neo4j-driver', 
			'ioredis', 
			// Node.js built-in modules to prevent bundling issues
			'fs',
			'path',
			'os',
			'crypto',
			'stream',
			'util',
			'events',
			'child_process'
		],
		noExternal: ['chalk', 'boxen', 'commander'],
	},
]);



================================================
FILE: vitest.config.ts
================================================
import { defineConfig } from 'vitest/config';
import path from 'path';

export default defineConfig({
	resolve: {
		alias: {
			'@core': path.resolve(__dirname, 'src/core'),
			'@app': path.resolve(__dirname, 'src/app'),
		},
	},
	test: {
		globals: true,
		environment: 'node',
		include: ['src/**/*.test.ts', 'src/**/*.spec.ts'],
		exclude: [
			'**/node_modules/**',
			'**/dist/**',
			'**/build/**',
			...(process.env.CI ? ['**/integration/**'] : []),
		],
		watch: true,
	},
});



================================================
FILE: .dockerignore
================================================
# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Build outputs (exclude from build context, but keep for multi-stage build)
*.tsbuildinfo

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# Logs
logs/
*.log

# Environment variables
.env
.env.local
.env.*.local

# IDEs and editors
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Git
.git/
.gitignore

# Test files
test/
tests/
**/*.test.ts
**/*.test.js
**/__test__/

# Documentation
*.md
!README.md
docs/

# Development files
.husky/
vitest.config.ts
eslint.config.js

# Python files (if any)
*.py
__pycache__/
*.pyc
poetry/

# Docker files
Dockerfile*
docker-compose*
compose.y*ml

# Temporary files
tmp/
temp/



================================================
FILE: .env.example
================================================
# Cipher Environment Configuration
# Copy this file to .env and fill in your actual values

# ====================
# API Configuration
# ====================
# At least one API key is required
OPENAI_API_KEY=your-openai-api-key-here
ANTHROPIC_API_KEY=your-anthropic-api-key-here
OPENROUTER_API_KEY=your-openrouter-api-key-here

# Ollama Configuration (optional - only if using Ollama)
# OLLAMA_BASE_URL=http://localhost:11434/v1

# Optional: OpenAI base URL (for custom endpoints)
# OPENAI_BASE_URL=https://api.openai.com/v1

# ====================
# Application Settings
# ====================
NODE_ENV=development
CIPHER_LOG_LEVEL=info
REDACT_SECRETS=true

# ====================
# Storage Configuration
# ====================
STORAGE_CACHE_TYPE=in-memory
# STORAGE_CACHE_HOST=localhost
# STORAGE_CACHE_PORT=6379
# STORAGE_CACHE_PASSWORD=
# STORAGE_CACHE_DATABASE=0

STORAGE_DATABASE_TYPE=in-memory
# STORAGE_DATABASE_NAME=cipher.db
# STORAGE_DATABASE_PATH=./data

# ====================
# Memory Search Configuration
# ====================
# Options: knowledge, reflection, both
SEARCH_MEMORY_TYPE=both

# ====================
# Vector Store Configuration
# ====================
# Available types: in-memory, qdrant, milvus
VECTOR_STORE_TYPE=in-memory

# Qdrant configuration (only used if VECTOR_STORE_TYPE=qdrant)
# VECTOR_STORE_HOST=localhost
# VECTOR_STORE_PORT=6333
# VECTOR_STORE_URL=http://localhost:6333
# VECTOR_STORE_API_KEY=your-qdrant-api-key

# Milvus configuration (only used if VECTOR_STORE_TYPE=milvus)
# VECTOR_STORE_HOST=localhost
# VECTOR_STORE_PORT=19530
# VECTOR_STORE_URL=your-milvus-cluster-endpoint
# VECTOR_STORE_API_KEY=your-milvus-api-key
# VECTOR_STORE_USERNAME=your-milvus-zilliz-cloud-username
# VECTOR_STORE_PASSWORD=your-milvus-zilliz-cloud-password

# Vector collection settings
VECTOR_STORE_COLLECTION=knowledge_memory
# VECTOR_STORE_COLLECTION_NAME=your_collection_name
VECTOR_STORE_DIMENSION=1536
VECTOR_STORE_DISTANCE=Cosine
VECTOR_STORE_ON_DISK=false
# VECTOR_STORE_MAX_VECTORS=10000

# ====================
# Reflection Memory Configuration
# ====================
REFLECTION_VECTOR_STORE_COLLECTION=reflection_memory
DISABLE_REFLECTION_MEMORY=true

# ====================
# MCP Configuration
# ====================
# MCP_GLOBAL_TIMEOUT=30000

# ====================
# Knowledge Graph Configuration (optional)
# ====================
# NEO4J LOCAL CONFIGURATION (for local development)
# Local Neo4j configuration

# KNOWLEDGE_GRAPH_HOST=localhost
# KNOWLEDGE_GRAPH_PORT=7687
# KNOWLEDGE_GRAPH_URI=bolt://localhost:7687
# KNOWLEDGE_GRAPH_USERNAME=neo4j
# KNOWLEDGE_GRAPH_PASSWORD=your-local-password
# KNOWLEDGE_GRAPH_DATABASE=neo4j

# NEO4J CLOUD CONFIGURATION (for cloud deployment)

# KNOWLEDGE_GRAPH_URI=neo4j+s://your-instance.databases.neo4j.io:7687
# KNOWLEDGE_GRAPH_USERNAME=neo4j
# KNOWLEDGE_GRAPH_PASSWORD=your-password
# KNOWLEDGE_GRAPH_DATABASE=neo4j


# CONFIGURATION FOR EVENT MANAGEMENT

# # Enable or disable event filtering (true/false)
# EVENT_FILTERING_ENABLED=false

# # Comma-separated list of event types to filter out (block)
# # Example: tool:executionStarted,tool:executionCompleted,llm:thinking
# EVENT_FILTERED_TYPES=

# # Enable or disable event persistence (true/false)
# EVENT_PERSISTENCE_ENABLED=true

# # Event persistence storage type: file, memory, or database
# EVENT_PERSISTENCE_TYPE=file

# # Path to store event log files (if using file storage)
# EVENT_PERSISTENCE_PATH=./data/events

# # Number of days to retain event logs
# EVENT_PERSISTENCE_RETENTION=7


================================================
FILE: .prettierignore
================================================
# Dependencies
node_modules/
pnpm-lock.yaml
package-lock.json
yarn.lock

# Build outputs
dist/
build/
coverage/

# Logs
*.log
logs/

# Environment files
.env
.env.local
.env.*.local

# IDE files
.vscode/
.idea/

# OS files
.DS_Store
Thumbs.db

# Generated files
*.generated.*
*.min.js
*.min.css

# Documentation that should preserve formatting
CHANGELOG.md
LICENSE 


================================================
FILE: .prettierrc
================================================
{
	"printWidth": 100,
	"tabWidth": 2,
	"useTabs": true,
	"semi": true,
	"singleQuote": true,
	"quoteProps": "as-needed",
	"jsxSingleQuote": true,
	"trailingComma": "es5",
	"bracketSpacing": true,
	"bracketSameLine": false,
	"arrowParens": "avoid",
	"endOfLine": "lf",
	"embeddedLanguageFormatting": "auto",
	"singleAttributePerLine": false
}



================================================
FILE: examples/01-kimi-k2-coding-assistant/README.md
================================================
# Kimi K2 Coding Assistant

> 🚀 **Advanced coding companion powered by Moonshot AI's Kimi K2 model with comprehensive development tools**

## Overview

This configuration showcases Cipher as a high-performance coding assistant using Moonshot AI's Kimi K2 model via OpenRouter. 

Kimi K2 is Moonshot AI's latest model that delivers exceptional performance in coding tasks and tool calling. Learn more about Kimi K2 on [GitHub](https://github.com/MoonshotAI/Kimi-K2).

Key advantages of Kimi K2:
- **Superior Code Comprehension**: Deep understanding of programming patterns, frameworks, and best practices
- **Tool Integration**: Native optimization for seamless integration with development tools and APIs
- **Multi-language Expertise**: Strong performance across Python, JavaScript, TypeScript, Go, Rust, and more


## Prerequisites

**Required API Keys:**

1. **OpenRouter API Key** - Get from [openrouter.ai](https://openrouter.ai)
2. **Firecrawl API Key** - Get from [firecrawl.dev](https://firecrawl.dev)

## Setup

### 1. Environment Setup

Set your API keys:
```bash
export OPENROUTER_API_KEY=your_openrouter_api_key
export FIRECRAWL_API_KEY=your_firecrawl_api_key
```

### 2. Launch the Assistant

```bash
# Navigate to the example directory
cd examples/01-kimi-k2-coding-assistant

# Start Cipher with this configuration
cipher --agent ./cipher.yml
```

### 3. Test the Setup

```bash
# Test file system access
cipher> Analyze the structure of my current project

# Test web research
cipher> Research React Server Components best practices

# Test memory
cipher> Remember I prefer TypeScript with strict mode
```

## Configuration

The `cipher.yml` file includes key settings you can customize:

### LLM Model
```yaml
llm:
  provider: openrouter
  model: moonshotai/kimi-k2  # Can change to other OpenRouter models
  maxIterations: 75          # Increase for complex tasks, decrease for speed
```

### File System Access
```yaml
filesystem:
  args:
    - /Users  # Change to your workspace directory (e.g., /home/user/projects)
```

### MCP Servers
The configuration includes:
- **filesystem**: For reading/writing project files
- **firecrawl**: For web research and documentation lookup

You can add more MCP servers by extending the `mcpServers` section in `cipher.yml`.

## Usage Examples

**Code Analysis:**
```bash
cipher> Review the authentication middleware in src/middleware/auth.js
```

**Research-Driven Development:**
```bash
cipher> Research WebSocket vs Server-Sent Events for real-time notifications in React
```

**Architecture Analysis:**
```bash
cipher> Analyze my authentication system and suggest improvements
```

**Performance Optimization:**
```bash
cipher> Analyze React performance bottlenecks and suggest optimizations
```

## Troubleshooting

**Connection Issues:**
```bash
# Verify MCP servers
npx -y @modelcontextprotocol/server-filesystem --help
npx -y firecrawl-mcp --help
```

**Common Solutions:**
- Check API keys are set correctly
- Ensure sufficient credits on OpenRouter and Firecrawl
- Verify internet connectivity for npm packages

---

This setup provides a powerful coding assistant with Kimi K2's advanced reasoning, file system access, and web research capabilities.



================================================
FILE: examples/01-kimi-k2-coding-assistant/cipher.yml
================================================
# Kimi K2 Coding Assistant Configuration
# High-performance coding agent with advanced web search and GitHub integration

# LLM Configuration - Using Kimi K2 via OpenRouter
llm:
  provider: openrouter
  model: moonshotai/kimi-k2  # Kimi K2 model optimized for coding and reasoning
  apiKey: $OPENROUTER_API_KEY
  maxIterations: 75  # Higher iterations for complex coding tasks
  baseURL: https://openrouter.ai/api/v1

# Evaluation LLM for efficient non-thinking tasks
evalLlm:
  provider: openrouter
  model: openai/gpt-4o-mini  # Fast model for evaluations
  apiKey: $OPENROUTER_API_KEY

# System Prompt - Optimized for coding tasks and tool calling
systemPrompt: |
  You are a **Senior Software Engineer and Coding Assistant** powered by Kimi K2, specialized in:
  
  ## Core Expertise
  - **Code Analysis & Architecture**: Deep understanding of design patterns, SOLID principles, and system architecture
  - **Full-Stack Development**: Frontend (React, Vue, Angular), Backend (Node.js, Python, Go, Rust), Database design
  - **DevOps & Infrastructure**: CI/CD, Docker, Kubernetes, cloud platforms (AWS, GCP, Azure)
  - **Code Quality**: Testing strategies, code review, performance optimization, security best practices
  - **Problem Solving**: Debugging complex issues, algorithm optimization, technical decision making
  
  ## Tool Usage Strategy
  - **Always use tools effectively**: Leverage available MCP tools for file operations and web research
  - **File System Operations**: Use filesystem tools to read, analyze, and modify code files
  - **Web Research**: Use Firecrawl to research technologies, documentation, and best practices
  - **Data Operations**: Use filesystem operations for data management and analysis when needed
  
  ## Coding Methodology
  1. **Understand First**: Always analyze existing code structure and requirements thoroughly
  2. **Plan Before Code**: Design solutions with clear architecture and implementation steps
  3. **Quality Focus**: Write clean, maintainable, well-documented code with proper error handling
  4. **Test-Driven**: Consider testing strategies and include relevant tests
  5. **Performance Aware**: Optimize for performance and scalability when appropriate
  6. **Security Conscious**: Implement security best practices and avoid common vulnerabilities
  
  ## Communication Style
  - Provide clear, technical explanations with code examples
  - Suggest multiple approaches when applicable, with pros/cons analysis
  - Include relevant links and documentation references
  - Ask clarifying questions for complex requirements
  - Explain reasoning behind technical decisions
  
  Remember: You have persistent memory across sessions. Learn from past interactions to provide increasingly personalized and effective assistance.

# MCP Servers Configuration - Comprehensive development toolkit
mcpServers:
  # File System Access for code operations
  filesystem:
    type: stdio
    command: npx
    args:
      - -y
      - '@modelcontextprotocol/server-filesystem'
      - /Users  # Adjust path as needed for your development workspace
    env:
      NODE_OPTIONS: '--max-old-space-size=4096'
    timeout: 45000
    connectionMode: strict  # Critical for file operations
  
  
  # Firecrawl for advanced web search and documentation
  firecrawl:
    type: stdio
    command: npx
    args:
      - -y
      - firecrawl-mcp
    env:
      FIRECRAWL_API_KEY: $FIRECRAWL_API_KEY
      FIRECRAWL_RETRY_MAX_ATTEMPTS: '3'
      FIRECRAWL_RETRY_INITIAL_DELAY: '1000'
      FIRECRAWL_RETRY_MAX_DELAY: '10000'
      FIRECRAWL_RETRY_BACKOFF_FACTOR: '2'
    timeout: 60000
    connectionMode: lenient  # Web operations can be fallback
  
  # Note: Additional MCP servers can be added as needed
  # Common alternatives: SQLite (via Python), Git operations (via filesystem), 
  # or other specialized tools based on your development requirements

# Session Management - Optimized for development workflows
sessions:
  maxSessions: 50  # Support multiple project sessions
  sessionTTL: 14400000  # 4 hours for extended coding sessions

# Agent Card for MCP server mode
agentCard:
  name: "Kimi K2 Coding Assistant"
  description: "Advanced coding assistant powered by Kimi K2 with comprehensive development tools"
  version: "1.0.0"
  provider:
    organization: "Cipher Development"
    url: "https://github.com/your-org/cipher"


================================================
FILE: examples/01-kimi-k2-coding-assistant/.env.example
================================================
# Kimi K2 Coding Assistant - Environment Configuration
# Copy this file to .env and fill in your actual API keys

# ==========================================
# REQUIRED API KEYS
# ==========================================

# OpenRouter API Key (Required for this configuration)
# Get your API key from: https://openrouter.ai/keys
# Used for: Kimi K2 model access and GPT-4o-mini evaluations
OPENROUTER_API_KEY=your_openrouter_api_key_here


# Firecrawl API Key (Required)
# Get your API key from: https://firecrawl.dev/app/api-keys
# Used for: Advanced web scraping and documentation research
FIRECRAWL_API_KEY=your_firecrawl_api_key_here

# ==========================================
# ADDITIONAL API PROVIDERS (Optional)
# ==========================================
# At least one API key is required (OpenRouter is used in this config)

# OpenAI API Key (Optional fallback)
# Used as fallback if OpenRouter is unavailable
OPENAI_API_KEY=your_openai_api_key_here

# Anthropic API Key (Optional fallback)
# Used as fallback if OpenRouter is unavailable
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Ollama Configuration (optional - only if using Ollama)
# OLLAMA_BASE_URL=http://localhost:11434/v1

# Optional: OpenAI base URL (for custom endpoints)
# OPENAI_BASE_URL=https://api.openai.com/v1

# ==========================================
# APPLICATION SETTINGS
# ==========================================
NODE_ENV=development
CIPHER_LOG_LEVEL=info
REDACT_SECRETS=true

# ==========================================
# STORAGE CONFIGURATION
# ==========================================
STORAGE_CACHE_TYPE=in-memory
# STORAGE_CACHE_HOST=localhost
# STORAGE_CACHE_PORT=6379
# STORAGE_CACHE_PASSWORD=
# STORAGE_CACHE_DATABASE=0

STORAGE_DATABASE_TYPE=in-memory
# STORAGE_DATABASE_NAME=cipher.db
# STORAGE_DATABASE_PATH=./data

# ==========================================
# MEMORY SEARCH CONFIGURATION
# ==========================================
# Options: knowledge, reflection, both
SEARCH_MEMORY_TYPE=both

# ==========================================
# VECTOR STORE CONFIGURATION
# ==========================================
# Available types: in-memory, qdrant, milvus
VECTOR_STORE_TYPE=in-memory

# Qdrant configuration (only used if VECTOR_STORE_TYPE=qdrant)
# VECTOR_STORE_HOST=localhost
# VECTOR_STORE_PORT=6333
# VECTOR_STORE_URL=http://localhost:6333
# VECTOR_STORE_API_KEY=your-qdrant-api-key

# Milvus configuration (only used if VECTOR_STORE_TYPE=milvus)
# VECTOR_STORE_HOST=localhost
# VECTOR_STORE_PORT=19530
# VECTOR_STORE_URL=your-milvus-cluster-endpoint
# VECTOR_STORE_API_KEY=your-milvus-api-key
# VECTOR_STORE_USERNAME=your-milvus-zilliz-cloud-username
# VECTOR_STORE_PASSWORD=your-milvus-zilliz-cloud-password

# Vector collection settings
VECTOR_STORE_COLLECTION=knowledge_memory
# VECTOR_STORE_COLLECTION_NAME=your_collection_name
VECTOR_STORE_DIMENSION=1536
VECTOR_STORE_DISTANCE=Cosine
VECTOR_STORE_ON_DISK=false
# VECTOR_STORE_MAX_VECTORS=10000

# ==========================================
# REFLECTION MEMORY CONFIGURATION
# ==========================================
REFLECTION_VECTOR_STORE_COLLECTION=reflection_memory
DISABLE_REFLECTION_MEMORY=true

# ==========================================
# MCP CONFIGURATION
# ==========================================
# MCP_GLOBAL_TIMEOUT=30000


# Firecrawl Advanced Configuration (Optional)
FIRECRAWL_RETRY_MAX_ATTEMPTS=3
FIRECRAWL_RETRY_INITIAL_DELAY=1000
FIRECRAWL_RETRY_MAX_DELAY=10000
FIRECRAWL_RETRY_BACKOFF_FACTOR=2
FIRECRAWL_CREDIT_WARNING_THRESHOLD=100
FIRECRAWL_CREDIT_CRITICAL_THRESHOLD=20

# ==========================================
# KNOWLEDGE GRAPH CONFIGURATION (Optional)
# ==========================================
# NEO4J LOCAL CONFIGURATION (for local development)
# Local Neo4j configuration

# KNOWLEDGE_GRAPH_HOST=localhost
# KNOWLEDGE_GRAPH_PORT=7687
# KNOWLEDGE_GRAPH_URI=bolt://localhost:7687
# KNOWLEDGE_GRAPH_USERNAME=neo4j
# KNOWLEDGE_GRAPH_PASSWORD=your-local-password
# KNOWLEDGE_GRAPH_DATABASE=neo4j

# NEO4J CLOUD CONFIGURATION (for cloud deployment)

# KNOWLEDGE_GRAPH_URI=neo4j+s://your-instance.databases.neo4j.io:7687
# KNOWLEDGE_GRAPH_USERNAME=neo4j
# KNOWLEDGE_GRAPH_PASSWORD=your-password
# KNOWLEDGE_GRAPH_DATABASE=neo4j


# ==========================================
# TROUBLESHOOTING
# ==========================================

# If you encounter issues:
# 1. Verify all required API keys are set correctly
# 2. Check API key permissions and quotas
# 3. Ensure Node.js 18+ is installed for MCP servers
# 4. Test individual MCP servers: npx -y @modelcontextprotocol/server-filesystem --help
# 5. Set CIPHER_LOG_LEVEL=debug for detailed logging


================================================
FILE: examples/02-cli-coding-agents/README.md
================================================
# CLI Coding Agents

> 🖥️ **Memory-powered CLI development with Claude Code and Gemini CLI**

## Overview

This configuration demonstrates Cipher as a memory layer for Claude Code and Gemini CLI. Unlike traditional CLI tools that lose context between sessions, this setup provides persistent memory that grows with your development workflow.

**Key Benefits:**
- **Persistent memory** across CLI sessions
- **Project-aware assistance** that remembers your codebase
- **Cross-session learning** that builds on previous interactions

## Prerequisites

**Required API Keys:**

1. **Anthropic API Key** - Get from [console.anthropic.com](https://console.anthropic.com)
2. **OpenAI API Key** - Get from [platform.openai.com](https://platform.openai.com) (required for embeddings)
3. **Google AI API Key** (optional) - Get from [Google AI Studio](https://aistudio.google.com)

## Setup

### 1. Environment Setup

Set your API keys:
```bash
export ANTHROPIC_API_KEY=your_anthropic_api_key
export OPENAI_API_KEY=your_openai_api_key
export GOOGLE_AI_API_KEY=your_google_ai_api_key  # optional
```

### 2. Claude Code Configuration

Create or edit `.mcp.json` in your project root:

```json
{
  "mcpServers": {
    "cipher": {
      "command": "cipher",
      "args": ["--mode", "mcp", "--agent", "./cipher.yml"],
      "env": {
        "ANTHROPIC_API_KEY": "your_anthropic_api_key",
        "OPENAI_API_KEY": "your_openai_api_key"
      }
    }
  }
}
```

### 3. Gemini CLI Configuration

Add to your Gemini CLI `settings.json`:
```json
{
  "mcpServers": {
    "cipher": {
      "command": "cipher",
      "args": ["--mode", "mcp", "--agent", "./cipher.yml"],
      "env": {
        "ANTHROPIC_API_KEY": "your_anthropic_api_key",
        "OPENAI_API_KEY": "your_openai_api_key"
      }
    }
  }
}
```

### 4. Test the Setup

**Claude Code:**
```bash
claude
> Analyze my project structure and remember the patterns
```

**Gemini CLI:**
```bash
gemini "Use cipher to analyze my codebase"
```

## Usage Examples

**Project Analysis:**
```bash
claude> Analyze my project structure and remember the patterns
```

**Cross-Session Learning:**
```bash
# Session 1
claude> Help me debug this React performance issue

# Session 2 (later)
claude> Apply the optimization techniques we discussed yesterday
```

**Code Review:**
```bash
claude> Review my authentication changes using the security patterns you've learned
```

---

This setup provides persistent memory for your CLI development workflow, making your coding agents smarter with every interaction.



================================================
FILE: examples/02-cli-coding-agents/cipher.yml
================================================
# CLI Coding Agents Configuration
# Optimized for Claude Code and Gemini CLI with persistent memory

# LLM Configuration - Using Claude 3.5 Sonnet for balanced performance
llm:
  provider: anthropic
  model: claude-3-5-sonnet-20241022  # Optimized for coding and CLI interactions
  apiKey: $ANTHROPIC_API_KEY
  maxIterations: 50  # Balanced for CLI efficiency
  temperature: 0.1   # Lower temperature for consistent code assistance

# Evaluation LLM for quick non-reasoning tasks
evalLlm:
  provider: anthropic
  model: claude-3-haiku-20240307  # Fast model for evaluations
  apiKey: $ANTHROPIC_API_KEY

# System Prompt - Optimized for CLI development workflows
systemPrompt: |
  You are a **CLI Development Assistant** with persistent memory, specialized in:
  
  ## Core Expertise
  - **Command-line Development**: Terminal workflows, CLI tool integration, shell scripting
  - **Code Analysis**: Project structure analysis, architecture review, code quality assessment
  - **Development Workflows**: Git workflows, CI/CD integration, development automation
  - **Cross-Session Memory**: Learning and applying knowledge from previous interactions
  - **Tool Integration**: Effective use of MCP tools for file operations and project analysis
  
  ## CLI-Specific Capabilities
  - **Project Memory**: Remember project structures, coding patterns, and user preferences
  - **Context Preservation**: Maintain context across CLI sessions and interactions
  - **Efficient Communication**: Provide concise, actionable responses suitable for CLI environments
  - **File Operations**: Seamlessly read, analyze, and navigate project files
  - **Learning System**: Build knowledge from each interaction to improve future assistance
  
  ## CLI Development Methodology
  1. **Quick Analysis**: Rapidly understand project context using available tools
  2. **Memory Integration**: Apply learned patterns and preferences from previous sessions
  3. **Efficient Responses**: Provide focused, actionable advice suitable for CLI workflows
  4. **Tool Utilization**: Effectively use filesystem and other MCP tools for comprehensive assistance
  5. **Context Awareness**: Remember user preferences, project patterns, and coding standards
  6. **Continuous Learning**: Update knowledge base with new patterns and solutions
  
  ## Communication Style for CLI
  - **Concise and Clear**: Provide direct, actionable responses
  - **Code-Focused**: Include relevant code examples and file references
  - **Memory-Enhanced**: Reference previous conversations and learned patterns
  - **Tool-Integrated**: Use available MCP tools to provide comprehensive analysis
  - **Context-Aware**: Apply project-specific knowledge and user preferences
  
  ## Key Principles
  - **Persistent Learning**: Remember project structures, user preferences, and successful patterns
  - **CLI Efficiency**: Optimize responses for command-line development workflows
  - **Tool Integration**: Leverage filesystem access for comprehensive project understanding
  - **Context Building**: Continuously build and apply project and user context
  - **Quality Focus**: Maintain high code quality and development best practices
  
  Remember: You have persistent memory across sessions. Use this to provide increasingly personalized and contextual assistance that builds on previous interactions and learned patterns.

# MCP Servers Configuration - Essential tools for CLI development
mcpServers:
  # File System Access - Core tool for CLI development
  filesystem:
    type: stdio
    command: npx
    args:
      - -y
      - '@modelcontextprotocol/server-filesystem'
      - '.'  # Current directory - CLI tools typically work in project context
    env:
      NODE_OPTIONS: '--max-old-space-size=2048'
    timeout: 30000  # Optimized for CLI responsiveness
    connectionMode: strict  # Secure file operations
  
  # Optional: Add additional tools as needed for your CLI workflow
  # Uncomment and configure based on your specific requirements
  
  # # GitHub integration (if using git-based workflows)
  # github:
  #   type: stdio
  #   command: npx
  #   args:
  #     - -y
  #     - '@modelcontextprotocol/server-github'
  #   env:
  #     GITHUB_PERSONAL_ACCESS_TOKEN: $GITHUB_PERSONAL_ACCESS_TOKEN
  #   timeout: 30000
  #   connectionMode: lenient
  
  # # Web research capabilities (for documentation and best practices)
  # # Note: Requires additional API key configuration
  # web-search:
  #   type: stdio
  #   command: npx
  #   args:
  #     - -y
  #     - 'mcp-server-web-search'
  #   env:
  #     WEB_SEARCH_API_KEY: $WEB_SEARCH_API_KEY
  #   timeout: 15000
  #   connectionMode: lenient

# Session Management - Optimized for CLI development patterns
sessions:
  maxSessions: 25        # Support multiple project sessions
  sessionTTL: 7200000    # 2 hours - typical CLI development session length
  autoSave: true         # Automatically save session state
  persistMemory: true    # Enable persistent memory across sessions

# Memory Configuration - Enhanced for CLI development context
memory:
  enableLearning: true   # Learn from interactions
  contextWindow: 10      # Remember last 10 interactions per session
  projectMemory: true    # Enable project-specific memory
  userPreferences: true  # Remember user coding preferences and patterns

# Agent Card for MCP server mode
agentCard:
  name: "CLI Coding Agent"
  description: "Memory-enhanced CLI development assistant for Claude Code and Gemini CLI"
  version: "1.0.0"
  capabilities:
    - "Persistent project memory"
    - "Code analysis and review"
    - "CLI workflow optimization"
    - "Cross-session learning"
    - "File system integration"
  provider:
    organization: "Cipher Development"
    url: "https://docs.byterover.dev/cipher"

# Performance Tuning for CLI Usage
performance:
  responseTimeout: 30000      # 30 seconds - appropriate for CLI interactions
  maxConcurrentRequests: 3    # Limit concurrent requests for CLI efficiency
  cacheEnabled: true          # Enable caching for faster repeated requests
  
# Development Environment Integration
development:
  gitIntegration: true        # Enable git-aware features
  projectDetection: true      # Automatically detect project type and structure
  codeStyleLearning: true     # Learn and apply user's coding style preferences


================================================
FILE: examples/02-cli-coding-agents/.env.example
================================================
# Kimi K2 Coding Assistant - Environment Configuration
# Copy this file to .env and fill in your actual API keys

# ==========================================
# REQUIRED API KEYS
# ==========================================

# OpenRouter API Key (Required for this configuration)
# Get your API key from: https://openrouter.ai/keys
# Used for: Kimi K2 model access and GPT-4o-mini evaluations
OPENROUTER_API_KEY=your_openrouter_api_key_here


# Firecrawl API Key (Required)
# Get your API key from: https://firecrawl.dev/app/api-keys
# Used for: Advanced web scraping and documentation research
FIRECRAWL_API_KEY=your_firecrawl_api_key_here

# ==========================================
# ADDITIONAL API PROVIDERS (Optional)
# ==========================================
# At least one API key is required (OpenRouter is used in this config)

# OpenAI API Key (Optional fallback)
# Used as fallback if OpenRouter is unavailable
OPENAI_API_KEY=your_openai_api_key_here

# Anthropic API Key (Optional fallback)
# Used as fallback if OpenRouter is unavailable
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Ollama Configuration (optional - only if using Ollama)
# OLLAMA_BASE_URL=http://localhost:11434/v1

# Optional: OpenAI base URL (for custom endpoints)
# OPENAI_BASE_URL=https://api.openai.com/v1

# ==========================================
# APPLICATION SETTINGS
# ==========================================
NODE_ENV=development
CIPHER_LOG_LEVEL=info
REDACT_SECRETS=true

# ==========================================
# STORAGE CONFIGURATION
# ==========================================
STORAGE_CACHE_TYPE=in-memory
# STORAGE_CACHE_HOST=localhost
# STORAGE_CACHE_PORT=6379
# STORAGE_CACHE_PASSWORD=
# STORAGE_CACHE_DATABASE=0

STORAGE_DATABASE_TYPE=in-memory
# STORAGE_DATABASE_NAME=cipher.db
# STORAGE_DATABASE_PATH=./data

# ==========================================
# MEMORY SEARCH CONFIGURATION
# ==========================================
# Options: knowledge, reflection, both
SEARCH_MEMORY_TYPE=both

# ==========================================
# VECTOR STORE CONFIGURATION
# ==========================================
# Available types: in-memory, qdrant, milvus
VECTOR_STORE_TYPE=in-memory

# Qdrant configuration (only used if VECTOR_STORE_TYPE=qdrant)
# VECTOR_STORE_HOST=localhost
# VECTOR_STORE_PORT=6333
# VECTOR_STORE_URL=http://localhost:6333
# VECTOR_STORE_API_KEY=your-qdrant-api-key

# Milvus configuration (only used if VECTOR_STORE_TYPE=milvus)
# VECTOR_STORE_HOST=localhost
# VECTOR_STORE_PORT=19530
# VECTOR_STORE_URL=your-milvus-cluster-endpoint
# VECTOR_STORE_API_KEY=your-milvus-api-key
# VECTOR_STORE_USERNAME=your-milvus-zilliz-cloud-username
# VECTOR_STORE_PASSWORD=your-milvus-zilliz-cloud-password

# Vector collection settings
VECTOR_STORE_COLLECTION=knowledge_memory
# VECTOR_STORE_COLLECTION_NAME=your_collection_name
VECTOR_STORE_DIMENSION=1536
VECTOR_STORE_DISTANCE=Cosine
VECTOR_STORE_ON_DISK=false
# VECTOR_STORE_MAX_VECTORS=10000

# ==========================================
# REFLECTION MEMORY CONFIGURATION
# ==========================================
REFLECTION_VECTOR_STORE_COLLECTION=reflection_memory
DISABLE_REFLECTION_MEMORY=true

# ==========================================
# MCP CONFIGURATION
# ==========================================
# MCP_GLOBAL_TIMEOUT=30000

# ==========================================
# KNOWLEDGE GRAPH CONFIGURATION (Optional)
# ==========================================
# NEO4J LOCAL CONFIGURATION (for local development)
# Local Neo4j configuration

# KNOWLEDGE_GRAPH_HOST=localhost
# KNOWLEDGE_GRAPH_PORT=7687
# KNOWLEDGE_GRAPH_URI=bolt://localhost:7687
# KNOWLEDGE_GRAPH_USERNAME=neo4j
# KNOWLEDGE_GRAPH_PASSWORD=your-local-password
# KNOWLEDGE_GRAPH_DATABASE=neo4j

# NEO4J CLOUD CONFIGURATION (for cloud deployment)

# KNOWLEDGE_GRAPH_URI=neo4j+s://your-instance.databases.neo4j.io:7687
# KNOWLEDGE_GRAPH_USERNAME=neo4j
# KNOWLEDGE_GRAPH_PASSWORD=your-password
# KNOWLEDGE_GRAPH_DATABASE=neo4j


# ==========================================
# TROUBLESHOOTING
# ==========================================

# If you encounter issues:
# 1. Verify all required API keys are set correctly
# 2. Check API key permissions and quotas
# 3. Ensure Node.js 18+ is installed for MCP servers
# 4. Test individual MCP servers: npx -y @modelcontextprotocol/server-filesystem --help
# 5. Set CIPHER_LOG_LEVEL=debug for detailed logging



================================================
FILE: examples/03-strict-memory-layer/README.md
================================================
# Strict Memory Layer (Cipher)

> 🧠 **Dedicated memory service for external agents: fast storage & retrieval**

## Quick Start

1. **Set API Keys:**
```bash
export OPENAI_API_KEY=your_openai_api_key
export ANTHROPIC_API_KEY=your_anthropic_api_key
```

2. **Launch Cipher as MCP Server:**
```bash
cipher --mode mcp --agent ./examples/03-strict-memory-layer/cipher.yml
```

3. **MCP Client Config Example**
(based on your actual mcp.json)
```json
{
  "mcpServers": {
    "cipher": {
      "command": "cipher",
      "args": [
        "--mode", "mcp",
        "--agent", "./examples/03-strict-memory-layer/cipher.yml"
      ],
      "env": {
        "MCP_SERVER_MODE": "default",
        "OPENAI_API_KEY": "sk-...",
        "VECTOR_STORE_TYPE": "milvus",
        "VECTOR_STORE_URL": "...",
        "VECTOR_STORE_API_KEY": "...",
        "VECTOR_STORE_USERNAME": "...",
        "VECTOR_STORE_PASSWORD": "...",
        "VECTOR_STORE_COLLECTION": "knowledge_memory",
        "REFLECTION_VECTOR_STORE_COLLECTION": "reflection_memory",
        "DISABLE_REFLECTION_MEMORY": "false"
      }
    }
  }
}
```

## Usage
- **Only one tool:** `ask_cipher` (handles both storage & retrieval)


## Features
- Fast responses (storage runs in background)
- No explicit memory tool calls needed
- Structured, comprehensive retrieval results

## Troubleshooting
- Ensure API keys are set
- Use MCP_SERVER_MODE=default for strict memory layer
- Only `ask_cipher` is available in this mode

---
This setup provides a pure memory layer for agents, optimized for fast, reliable storage and retrieval.



================================================
FILE: examples/03-strict-memory-layer/cipher.yml
================================================
# Strict Memory Layer Configuration
# Pure memory service for external agents focused on retrieval and storage

# LLM Configuration - Using Claude 3.5 Sonnet for reliable memory operations
llm:
  provider: openai
  model: gpt-4o-mini  # Optimized for structured responses and memory tasks
  apiKey: $OPENAI_API_KEY


# System Prompt - Focused memory layer operations
systemPrompt: |
  You are a **MEMORY LAYER** focused ONLY on these two tasks:
  
  **RETRIEVAL OPERATIONS:**
  - Primarily use cipher_search_memory to retrieve information, if user input contains reasoning steps, use cipher_search_reasoning_patterns
  - Include comprehensive details of all retrieved information
  - Organize information clearly with proper categorization
  
  **STORAGE OPERATIONS:**  
  - Don't run any storage tool such as cipher_extract_and_operate_memory becaue these tools are run automatically in the background
  - Respond as quickly as possible to optimize latency for external clients
  - Confirm what will be stored in a concise manner or give a concise summary of the stored information

mcpServers: {}


================================================
FILE: memAgent/cipher.yml
================================================
# describes the mcp servers to use
mcpServers:
  filesystem:
    type: stdio
    command: npx
    args:
      - -y
      - '@modelcontextprotocol/server-filesystem'
      - .

# describes the llm configuration
# llm:
#   # OpenRouter configuration - Updated to use model that supports tool calling
#   provider: openrouter
#   model: o4-mini
#   apiKey: $OPENROUTER_API_KEY
#   maxIterations: 50

# # System prompt
# systemPrompt: "You are a helpful AI assistant with memory capabilities. Please confirm you're working with OpenRouter API."

# Active LLM configuration
llm:
  # OpenAI configuration - Updated to use model that supports tool calling
  provider: openai
  model: gpt-4.1-mini
  apiKey: $OPENAI_API_KEY
  maxIterations: 50
  # provider: anthropic
  # model: claude-3-5-haiku-20241022
  # apiKey: $ANTHROPIC_API_KEY
  # maxIterations: 50
  # provider: openrouter
  # model: google/gemini-2.5-pro
  # apiKey: $OPENROUTER_API_KEY
  # maxIterations: 50

# Evaluation LLM configuration (non-thinking model for evaluation step)
# evalLlm:
#   provider: anthropic
#   model: claude-3-7-sonnet-20250219
#   apiKey: $ANTHROPIC_API_KEY

# Alternative Ollama configuration (commented out)
# llm:
#   provider: ollama
#   model: qwen3:32b      # Use the model you downloaded
#   maxIterations: 50
#   baseURL: $OLLAMA_BASE_URL

# System prompt - User customizable
# This prompt will be combined with built-in tool usage instructions
systemPrompt: |
  You are an AI programming assistant focused on coding and reasoning tasks. You excel at:
  - Writing clean, efficient code
  - Debugging and problem-solving
  - Code review and optimization
  - Explaining complex technical concepts
  - Reasoning through programming challenges




================================================
FILE: src/index.ts
================================================
// Main entry point for @byterover/cipher package
export * from './core/index.js';



================================================
FILE: src/app/index.ts
================================================
#!/usr/bin/env node
import { env } from '@core/env.js';
import { Command } from 'commander';
import pkg from '../../package.json' with { type: 'json' };
import { existsSync } from 'fs';
import { DEFAULT_CONFIG_PATH, logger, MemAgent } from '@core/index.js';
import { resolveConfigPath } from '@core/utils/path.js';
import { handleCliOptionsError, validateCliOptions } from './cli/utils/options.js';
import { loadAgentConfig } from '../core/brain/memAgent/loader.js';
import { startInteractiveCli, startHeadlessCli, startMcpMode } from './cli/cli.js';
import { ApiServer } from './api/server.js';
import path from 'path';
import os from 'os';
import { fileURLToPath } from 'url';

// Helper function to resolve .env file path
function resolveEnvPath(): string {
	// Try current working directory first
	if (existsSync('.env')) {
		return '.env';
	}

	// Try relative to project root (where package.json is located)
	const currentFileUrl = import.meta.url;
	const currentFilePath = fileURLToPath(currentFileUrl);
	const projectRoot = path.resolve(path.dirname(currentFilePath), '../..');
	const envPath = path.resolve(projectRoot, '.env');

	return envPath;
}

// ===== EARLY MCP MODE DETECTION AND LOG REDIRECTION =====
// Following Saiki's best practices to prevent stdio interference
// This must happen BEFORE any logging operations
const detectAndRedirectMcpLogs = () => {
	const args = process.argv;
	const isMcpMode = args.includes('--mode') && args[args.indexOf('--mode') + 1] === 'mcp';

	if (isMcpMode) {
		// Redirect logs immediately to prevent stdout contamination
		const logFile = process.env.CIPHER_MCP_LOG_FILE || path.join(os.tmpdir(), 'cipher-mcp.log');
		logger.redirectToFile(logFile);

		// Use stderr for critical startup messages only
		process.stderr.write(`[CIPHER-MCP] Log redirection activated: ${logFile}\n`);
	}
};

// Apply early redirection before any other operations
detectAndRedirectMcpLogs();

const program = new Command();

program
	.name('cipher')
	.description('Agent that can help to remember your vibe coding agent knowledge and reinforce it')
	.version(pkg.version, '-v, --version', 'output the current version')
	.argument(
		'[prompt...]',
		'Natural-language prompt to run once. If not passed, cipher will start in interactive mode'
	)
	.option('--no-verbose', 'Disable verbose output')
	.option('-a, --agent <path>', 'Path to agent config file', DEFAULT_CONFIG_PATH)
	.option('-s, --strict', 'Require all MCP server connections to succeed')
	.option('--new-session [sessionId]', 'Start with a new session (optionally specify session ID)')
	.option('--mode <mode>', 'The application mode for cipher memory agent - cli | mcp | api', 'cli')
	.option('--port <port>', 'Port for API server (only used with --mode api)', '3000')
	.option('--host <host>', 'Host for API server (only used with --mode api)', 'localhost')
	.option('--mcp-transport-type <type>', 'MCP transport type (stdio, sse, http)', 'stdio')
	.option('--mcp-port <port>', 'Port for MCP server (only used with sse, http)', '3000');

program
	.description(
		'Cipher CLI allows you to interact with cipher memory agent.\n' +
			'Run cipher in interactive mode with `cipher` or run a one-shot prompt with `cipher <prompt>`\n\n' +
			'Available modes:\n' +
			'  - cli: Interactive command-line interface (default)\n' +
			'  - mcp: Model Context Protocol server mode\n' +
			'  - api: REST API server mode\n\n' +
			'Options:\n' +
			'  -s, --strict: Require all MCP server connections to succeed (overrides individual server connection modes)\n' +
			'  --new-session [sessionId]: Start with a new session (optionally specify session ID)\n' +
			'  --port <port>: Port for API server (default: 3000, only used with --mode api)\n' +
			'  --host <host>: Host for API server (default: localhost, only used with --mode api)'
	)
	/**
	 * Main CLI action handler for the Cipher agent.
	 *
	 * Strict Mode Behavior:
	 * When the --strict flag is used, all MCP server connectionMode properties
	 * are overridden to 'strict', requiring all server connections to succeed.
	 * This takes precedence over individual server configuration settings.
	 *
	 * If any MCP server fails to connect in strict mode, the application will
	 * exit with an error. Without strict mode, failed connections are logged
	 * as warnings but don't prevent startup.
	 *
	 * New Session Behavior:
	 * When the --new-session flag is used, a new conversation session is created
	 * and made available for the CLI interaction. The session ID parameter is optional:
	 * - --new-session: Creates a session with auto-generated UUID
	 * - --new-session mySessionId: Creates a session with the specified ID
	 *
	 * Created sessions persist for the duration of the CLI session and follow
	 * the agent's session management lifecycle and TTL settings.
	 *
	 * One-Shot Mode Behavior:
	 * When prompt arguments are provided, cipher runs in headless mode:
	 * - Executes the prompt once and exits
	 * - Works with all existing flags and options
	 * - Example: cipher "help me debug this error"
	 */
	.action(async (prompt: string[] = []) => {
		// Process prompt arguments for one-shot mode
		const headlessInput = prompt.join(' ') || undefined;

		// Parse CLI options first
		const opts = program.opts();

		// Check for .env file with proper path resolution (skip in MCP mode)
		if (opts.mode !== 'mcp') {
			const envPath = resolveEnvPath();
			if (!existsSync(envPath)) {
				const errorMsg = `No .env file found at ${envPath}, copy .env.example to .env and fill in the values`;
				logger.error(errorMsg);
				process.exit(1);
			}
		}

		// Check if at least one API key is provided or Ollama is configured
		if (
			!env.OPENAI_API_KEY &&
			!env.ANTHROPIC_API_KEY &&
			!env.OPENROUTER_API_KEY &&
			!env.OLLAMA_BASE_URL
		) {
			// Use MCP-safe error reporting
			const errorMsg =
				'No API key or Ollama configuration found, please set at least one of OPENAI_API_KEY, ANTHROPIC_API_KEY, OPENROUTER_API_KEY, or OLLAMA_BASE_URL in your environment variables \nAvailable providers: OpenAI, Anthropic, OpenRouter, Ollama';

			if (opts.mode === 'mcp') {
				process.stderr.write(`[CIPHER-MCP] ERROR: ${errorMsg}\n`);
			} else {
				logger.error(errorMsg);
			}
			process.exit(1);
		}

		// validate cli options
		try {
			validateCliOptions(opts);
		} catch (err) {
			handleCliOptionsError(err);
		}

		// load agent config
		let agent: MemAgent;
		try {
			// Resolve the config path based on the provided agent option
			const configPath = resolveConfigPath(opts.agent);
			logger.info(`Loading agent config from ${configPath}`);

			// Check if config file exists
			if (!existsSync(configPath)) {
				const configErrorMsg = `Config file not found at ${configPath}`;
				const helpMsg =
					opts.agent === DEFAULT_CONFIG_PATH
						? 'Please ensure the config file exists or create one based on memAgent/cipher.yml'
						: `Please ensure the specified config file exists at ${configPath}`;

				if (opts.mode === 'mcp') {
					process.stderr.write(`[CIPHER-MCP] ERROR: ${configErrorMsg}\n[CIPHER-MCP] ${helpMsg}\n`);
				} else {
					logger.error(configErrorMsg);
					logger.error(helpMsg);
				}
				process.exit(1);
			}

			const cfg = await loadAgentConfig(configPath);

			// Apply --strict flag to all MCP server configs if specified
			if (opts.strict && cfg.mcpServers) {
				logger.info('Applying strict mode to all MCP server connections');
				for (const [serverName, serverConfig] of Object.entries(cfg.mcpServers)) {
					logger.debug(`Setting connection mode to strict for server: ${serverName}`);
					serverConfig.connectionMode = 'strict';
				}
			}

			agent = new MemAgent(cfg);

			// Start the agent (initialize async services)
			await agent.start();

			// Handle --new-session flag
			if (opts.newSession !== undefined) {
				try {
					// Use provided session ID or generate a random one
					const sessionId =
						typeof opts.newSession === 'string' && opts.newSession ? opts.newSession : undefined; // Let agent generate random ID

					const session = await agent.createSession(sessionId);

					logger.info(`Created and loaded new session: ${session.id}`, null, 'green');
				} catch (err) {
					logger.error(
						`Failed to create new session: ${err instanceof Error ? err.message : String(err)}`
					);
					process.exit(1);
				}
			}

			// Print OpenAI embedder dimension after agent is started
			if (agent.services && agent.services.embeddingManager) {
				agent.services.embeddingManager.getEmbedder('default');
			} else {
				console.log('No embeddingManager found in agent.services');
			}
		} catch (err) {
			const errorMessage = err instanceof Error ? err.message : String(err);
			const configPath = resolveConfigPath(opts.agent);

			if (opts.mode === 'mcp') {
				// Use stderr for MCP mode errors
				if (opts.strict) {
					process.stderr.write(
						`[CIPHER-MCP] ERROR: Failed to load agent config from ${configPath} (strict mode enabled): ${errorMessage}\n`
					);
					process.stderr.write(
						`[CIPHER-MCP] Strict mode requires all MCP server connections to succeed. Check your MCP server configurations or run without --strict flag.\n`
					);
				} else {
					process.stderr.write(
						`[CIPHER-MCP] ERROR: Failed to load agent config from ${configPath}: ${errorMessage}\n`
					);
				}
			} else {
				// Use logger for non-MCP modes
				if (opts.strict) {
					logger.error(
						`Failed to load agent config from ${configPath} (strict mode enabled):`,
						errorMessage
					);
					logger.error(
						'Strict mode requires all MCP server connections to succeed. Check your MCP server configurations or run without --strict flag to allow lenient connections.'
					);
				} else {
					logger.error(`Failed to load agent config from ${configPath}:`, errorMessage);
				}
			}
			process.exit(1);
		}

		// Handle one-shot mode if prompt arguments were provided
		if (headlessInput) {
			try {
				await startHeadlessCli(agent, headlessInput);
				process.exit(0);
			} catch (err) {
				const errorMessage = err instanceof Error ? err.message : String(err);
				if (opts.mode === 'mcp') {
					process.stderr.write(
						`[CIPHER-MCP] ERROR: Failed to execute headless command: ${errorMessage}\n`
					);
				} else {
					logger.error(`Failed to execute headless command: ${errorMessage}`);
				}
				process.exit(1);
			}
		}

		/**
		 * Start the API server mode
		 */
		async function startApiMode(agent: MemAgent, options: any): Promise<void> {
			const port = parseInt(options.port) || 3000;
			const host = options.host || 'localhost';
			const mcpTransportType = options.mcpTransportType || undefined; // Pass through from CLI options
			const mcpPort = options.mcpPort ? parseInt(options.mcpPort, 10) : undefined; // Pass through from CLI options

			logger.info(`Starting API server on ${host}:${port}`, null, 'green');

			const apiServer = new ApiServer(agent, {
				port,
				host,
				corsOrigins: ['http://localhost:3000', 'http://localhost:3001'], // Default CORS origins
				rateLimitWindowMs: 15 * 60 * 1000, // 15 minutes
				rateLimitMaxRequests: 100, // 100 requests per window
				...(mcpTransportType && { mcpTransportType }), // Only include if defined
				...(mcpPort !== undefined && { mcpPort }), // Only include if defined
			});

			try {
				await apiServer.start();
				logger.info(`API server is running and ready to accept requests`, null, 'green');
			} catch (error) {
				const errorMsg = error instanceof Error ? error.message : String(error);
				if (opts.mode === 'mcp') {
					process.stderr.write(`[CIPHER-MCP] ERROR: Failed to start API server: ${errorMsg}\n`);
				} else {
					logger.error(`Failed to start API server: ${errorMsg}`);
				}
				process.exit(1);
			}
		}

		// After agent is started and before entering CLI loop, add:
		if (opts.mode === 'cli') {
			const eventManager = agent.services?.eventManager;
			if (eventManager) {
				const handleExit = async () => {
					try {
						// Emit a session-ended event for the current session
						const sessionId = agent.getCurrentActiveSessionId() || 'default';
						eventManager.emitSessionEvent(sessionId, 'session:expired', {
							sessionId,
							timestamp: Date.now(),
						});
						// Give time for event to be persisted
						await new Promise(res => setTimeout(res, 200));
					} catch {
						// Ignore errors during shutdown
					}
					process.exit(0);
				};
				process.on('SIGINT', handleExit);
				process.on('SIGTERM', handleExit);
			}
		}

		// ——— Dispatch based on --mode ———
		switch (opts.mode) {
			case 'cli':
				await startInteractiveCli(agent);
				break;
			case 'mcp':
				await startMcpMode(agent);
				break;
			case 'api':
				await startApiMode(agent, opts);
				break;
			default: {
				const errorMsg = `Unknown mode '${opts.mode}'. Use cli, mcp, or api.`;
				if (opts.mode === 'mcp') {
					process.stderr.write(`[CIPHER-MCP] ERROR: ${errorMsg}\n`);
				} else {
					logger.error(errorMsg);
				}
				process.exit(1);
			}
		}
	});

program.parseAsync(process.argv);



================================================
FILE: src/app/api/server.ts
================================================
import express, { Application, Request, Response, NextFunction } from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import { MemAgent } from '@core/brain/memAgent/index.js';
import { logger } from '@core/logger/index.js';
import { errorResponse, ERROR_CODES } from './utils/response.js';
import {
	requestIdMiddleware,
	requestLoggingMiddleware,
	errorLoggingMiddleware,
} from './middleware/logging.js';
import { Server as McpServer } from '@modelcontextprotocol/sdk/server/index.js';
import { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';
import { initializeMcpServer, initializeAgentCardResource } from '@app/mcp/mcp_handler.js';

// Import route handlers
import { createMessageRoutes } from './routes/message.js';
import { createSessionRoutes } from './routes/session.js';
import { createMcpRoutes } from './routes/mcp.js';
import { createConfigRoutes } from './routes/config.js';
import { createLlmRoutes } from './routes/llm.js';

export interface ApiServerConfig {
	port: number;
	host?: string;
	corsOrigins?: string[];
	rateLimitWindowMs?: number;
	rateLimitMaxRequests?: number;
	mcpTransportType?: 'stdio' | 'sse' | 'http';
	mcpPort?: number;
}

export class ApiServer {
	private app: Application;
	private agent: MemAgent;
	private config: ApiServerConfig;
	private mcpServer?: McpServer;
	private activeMcpSseTransports: Map<string, SSEServerTransport> = new Map();

	constructor(agent: MemAgent, config: ApiServerConfig) {
		this.agent = agent;
		this.config = config;
		this.app = express();
		this.setupMiddleware();
		this.setupRoutes();
		this.setupErrorHandling();

		// Note: MCP setup is now handled in start() method to properly handle async operations
	}

	private async setupMcpServer(
		transportType: 'stdio' | 'sse' | 'http',
		port?: number
	): Promise<void> {
		logger.info(`[API Server] Setting up MCP server with transport type: ${transportType}`);
		try {
			// Initialize agent card data
			const agentCard = this.agent.getEffectiveConfig().agentCard;
			const agentCardInput = agentCard
				? Object.fromEntries(Object.entries(agentCard).filter(([, value]) => value !== undefined))
				: {};
			const agentCardData = initializeAgentCardResource(agentCardInput);

			// Check MCP_SERVER_MODE environment variable to determine server type
			const mcpServerMode = process.env.MCP_SERVER_MODE || 'default';
			logger.info(`[API Server] MCP server mode: ${mcpServerMode}`);

			// Load aggregator configuration if needed
			let aggregatorConfig;
			if (mcpServerMode === 'aggregator') {
				aggregatorConfig = await this.loadAggregatorConfig();
			}

			// Initialize MCP server instance with appropriate mode
			this.mcpServer = await initializeMcpServer(
				this.agent,
				agentCardData,
				mcpServerMode as 'default' | 'aggregator',
				aggregatorConfig
			);

			if (transportType === 'sse') {
				this.setupMcpSseRoutes(); // Renamed for clarity as it sets up both GET and POST
			} else if (transportType === 'stdio') {
				// For stdio, we need to explicitly connect the server to a StdioServerTransport
				// This usually means the process runs as a standalone MCP server, not integrated into Express
				// This case is typically handled by the CLI directly, not via ApiServer
				logger.warn(
					`[API Server] MCP transport type 'stdio' is typically handled by the CLI directly and not integrated into the API server.`
				);
				// If a StdioServerTransport needs to be managed by ApiServer, its lifecycle would be handled here.
				// For now, we assume 'stdio' mode implies a different execution path.
			} else {
				logger.warn(
					`[API Server] MCP transport type '${transportType}' not fully implemented for API server integration yet.`
				);
			}
		} catch (error) {
			logger.error(
				`[API Server] Failed to set up MCP server: ${error instanceof Error ? error.message : String(error)}`
			);
		}
	}

	/**
	 * Load aggregator configuration from environment variables
	 * Aggregator mode now uses agent's unifiedToolManager which automatically includes MCP servers from cipher.yml
	 */
	private async loadAggregatorConfig(): Promise<any> {
		const defaultConfig = {
			type: 'aggregator' as const,
			servers: {}, // No longer needed - using unifiedToolManager
			conflictResolution: (process.env.AGGREGATOR_CONFLICT_RESOLUTION as any) || 'prefix',
			autoDiscovery: false,
			timeout: parseInt(process.env.AGGREGATOR_TIMEOUT || '60000'),
			connectionMode: 'lenient' as const,
		};

		logger.info('[API Server] Using aggregator configuration with env vars', {
			conflictResolution: defaultConfig.conflictResolution,
			timeout: defaultConfig.timeout,
		});
		return defaultConfig;
	}

	private setupMcpSseRoutes(): void {
		if (!this.mcpServer) {
			logger.error('[API Server] MCP Server not initialized for SSE route setup.');
			return;
		}

		// Handle SSE GET endpoint (for client to establish SSE connection)
		this.app.get('/mcp/sse', (req: Request, res: Response) => {
			logger.info('[API Server] New MCP SSE client attempting connection.');
			logger.debug('[API Server] SSE Request Headers:', req.headers);
			logger.debug('[API Server] SSE Request URL:', req.url);

			// Create SSE transport instance. The '/mcp' is the endpoint where client will POST messages.
			// The SSEServerTransport will handle setting the SSE headers itself
			const sseTransport = new SSEServerTransport('/mcp', res);
			logger.debug('[API Server] SSEServerTransport created with endpoint /mcp');

			// Connect MCP server to this SSE transport (this will call sseTransport.start() and set headers)
			this.mcpServer?.connect(sseTransport);
			logger.debug('[API Server] MCP server connected to SSE transport');

			// Store the transport keyed by its session ID
			this.activeMcpSseTransports.set(sseTransport.sessionId, sseTransport);
			logger.info(
				`[API Server] MCP SSE client connected with session ID: ${sseTransport.sessionId}`
			);
			logger.debug(`[API Server] Active SSE transports count: ${this.activeMcpSseTransports.size}`);

			// Handle client disconnect
			req.on('close', () => {
				logger.info(
					`[API Server] MCP SSE client with session ID ${sseTransport.sessionId} disconnected.`
				);
				logger.debug('[API Server] Cleaning up SSE transport and connection');
				sseTransport.close(); // Close the transport when client disconnects
				this.activeMcpSseTransports.delete(sseTransport.sessionId); // Remove from active transports
				logger.debug(
					`[API Server] Active SSE transports count after cleanup: ${this.activeMcpSseTransports.size}`
				);
			});
		});

		// Handle POST requests for MCP messages over HTTP (part of Streamable HTTP)
		this.app.post('/mcp', async (req: Request, res: Response) => {
			logger.debug('[API Server] MCP POST request received');
			logger.debug('[API Server] POST Request Headers:', req.headers);
			logger.debug('[API Server] POST Request Body:', req.body);
			logger.debug('[API Server] POST Request Query:', req.query);

			if (!this.mcpServer) {
				logger.error('[API Server] MCP Server not initialized for POST route.');
				return errorResponse(res, ERROR_CODES.INTERNAL_ERROR, 'MCP Server not ready', 500);
			}

			// The SSEServerTransport expects the session ID to be part of the endpoint it provides,
			// typically as a query parameter in the POST URL (e.g., /mcp?sessionId=...).
			// We need to retrieve the correct transport instance based on this.
			const sessionId = req.query.sessionId as string;

			if (!sessionId) {
				logger.error('[API Server] MCP POST request received without session ID.');
				logger.debug('[API Server] Available query parameters:', Object.keys(req.query));
				return errorResponse(
					res,
					ERROR_CODES.BAD_REQUEST,
					'Missing sessionId in query parameters',
					400
				);
			}

			logger.debug(`[API Server] Looking for SSE transport with session ID: ${sessionId}`);
			logger.debug(
				`[API Server] Available session IDs: ${Array.from(this.activeMcpSseTransports.keys()).join(', ')}`
			);

			const sseTransport = this.activeMcpSseTransports.get(sessionId);

			if (!sseTransport) {
				logger.error(`[API Server] No active MCP SSE transport found for session ID: ${sessionId}`);
				return errorResponse(
					res,
					ERROR_CODES.NOT_FOUND,
					`No active session found for ID: ${sessionId}`,
					404
				);
			}

			try {
				logger.debug(
					`[API Server] Delegating POST message to SSE transport for session: ${sessionId}`
				);
				// Delegate handling of the POST message to the specific SSEServerTransport instance
				// Pass req.body as the third parameter since Express has already parsed it
				await sseTransport.handlePostMessage(req, res, req.body);
				logger.debug(`[API Server] POST message handled successfully for session: ${sessionId}`);
			} catch (error) {
				logger.error(
					`[API Server] Error handling MCP POST request for session ${sessionId}: ${error instanceof Error ? error.message : String(error)}`
				);
				logger.debug(
					`[API Server] POST error stack:`,
					error instanceof Error ? error.stack : 'No stack available'
				);
				errorResponse(
					res,
					ERROR_CODES.INTERNAL_ERROR,
					'Error processing MCP request',
					500,
					error instanceof Error ? error.stack : undefined
				);
			}
		});

		logger.info(
			'[API Server] MCP SSE (GET /mcp/sse) and POST (/mcp?sessionId=...) routes registered.'
		);
	}

	private setupMiddleware(): void {
		// Security middleware
		this.app.use(
			helmet({
				contentSecurityPolicy: false, // Disable CSP for API
				crossOriginEmbedderPolicy: false,
			})
		);

		// CORS configuration
		this.app.use(
			cors({
				origin: this.config.corsOrigins || ['http://localhost:3000'],
				methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
				allowedHeaders: ['Content-Type', 'Authorization', 'X-Request-ID'],
				credentials: true,
			})
		);

		// Rate limiting
		const limiter = rateLimit({
			windowMs: this.config.rateLimitWindowMs || 15 * 60 * 1000, // 15 minutes
			max: this.config.rateLimitMaxRequests || 100, // limit each IP to 100 requests per windowMs
			message: {
				success: false,
				error: {
					code: ERROR_CODES.RATE_LIMIT_EXCEEDED,
					message: 'Too many requests from this IP, please try again later.',
				},
			},
			standardHeaders: true,
			legacyHeaders: false,
		});
		this.app.use('/api/', limiter);

		// Body parsing middleware
		this.app.use(express.json({ limit: '10mb' })); // Support for image data
		this.app.use(express.urlencoded({ extended: true }));

		// Custom middleware
		this.app.use(requestIdMiddleware);
		this.app.use(requestLoggingMiddleware);
	}

	private setupRoutes(): void {
		// Health check endpoint
		this.app.get('/health', (req: Request, res: Response) => {
			res.json({
				status: 'healthy',
				timestamp: new Date().toISOString(),
				uptime: process.uptime(),
				version: process.env.npm_package_version || 'unknown',
			});
		});

		// API routes
		this.app.use('/api/message', createMessageRoutes(this.agent));
		this.app.use('/api/sessions', createSessionRoutes(this.agent));
		this.app.use('/api/mcp', createMcpRoutes(this.agent));
		this.app.use('/api/llm', createLlmRoutes(this.agent));
		this.app.use('/api/config', createConfigRoutes(this.agent));

		// Note: 404 handler moved to setup404Handler() and called after MCP routes setup
	}

	private setup404Handler(): void {
		// 404 handler for unknown routes - must be registered AFTER all other routes
		this.app.use((req: Request, res: Response) => {
			errorResponse(
				res,
				ERROR_CODES.NOT_FOUND,
				`Route ${req.method} ${req.originalUrl} not found`,
				404,
				undefined,
				req.requestId
			);
		});
	}

	private setupErrorHandling(): void {
		// Error logging middleware
		this.app.use(errorLoggingMiddleware);

		// Global error handler
		this.app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
			// If response already sent, delegate to default Express error handler
			if (res.headersSent) {
				return next(err);
			}

			// Determine error type and status code
			let statusCode = 500;
			let errorCode: string = ERROR_CODES.INTERNAL_ERROR;

			if (err.name === 'ValidationError') {
				statusCode = 400;
				errorCode = ERROR_CODES.VALIDATION_ERROR;
			} else if (err.name === 'UnauthorizedError') {
				statusCode = 401;
				errorCode = ERROR_CODES.UNAUTHORIZED;
			}

			errorResponse(
				res,
				errorCode,
				err.message || 'An unexpected error occurred',
				statusCode,
				process.env.NODE_ENV === 'development' ? err.stack : undefined,
				req.requestId
			);
		});
	}

	public async start(): Promise<void> {
		// Set up MCP server BEFORE starting HTTP server if transport type is provided
		if (this.config.mcpTransportType) {
			try {
				await this.setupMcpServer(this.config.mcpTransportType, this.config.mcpPort);
				logger.info(`[API Server] MCP server setup completed successfully`);
			} catch (error) {
				logger.error(
					`[API Server] Failed to setup MCP server: ${error instanceof Error ? error.message : String(error)}`
				);
				throw error;
			}
		}

		// Set up 404 handler AFTER all routes (including MCP) are registered
		this.setup404Handler();

		return new Promise((resolve, reject) => {
			try {
				const server = this.app.listen(this.config.port, this.config.host || 'localhost', () => {
					logger.info(
						`API Server started on ${this.config.host || 'localhost'}:${this.config.port}`,
						null,
						'green'
					);
					if (this.config.mcpTransportType) {
						logger.info(
							`[API Server] MCP SSE endpoints available at /mcp/sse and /mcp`,
							null,
							'green'
						);
					}
					resolve();
				});

				server.on('error', err => {
					const errorMessage = err.message || err.toString() || 'Unknown error';
					logger.error('Failed to start API server:', errorMessage);
					logger.error('Error details:', err);
					reject(err);
				});

				// Graceful shutdown
				process.on('SIGTERM', () => {
					logger.info('SIGTERM received, shutting down API server gracefully');
					server.close(() => {
						logger.info('API server stopped');
						process.exit(0);
					});
				});

				process.on('SIGINT', () => {
					logger.info('SIGINT received, shutting down API server gracefully');
					server.close(() => {
						logger.info('API server stopped');
						process.exit(0);
					});
				});
			} catch (error) {
				reject(error);
			}
		});
	}

	public getApp(): Application {
		return this.app;
	}
}



================================================
FILE: src/app/api/middleware/logging.ts
================================================
import { Request, Response, NextFunction } from 'express';
import { v4 as uuidv4 } from 'uuid';
import { logger } from '@core/logger/index.js';

// Extend Express Request interface to include requestId
declare global {
	namespace Express {
		interface Request {
			requestId: string;
			startTime: number;
		}
	}
}

/**
 * Request ID middleware - adds unique request ID to each request
 */
export function requestIdMiddleware(req: Request, res: Response, next: NextFunction): void {
	req.requestId = uuidv4();
	req.startTime = Date.now();

	// Add request ID to response headers
	res.setHeader('X-Request-ID', req.requestId);

	next();
}

/**
 * Request logging middleware - logs incoming requests and responses
 */
export function requestLoggingMiddleware(req: Request, res: Response, next: NextFunction): void {
	const { method, url, ip, headers } = req;
	const userAgent = headers['user-agent'] || 'unknown';

	// Log incoming request
	logger.info('API Request', {
		requestId: req.requestId,
		method,
		url,
		ip,
		userAgent,
		contentType: headers['content-type'],
	});

	// Override res.end to log response
	const originalEnd = res.end;
	res.end = function (chunk?: any, encoding?: any): any {
		const duration = Date.now() - req.startTime;
		const { statusCode } = res;

		// Log response
		logger.info('API Response', {
			requestId: req.requestId,
			method,
			url,
			statusCode,
			duration: `${duration}ms`,
			responseSize: res.get('content-length') || 'unknown',
		});

		// Call original end method
		return originalEnd.call(this, chunk, encoding);
	};

	next();
}

/**
 * Error logging middleware - logs errors with request context
 */
export function errorLoggingMiddleware(
	err: Error,
	req: Request,
	res: Response,
	next: NextFunction
): void {
	logger.error('API Error', {
		requestId: req.requestId,
		method: req.method,
		url: req.url,
		error: err.message,
		stack: err.stack,
		userAgent: req.headers['user-agent'],
	});

	next(err);
}



================================================
FILE: src/app/api/middleware/validation.ts
================================================
import { Request, Response, NextFunction } from 'express';
import { body, param, query, validationResult } from 'express-validator';
import { errorResponse, ERROR_CODES } from '../utils/response.js';
import { sanitizeInput, isValidSessionId } from '../utils/security.js';

/**
 * Middleware to check validation results and return error if validation failed
 */
export function handleValidationErrors(req: Request, res: Response, next: NextFunction): void {
	const errors = validationResult(req);

	if (!errors.isEmpty()) {
		errorResponse(
			res,
			ERROR_CODES.VALIDATION_ERROR,
			'Validation failed',
			400,
			errors.array(),
			req.requestId
		);
		return;
	}

	next();
}

/**
 * Sanitize text input middleware
 */
export function sanitizeTextInput(fields: string[]) {
	return (req: Request, res: Response, next: NextFunction): void => {
		for (const field of fields) {
			if (req.body[field] && typeof req.body[field] === 'string') {
				req.body[field] = sanitizeInput(req.body[field]);
			}
		}
		next();
	};
}

// Validation schemas for different endpoints

/**
 * Message processing validation
 */
export const validateMessageRequest = [
	body('message')
		.isString()
		.isLength({ min: 1, max: 50000 })
		.withMessage('Message must be a string between 1 and 50000 characters'),
	body('sessionId')
		.optional()
		.custom(value => {
			if (value && !isValidSessionId(value)) {
				throw new Error('Invalid session ID format');
			}
			return true;
		}),
	body('images').optional().isArray().withMessage('Images must be an array'),
	body('images.*').optional().isString().withMessage('Each image must be a base64 string'),
	sanitizeTextInput(['message']),
	handleValidationErrors,
];

/**
 * Session ID parameter validation
 */
export const validateSessionId = [
	param('sessionId').custom(value => {
		if (!isValidSessionId(value)) {
			throw new Error('Invalid session ID format');
		}
		return true;
	}),
	handleValidationErrors,
];

/**
 * Session creation validation
 */
export const validateCreateSession = [
	body('sessionId')
		.optional()
		.custom(value => {
			if (value && !isValidSessionId(value)) {
				throw new Error('Invalid session ID format');
			}
			return true;
		}),
	body('config').optional().isObject().withMessage('Config must be an object'),
	handleValidationErrors,
];

/**
 * MCP server configuration validation
 */
export const validateMcpServerConfig = [
	body('name')
		.isString()
		.isLength({ min: 1, max: 100 })
		.withMessage('Server name must be between 1 and 100 characters'),
	body('command').optional().isString().withMessage('Command must be a string'),
	body('args').optional().isArray().withMessage('Args must be an array'),
	body('env').optional().isObject().withMessage('Environment must be an object'),
	body('transport')
		.optional()
		.isIn(['stdio', 'sse', 'http'])
		.withMessage('Transport must be stdio, sse, or http'),
	body('connectionMode')
		.optional()
		.isIn(['strict', 'lenient'])
		.withMessage('Connection mode must be strict or lenient'),
	sanitizeTextInput(['name', 'command']),
	handleValidationErrors,
];

/**
 * MCP server ID validation
 */
export const validateMcpServerId = [
	param('serverId')
		.isString()
		.isLength({ min: 1, max: 100 })
		.withMessage('Server ID must be between 1 and 100 characters'),
	handleValidationErrors,
];

/**
 * Tool execution validation
 */
export const validateToolExecution = [
	param('serverId')
		.isString()
		.isLength({ min: 1, max: 100 })
		.withMessage('Server ID must be between 1 and 100 characters'),
	param('toolName')
		.isString()
		.isLength({ min: 1, max: 100 })
		.withMessage('Tool name must be between 1 and 100 characters'),
	body('arguments').optional().isObject().withMessage('Arguments must be an object'),
	handleValidationErrors,
];

/**
 * LLM configuration validation
 */
export const validateLlmConfig = [
	body('provider')
		.isString()
		.isIn(['openai', 'anthropic', 'openrouter', 'ollama'])
		.withMessage('Provider must be one of: openai, anthropic, openrouter, ollama'),
	body('model')
		.isString()
		.isLength({ min: 1, max: 100 })
		.withMessage('Model must be between 1 and 100 characters'),
	body('config').optional().isObject().withMessage('Config must be an object'),
	sanitizeTextInput(['provider', 'model']),
	handleValidationErrors,
];

/**
 * Query parameter validation
 */
export const validateListParams = [
	query('limit')
		.optional()
		.isInt({ min: 1, max: 100 })
		.withMessage('Limit must be between 1 and 100'),
	query('offset').optional().isInt({ min: 0 }).withMessage('Offset must be a non-negative integer'),
	handleValidationErrors,
];



================================================
FILE: src/app/api/routes/config.ts
================================================
import { Router, Request, Response } from 'express';
import { MemAgent } from '@core/brain/memAgent/index.js';
import { successResponse, errorResponse, ERROR_CODES } from '../utils/response.js';
import { redactSensitiveData } from '../utils/security.js';
import { logger } from '@core/logger/index.js';
import { dump as yamlDump } from 'js-yaml';

export function createConfigRoutes(agent: MemAgent): Router {
	const router = Router();

	/**
	 * GET /api/config.yaml
	 * Export current configuration as YAML with sensitive data redacted
	 */
	router.get('/yaml', async (req: Request, res: Response) => {
		try {
			logger.info('Exporting configuration as YAML', { requestId: req.requestId });

			// Get effective configuration
			const config = agent.getEffectiveConfig();

			// Redact sensitive information
			const redactedConfig = redactSensitiveData(config);

			// Convert to YAML
			const yamlConfig = yamlDump(redactedConfig, {
				indent: 2,
				lineWidth: 120,
				noRefs: true,
			});

			// Set appropriate headers for YAML response
			res.setHeader('Content-Type', 'application/x-yaml; charset=utf-8');
			res.setHeader('Content-Disposition', 'attachment; filename="cipher-config.yml"');
			res.setHeader('X-Request-ID', req.requestId);

			res.send(yamlConfig);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to export configuration', {
				requestId: req.requestId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.INTERNAL_ERROR,
				`Failed to export configuration: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	/**
	 * GET /api/config
	 * Get current configuration as JSON with sensitive data redacted
	 */
	router.get('/', async (req: Request, res: Response) => {
		try {
			logger.info('Getting current configuration', { requestId: req.requestId });

			// Get effective configuration
			const config = agent.getEffectiveConfig();

			// Redact sensitive information
			const redactedConfig = redactSensitiveData(config);

			successResponse(
				res,
				{
					config: redactedConfig,
					timestamp: new Date().toISOString(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to get configuration', {
				requestId: req.requestId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.INTERNAL_ERROR,
				`Failed to get configuration: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	/**
	 * GET /api/config/session/:sessionId
	 * Get session-specific configuration
	 */
	router.get('/session/:sessionId', async (req: Request, res: Response) => {
		try {
			const { sessionId } = req.params;

			if (!sessionId) {
				errorResponse(
					res,
					ERROR_CODES.BAD_REQUEST,
					'Session ID is required',
					400,
					undefined,
					req.requestId
				);
				return;
			}

			logger.info('Getting session-specific configuration', {
				requestId: req.requestId,
				sessionId,
			});

			// Check if session exists
			const session = await agent.getSession(sessionId);
			if (!session) {
				errorResponse(
					res,
					ERROR_CODES.SESSION_NOT_FOUND,
					`Session ${sessionId} not found`,
					404,
					undefined,
					req.requestId
				);
				return;
			}

			// Get session-specific configuration
			const config = agent.getEffectiveConfig(sessionId);

			// Redact sensitive information
			const redactedConfig = redactSensitiveData(config);

			successResponse(
				res,
				{
					sessionId,
					config: redactedConfig,
					timestamp: new Date().toISOString(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to get session configuration', {
				requestId: req.requestId,
				sessionId: req.params.sessionId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.INTERNAL_ERROR,
				`Failed to get session configuration: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	return router;
}



================================================
FILE: src/app/api/routes/llm.ts
================================================
import { Router, Request, Response } from 'express';
import { MemAgent } from '@core/brain/memAgent/index.js';
import { successResponse, errorResponse, ERROR_CODES } from '../utils/response.js';
import { validateLlmConfig } from '../middleware/validation.js';
import { logger } from '@core/logger/index.js';

export function createLlmRoutes(agent: MemAgent): Router {
	const router = Router();

	/**
	 * GET /api/llm/current
	 * Get current LLM configuration
	 */
	router.get('/current', async (req: Request, res: Response) => {
		try {
			logger.info('Getting current LLM configuration', { requestId: req.requestId });

			const llmConfig = agent.getCurrentLLMConfig();

			// Redact sensitive information like API keys
			const sanitizedConfig = {
				...llmConfig,
				// Remove or mask sensitive fields
				apiKey: llmConfig.apiKey ? '***' : undefined,
				// Keep other configuration details
			};

			successResponse(
				res,
				{
					llmConfig: sanitizedConfig,
					timestamp: new Date().toISOString(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to get current LLM configuration', {
				requestId: req.requestId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.LLM_ERROR,
				`Failed to get LLM configuration: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	/**
	 * GET /api/llm/providers
	 * List available LLM providers and models
	 */
	router.get('/providers', async (req: Request, res: Response) => {
		try {
			logger.info('Getting available LLM providers', { requestId: req.requestId });

			// Define available providers and their common models
			// This could be enhanced to dynamically discover available models
			const providers = {
				openai: {
					name: 'OpenAI',
					models: ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-4', 'gpt-3.5-turbo'],
					requiresApiKey: true,
					description: 'OpenAI GPT models',
				},
				anthropic: {
					name: 'Anthropic',
					models: [
						'claude-3-5-sonnet-20241022',
						'claude-3-5-haiku-20241022',
						'claude-3-opus-20240229',
						'claude-3-sonnet-20240229',
						'claude-3-haiku-20240307',
					],
					requiresApiKey: true,
					description: 'Anthropic Claude models',
				},
				openrouter: {
					name: 'OpenRouter',
					models: [
						'openai/gpt-4o',
						'anthropic/claude-3.5-sonnet',
						'meta-llama/llama-3.1-405b-instruct',
						'google/gemini-pro-1.5',
					],
					requiresApiKey: true,
					description: 'OpenRouter unified API access',
				},
				ollama: {
					name: 'Ollama',
					models: [
						'llama3.1:latest',
						'llama3.1:8b',
						'llama3.1:70b',
						'codellama:latest',
						'mistral:latest',
						'mixtral:latest',
					],
					requiresApiKey: false,
					description: 'Local Ollama models',
					note: 'Requires Ollama server running locally',
				},
			};

			successResponse(
				res,
				{
					providers,
					availableProviders: Object.keys(providers),
					timestamp: new Date().toISOString(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to get LLM providers', {
				requestId: req.requestId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.LLM_ERROR,
				`Failed to get LLM providers: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	/**
	 * POST /api/llm/switch
	 * Switch LLM configuration
	 */
	router.post('/switch', validateLlmConfig, async (req: Request, res: Response) => {
		try {
			const { provider, model, config } = req.body;

			logger.info('Switching LLM configuration', {
				requestId: req.requestId,
				provider,
				model,
			});

			// Note: This is a placeholder implementation
			// The actual implementation would depend on how the MemAgent handles LLM switching
			// For now, we'll return a success response indicating the request was received

			// TODO: Implement actual LLM switching logic in MemAgent
			// This might involve:
			// 1. Validating the provider and model combination
			// 2. Checking if required API keys are available
			// 3. Testing the connection to the new LLM
			// 4. Updating the agent's configuration

			logger.warn('LLM switching not yet implemented in MemAgent', {
				requestId: req.requestId,
			});

			successResponse(
				res,
				{
					message: 'LLM switch request received (implementation pending)',
					requestedProvider: provider,
					requestedModel: model,
					requestedConfig: config,
					timestamp: new Date().toISOString(),
					status: 'pending',
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to switch LLM configuration', {
				requestId: req.requestId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.LLM_ERROR,
				`Failed to switch LLM: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	/**
	 * GET /api/llm/status
	 * Get LLM connection status and health
	 */
	router.get('/status', async (req: Request, res: Response) => {
		try {
			logger.info('Getting LLM status', { requestId: req.requestId });

			const llmConfig = agent.getCurrentLLMConfig();

			// Basic status check - could be enhanced with actual health checks
			const status = {
				configured: Boolean(llmConfig.provider && llmConfig.model),
				provider: llmConfig.provider,
				model: llmConfig.model,
				healthy: true, // Placeholder - would need actual health check
				lastCheck: new Date().toISOString(),
			};

			successResponse(
				res,
				{
					status,
					timestamp: new Date().toISOString(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to get LLM status', {
				requestId: req.requestId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.LLM_ERROR,
				`Failed to get LLM status: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	return router;
}



================================================
FILE: src/app/api/routes/mcp.ts
================================================
import { Router, Request, Response } from 'express';
import { MemAgent } from '@core/brain/memAgent/index.js';
import { successResponse, errorResponse, ERROR_CODES } from '../utils/response.js';
import {
	validateMcpServerConfig,
	validateMcpServerId,
	validateToolExecution,
	validateListParams,
} from '../middleware/validation.js';
import { logger } from '@core/logger/index.js';

export function createMcpRoutes(agent: MemAgent): Router {
	const router = Router();

	/**
	 * GET /api/mcp/servers
	 * List all connected and failed MCP servers
	 */
	router.get('/servers', validateListParams, async (req: Request, res: Response) => {
		try {
			logger.info('Listing MCP servers', { requestId: req.requestId });

			const clients = agent.getMcpClients();
			const failedConnections = agent.getMcpFailedConnections();

			const connectedServers = Array.from(clients.entries()).map(([name, _client]) => ({
				name,
				status: 'connected',
				// You could add more client metadata here if available
				connected: true,
			}));

			const failedServers = Object.entries(failedConnections).map(([name, error]) => ({
				name,
				status: 'failed',
				error,
				connected: false,
			}));

			successResponse(
				res,
				{
					connected: connectedServers,
					failed: failedServers,
					totalConnected: connectedServers.length,
					totalFailed: failedServers.length,
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to list MCP servers', {
				requestId: req.requestId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.MCP_SERVER_ERROR,
				`Failed to list MCP servers: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	/**
	 * POST /api/mcp/servers
	 * Connect a new MCP server
	 */
	router.post('/servers', validateMcpServerConfig, async (req: Request, res: Response) => {
		try {
			const { name, ...config } = req.body;

			logger.info('Connecting MCP server', {
				requestId: req.requestId,
				serverName: name,
			});

			await agent.connectMcpServer(name, config);

			successResponse(
				res,
				{
					serverName: name,
					connected: true,
					timestamp: new Date().toISOString(),
				},
				201,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to connect MCP server', {
				requestId: req.requestId,
				serverName: req.body.name,
				error: errorMsg,
			});

			// Determine appropriate status code based on error
			let statusCode = 500;
			if (errorMsg.includes('already exists') || errorMsg.includes('duplicate')) {
				statusCode = 409; // Conflict
			} else if (errorMsg.includes('Invalid') || errorMsg.includes('validation')) {
				statusCode = 400; // Bad Request
			}

			errorResponse(
				res,
				ERROR_CODES.MCP_SERVER_ERROR,
				`Failed to connect MCP server: ${errorMsg}`,
				statusCode,
				undefined,
				req.requestId
			);
		}
	});

	/**
	 * DELETE /api/mcp/servers/:serverId
	 * Disconnect an MCP server
	 */
	router.delete('/servers/:serverId', validateMcpServerId, async (req: Request, res: Response) => {
		try {
			const { serverId } = req.params;

			if (!serverId) {
				errorResponse(
					res,
					ERROR_CODES.BAD_REQUEST,
					'Server ID is required',
					400,
					undefined,
					req.requestId
				);
				return;
			}

			logger.info('Disconnecting MCP server', {
				requestId: req.requestId,
				serverId,
			});

			await agent.removeMcpServer(serverId);

			successResponse(
				res,
				{
					serverId,
					disconnected: true,
					timestamp: new Date().toISOString(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to disconnect MCP server', {
				requestId: req.requestId,
				serverId: req.params.serverId,
				error: errorMsg,
			});

			if (errorMsg.includes('not found')) {
				errorResponse(
					res,
					ERROR_CODES.NOT_FOUND,
					`MCP server ${req.params.serverId} not found`,
					404,
					undefined,
					req.requestId
				);
			} else {
				errorResponse(
					res,
					ERROR_CODES.MCP_SERVER_ERROR,
					`Failed to disconnect MCP server: ${errorMsg}`,
					500,
					undefined,
					req.requestId
				);
			}
		}
	});

	/**
	 * GET /api/mcp/servers/:serverId/tools
	 * List tools for a specific MCP server
	 */
	router.get(
		'/servers/:serverId/tools',
		validateMcpServerId,
		async (req: Request, res: Response) => {
			try {
				const { serverId } = req.params;

				if (!serverId) {
					errorResponse(
						res,
						ERROR_CODES.BAD_REQUEST,
						'Server ID is required',
						400,
						undefined,
						req.requestId
					);
					return;
				}

				logger.info('Listing tools for MCP server', {
					requestId: req.requestId,
					serverId,
				});

				const clients = agent.getMcpClients();
				const client = clients.get(serverId);

				if (!client) {
					errorResponse(
						res,
						ERROR_CODES.NOT_FOUND,
						`MCP server ${serverId} not found or not connected`,
						404,
						undefined,
						req.requestId
					);
					return;
				}

				// Get tools from the client
				const toolSet = await client.getTools();
				const tools = Object.entries(toolSet).map(([name, tool]) => ({
					name,
					description: tool.description,
					parameters: tool.parameters,
				}));

				successResponse(
					res,
					{
						serverId,
						tools,
						count: tools.length,
					},
					200,
					req.requestId
				);
			} catch (error) {
				const errorMsg = error instanceof Error ? error.message : String(error);
				logger.error('Failed to list tools for MCP server', {
					requestId: req.requestId,
					serverId: req.params.serverId,
					error: errorMsg,
				});

				errorResponse(
					res,
					ERROR_CODES.MCP_SERVER_ERROR,
					`Failed to list tools: ${errorMsg}`,
					500,
					undefined,
					req.requestId
				);
			}
		}
	);

	/**
	 * POST /api/mcp/servers/:serverId/tools/:toolName/execute
	 * Execute a tool on a specific MCP server
	 */
	router.post(
		'/servers/:serverId/tools/:toolName/execute',
		validateToolExecution,
		async (req: Request, res: Response) => {
			try {
				const { serverId, toolName } = req.params;

				if (!serverId || !toolName) {
					errorResponse(
						res,
						ERROR_CODES.BAD_REQUEST,
						'Server ID and tool name are required',
						400,
						undefined,
						req.requestId
					);
					return;
				}
				const { arguments: toolArgs } = req.body;

				logger.info('Executing MCP tool', {
					requestId: req.requestId,
					serverId,
					toolName,
					hasArguments: Boolean(toolArgs),
				});

				// Check if server exists
				const clients = agent.getMcpClients();
				const client = clients.get(serverId);

				if (!client) {
					errorResponse(
						res,
						ERROR_CODES.NOT_FOUND,
						`MCP server ${serverId} not found or not connected`,
						404,
						undefined,
						req.requestId
					);
					return;
				}

				// Execute the tool through the agent's unified tool manager
				const result = await agent.executeMcpTool(toolName, toolArgs || {});

				successResponse(
					res,
					{
						serverId,
						toolName,
						result,
						executed: true,
						timestamp: new Date().toISOString(),
					},
					200,
					req.requestId
				);
			} catch (error) {
				const errorMsg = error instanceof Error ? error.message : String(error);
				logger.error('Failed to execute MCP tool', {
					requestId: req.requestId,
					serverId: req.params.serverId,
					toolName: req.params.toolName,
					error: errorMsg,
				});

				// Determine appropriate status code
				let statusCode = 500;
				if (errorMsg.includes('not found') || errorMsg.includes('unknown tool')) {
					statusCode = 404;
				} else if (errorMsg.includes('invalid') || errorMsg.includes('validation')) {
					statusCode = 400;
				}

				errorResponse(
					res,
					ERROR_CODES.MCP_SERVER_ERROR,
					`Failed to execute tool: ${errorMsg}`,
					statusCode,
					undefined,
					req.requestId
				);
			}
		}
	);

	return router;
}



================================================
FILE: src/app/api/routes/message.ts
================================================
import { Router, Request, Response } from 'express';
import { MemAgent } from '@core/brain/memAgent/index.js';
import { successResponse, errorResponse, ERROR_CODES } from '../utils/response.js';
import { validateMessageRequest } from '../middleware/validation.js';
import { logger } from '@core/logger/index.js';

export function createMessageRoutes(agent: MemAgent): Router {
	const router = Router();

	/**
	 * POST /api/message-sync
	 * Process a message synchronously and return the full response
	 */
	router.post('/sync', validateMessageRequest, async (req: Request, res: Response) => {
		try {
			const { message, sessionId, images } = req.body;

			logger.info('Processing message request', {
				requestId: req.requestId,
				sessionId: sessionId || 'default',
				hasImages: Boolean(images && images.length > 0),
				messageLength: message.length,
			});

			// If sessionId is provided, ensure that session is loaded
			if (sessionId) {
				try {
					const session = await agent.loadSession(sessionId);
					logger.info(`Loaded session: ${session.id}`, { requestId: req.requestId });
				} catch (error) {
					const errorMsg = error instanceof Error ? error.message : String(error);
					logger.warn(`Session ${sessionId} not found, will create new one: ${errorMsg}`, {
						requestId: req.requestId,
					});

					// Create new session with the provided ID
					try {
						const newSession = await agent.createSession(sessionId);
						logger.info(`Created new session: ${newSession.id}`, { requestId: req.requestId });
					} catch (createError) {
						errorResponse(
							res,
							ERROR_CODES.SESSION_NOT_FOUND,
							`Failed to create session: ${createError instanceof Error ? createError.message : String(createError)}`,
							400,
							undefined,
							req.requestId
						);
						return;
					}
				}
			}

			// Process the message through the agent
			// Convert images array to single image if provided
			let imageData: { image: string; mimeType: string } | undefined;
			if (images && images.length > 0) {
				// For now, use the first image (could be enhanced to handle multiple images)
				imageData = {
					image: images[0],
					mimeType: 'image/jpeg', // Default, could be enhanced to detect actual type
				};
			}

			const { response, backgroundOperations } = await agent.run(message, imageData, sessionId);
			// In API mode, always wait for background operations to complete before returning response
			await backgroundOperations;

			successResponse(
				res,
				{
					response,
					sessionId: agent.getCurrentSessionId(),
					timestamp: new Date().toISOString(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Message processing failed', {
				requestId: req.requestId,
				error: errorMsg,
				stack: error instanceof Error ? error.stack : undefined,
			});

			errorResponse(
				res,
				ERROR_CODES.INTERNAL_ERROR,
				`Message processing failed: ${errorMsg}`,
				500,
				process.env.NODE_ENV === 'development' ? error : undefined,
				req.requestId
			);
		}
	});

	/**
	 * POST /api/message/reset
	 * Reset conversation state for the current or specified session
	 */
	router.post('/reset', async (req: Request, res: Response) => {
		try {
			const { sessionId } = req.body;

			logger.info('Processing reset request', {
				requestId: req.requestId,
				sessionId: sessionId || 'current',
			});

			if (sessionId) {
				// Reset specific session
				const success = await agent.removeSession(sessionId);
				if (!success) {
					errorResponse(
						res,
						ERROR_CODES.SESSION_NOT_FOUND,
						`Session ${sessionId} not found`,
						404,
						undefined,
						req.requestId
					);
					return;
				}

				// Create a new session with the same ID
				const newSession = await agent.createSession(sessionId);

				successResponse(
					res,
					{
						message: `Session ${sessionId} has been reset`,
						sessionId: newSession.id,
						timestamp: new Date().toISOString(),
					},
					200,
					req.requestId
				);
			} else {
				// Reset current session
				const currentSessionId = agent.getCurrentSessionId();

				if (currentSessionId) {
					await agent.removeSession(currentSessionId);
				}

				// Create a new session
				const newSession = await agent.createSession();

				successResponse(
					res,
					{
						message: 'Current session has been reset',
						sessionId: newSession.id,
						timestamp: new Date().toISOString(),
					},
					200,
					req.requestId
				);
			}
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Reset operation failed', {
				requestId: req.requestId,
				error: errorMsg,
				stack: error instanceof Error ? error.stack : undefined,
			});

			errorResponse(
				res,
				ERROR_CODES.INTERNAL_ERROR,
				`Reset operation failed: ${errorMsg}`,
				500,
				process.env.NODE_ENV === 'development' ? error : undefined,
				req.requestId
			);
		}
	});

	return router;
}



================================================
FILE: src/app/api/routes/session.ts
================================================
import { Router, Request, Response } from 'express';
import { MemAgent } from '@core/brain/memAgent/index.js';
import { successResponse, errorResponse, ERROR_CODES } from '../utils/response.js';
import {
	validateSessionId,
	validateCreateSession,
	validateListParams,
} from '../middleware/validation.js';
import { logger } from '@core/logger/index.js';

export function createSessionRoutes(agent: MemAgent): Router {
	const router = Router();

	/**
	 * GET /api/sessions
	 * List all active sessions with metadata
	 */
	router.get('/', validateListParams, async (req: Request, res: Response) => {
		try {
			logger.info('Listing sessions', { requestId: req.requestId });

			const sessionIds = await agent.listSessions();
			const sessions = [];

			for (const sessionId of sessionIds) {
				const metadata = await agent.getSessionMetadata(sessionId);
				if (metadata) {
					sessions.push(metadata);
				}
			}

			successResponse(
				res,
				{
					sessions,
					count: sessions.length,
					currentSession: agent.getCurrentSessionId(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to list sessions', {
				requestId: req.requestId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.INTERNAL_ERROR,
				`Failed to list sessions: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	/**
	 * POST /api/sessions
	 * Create a new session
	 */
	router.post('/', validateCreateSession, async (req: Request, res: Response) => {
		try {
			const { sessionId } = req.body;

			logger.info('Creating new session', {
				requestId: req.requestId,
				sessionId: sessionId || 'auto-generated',
			});

			const session = await agent.createSession(sessionId);

			successResponse(
				res,
				{
					sessionId: session.id,
					created: true,
					timestamp: new Date().toISOString(),
				},
				201,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to create session', {
				requestId: req.requestId,
				error: errorMsg,
			});

			// Check if error is due to duplicate session ID
			if (errorMsg.includes('already exists') || errorMsg.includes('duplicate')) {
				errorResponse(
					res,
					ERROR_CODES.BAD_REQUEST,
					`Session creation failed: ${errorMsg}`,
					400,
					undefined,
					req.requestId
				);
			} else {
				errorResponse(
					res,
					ERROR_CODES.INTERNAL_ERROR,
					`Failed to create session: ${errorMsg}`,
					500,
					undefined,
					req.requestId
				);
			}
		}
	});

	/**
	 * GET /api/sessions/current
	 * Get current working session
	 */
	router.get('/current', async (req: Request, res: Response) => {
		try {
			const currentSessionId = agent.getCurrentSessionId();
			const metadata = await agent.getSessionMetadata(currentSessionId);

			if (!metadata) {
				errorResponse(
					res,
					ERROR_CODES.SESSION_NOT_FOUND,
					'Current session not found',
					404,
					undefined,
					req.requestId
				);
				return;
			}

			successResponse(
				res,
				{
					sessionId: currentSessionId,
					metadata,
					isCurrent: true,
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to get current session', {
				requestId: req.requestId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.INTERNAL_ERROR,
				`Failed to get current session: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	/**
	 * GET /api/sessions/:sessionId
	 * Get session details
	 */
	router.get('/:sessionId', validateSessionId, async (req: Request, res: Response) => {
		try {
			const { sessionId } = req.params;

			if (!sessionId) {
				errorResponse(
					res,
					ERROR_CODES.BAD_REQUEST,
					'Session ID is required',
					400,
					undefined,
					req.requestId
				);
				return;
			}

			logger.info('Getting session details', {
				requestId: req.requestId,
				sessionId,
			});

			const session = await agent.getSession(sessionId);
			if (!session) {
				errorResponse(
					res,
					ERROR_CODES.SESSION_NOT_FOUND,
					`Session ${sessionId} not found`,
					404,
					undefined,
					req.requestId
				);
				return;
			}

			const metadata = await agent.getSessionMetadata(sessionId);

			successResponse(
				res,
				{
					sessionId,
					metadata,
					isCurrent: sessionId === agent.getCurrentSessionId(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to get session details', {
				requestId: req.requestId,
				sessionId: req.params.sessionId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.INTERNAL_ERROR,
				`Failed to get session details: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	/**
	 * POST /api/sessions/:sessionId/load
	 * Load session as current
	 */
	router.post('/:sessionId/load', validateSessionId, async (req: Request, res: Response) => {
		try {
			const { sessionId } = req.params;

			if (!sessionId) {
				errorResponse(
					res,
					ERROR_CODES.BAD_REQUEST,
					'Session ID is required',
					400,
					undefined,
					req.requestId
				);
				return;
			}

			logger.info('Loading session', {
				requestId: req.requestId,
				sessionId,
			});

			const session = await agent.loadSession(sessionId);

			successResponse(
				res,
				{
					sessionId: session.id,
					loaded: true,
					currentSession: agent.getCurrentSessionId(),
					timestamp: new Date().toISOString(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to load session', {
				requestId: req.requestId,
				sessionId: req.params.sessionId,
				error: errorMsg,
			});

			if (errorMsg.includes('not found')) {
				errorResponse(
					res,
					ERROR_CODES.SESSION_NOT_FOUND,
					`Session ${req.params.sessionId} not found`,
					404,
					undefined,
					req.requestId
				);
			} else {
				errorResponse(
					res,
					ERROR_CODES.INTERNAL_ERROR,
					`Failed to load session: ${errorMsg}`,
					500,
					undefined,
					req.requestId
				);
			}
		}
	});

	/**
	 * GET /api/sessions/:sessionId/history
	 * Get session conversation history
	 */
	router.get('/:sessionId/history', validateSessionId, async (req: Request, res: Response) => {
		try {
			const { sessionId } = req.params;

			if (!sessionId) {
				errorResponse(
					res,
					ERROR_CODES.BAD_REQUEST,
					'Session ID is required',
					400,
					undefined,
					req.requestId
				);
				return;
			}

			logger.info('Getting session history', {
				requestId: req.requestId,
				sessionId,
			});

			const session = await agent.getSession(sessionId);
			if (!session) {
				errorResponse(
					res,
					ERROR_CODES.SESSION_NOT_FOUND,
					`Session ${sessionId} not found`,
					404,
					undefined,
					req.requestId
				);
				return;
			}

			const history = await agent.getSessionHistory(sessionId);

			successResponse(
				res,
				{
					sessionId,
					history,
					count: history.length,
					timestamp: new Date().toISOString(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to get session history', {
				requestId: req.requestId,
				sessionId: req.params.sessionId,
				error: errorMsg,
			});

			errorResponse(
				res,
				ERROR_CODES.INTERNAL_ERROR,
				`Failed to get session history: ${errorMsg}`,
				500,
				undefined,
				req.requestId
			);
		}
	});

	/**
	 * DELETE /api/sessions/:sessionId
	 * Delete session
	 */
	router.delete('/:sessionId', validateSessionId, async (req: Request, res: Response) => {
		try {
			const { sessionId } = req.params;

			if (!sessionId) {
				errorResponse(
					res,
					ERROR_CODES.BAD_REQUEST,
					'Session ID is required',
					400,
					undefined,
					req.requestId
				);
				return;
			}

			logger.info('Deleting session', {
				requestId: req.requestId,
				sessionId,
			});

			const success = await agent.removeSession(sessionId);

			if (!success) {
				errorResponse(
					res,
					ERROR_CODES.SESSION_NOT_FOUND,
					`Session ${sessionId} not found`,
					404,
					undefined,
					req.requestId
				);
				return;
			}

			successResponse(
				res,
				{
					sessionId,
					deleted: true,
					timestamp: new Date().toISOString(),
				},
				200,
				req.requestId
			);
		} catch (error) {
			const errorMsg = error instanceof Error ? error.message : String(error);
			logger.error('Failed to delete session', {
				requestId: req.requestId,
				sessionId: req.params.sessionId,
				error: errorMsg,
			});

			if (errorMsg.includes('Cannot remove the currently active session')) {
				errorResponse(
					res,
					ERROR_CODES.BAD_REQUEST,
					'Cannot delete the currently active session. Switch to another session first.',
					400,
					undefined,
					req.requestId
				);
			} else {
				errorResponse(
					res,
					ERROR_CODES.INTERNAL_ERROR,
					`Failed to delete session: ${errorMsg}`,
					500,
					undefined,
					req.requestId
				);
			}
		}
	});

	return router;
}



================================================
FILE: src/app/api/utils/response.ts
================================================
import { Response } from 'express';

// Standard API response structure
export interface ApiResponse<T = any> {
	success: boolean;
	data?: T;
	error?: {
		code: string;
		message: string;
		details?: any;
	};
	meta?: {
		timestamp: string;
		requestId?: string;
	};
}

// Success response helper
export function successResponse<T>(
	res: Response,
	data: T,
	statusCode: number = 200,
	requestId?: string
): void {
	const response: ApiResponse<T> = {
		success: true,
		data,
		meta: {
			timestamp: new Date().toISOString(),
			...(requestId && { requestId }),
		},
	};

	res.status(statusCode).json(response);
}

// Error response helper
export function errorResponse(
	res: Response,
	code: string,
	message: string,
	statusCode: number = 500,
	details?: any,
	requestId?: string
): void {
	const response: ApiResponse = {
		success: false,
		error: {
			code,
			message,
			details,
		},
		meta: {
			timestamp: new Date().toISOString(),
			...(requestId && { requestId }),
		},
	};

	res.status(statusCode).json(response);
}

// Common error codes
export const ERROR_CODES = {
	VALIDATION_ERROR: 'VALIDATION_ERROR',
	NOT_FOUND: 'NOT_FOUND',
	UNAUTHORIZED: 'UNAUTHORIZED',
	INTERNAL_ERROR: 'INTERNAL_ERROR',
	BAD_REQUEST: 'BAD_REQUEST',
	SESSION_NOT_FOUND: 'SESSION_NOT_FOUND',
	MCP_SERVER_ERROR: 'MCP_SERVER_ERROR',
	LLM_ERROR: 'LLM_ERROR',
	RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',
} as const;

export type ErrorCode = keyof typeof ERROR_CODES;



================================================
FILE: src/app/api/utils/security.ts
================================================
// Security utilities for API server

// Sensitive field patterns that should be redacted
const SENSITIVE_PATTERNS = [
	/api[_-]?key/i,
	/secret/i,
	/token/i,
	/password/i,
	/auth/i,
	/credential/i,
	/private[_-]?key/i,
];

// Environment variables that should be redacted
const SENSITIVE_ENV_VARS = [
	'OPENAI_API_KEY',
	'ANTHROPIC_API_KEY',
	'OPENROUTER_API_KEY',
	'DATABASE_URL',
	'REDIS_URL',
	'QDRANT_API_KEY',
	'MILVUS_TOKEN',
];

/**
 * Redacts sensitive information from any object
 */
export function redactSensitiveData(obj: any): any {
	if (typeof obj !== 'object' || obj === null) {
		return obj;
	}

	if (Array.isArray(obj)) {
		return obj.map(item => redactSensitiveData(item));
	}

	const redacted: any = {};

	for (const [key, value] of Object.entries(obj)) {
		// Check if key matches sensitive patterns
		const isSensitive = SENSITIVE_PATTERNS.some(pattern => pattern.test(key));

		if (isSensitive && typeof value === 'string') {
			redacted[key] = maskValue(value);
		} else if (typeof value === 'object') {
			redacted[key] = redactSensitiveData(value);
		} else {
			redacted[key] = value;
		}
	}

	return redacted;
}

/**
 * Masks a string value, showing only first and last few characters
 */
function maskValue(value: string): string {
	if (!value || value.length <= 8) {
		return '***';
	}

	const start = value.slice(0, 4);
	const end = value.slice(-4);
	const middle = '*'.repeat(Math.max(4, value.length - 8));

	return `${start}${middle}${end}`;
}

/**
 * Redacts sensitive environment variables
 */
export function redactEnvironmentVars(
	env: Record<string, string | undefined>
): Record<string, string | undefined> {
	const redacted: Record<string, string | undefined> = {};

	for (const [key, value] of Object.entries(env)) {
		if (SENSITIVE_ENV_VARS.includes(key) && value) {
			redacted[key] = maskValue(value);
		} else {
			redacted[key] = value;
		}
	}

	return redacted;
}

/**
 * Sanitizes user input to prevent injection attacks
 */
export function sanitizeInput(input: string): string {
	if (typeof input !== 'string') {
		return input;
	}

	// Remove null bytes and control characters except newlines and tabs
	// eslint-disable-next-line no-control-regex
	return input.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '');
}

/**
 * Validates that a string is a valid UUID
 */
export function isValidUUID(uuid: string): boolean {
	const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
	return uuidRegex.test(uuid);
}

/**
 * Validates session ID format (allows UUID or custom format)
 */
export function isValidSessionId(sessionId: string): boolean {
	// Allow UUID format or alphanumeric with hyphens/underscores (max 50 chars)
	return isValidUUID(sessionId) || /^[a-zA-Z0-9_-]{1,50}$/.test(sessionId);
}



================================================
FILE: src/app/cli/cli.ts
================================================
import { MemAgent, logger } from '@core/index.js';
import * as readline from 'readline';
import chalk from 'chalk';
import { executeCommand } from './commands.js';
import { commandParser } from './parser.js';
import type { AggregatorConfig } from '@core/mcp/types.js';

/**
 * Start headless CLI mode for one-shot command execution
 * @param agent - The MemAgent instance
 * @param input - The user input/prompt to execute
 */
export async function startHeadlessCli(agent: MemAgent, input: string): Promise<void> {
	await _initCli(agent);

	if (input.trim().startsWith('!meta ')) {
		const metaAndMessage = input.trim().substring(6).split(' ');
		const metaStr = metaAndMessage[0];
		const message = metaAndMessage.slice(1).join(' ');
		let metadata: Record<string, any> = {};
		try {
			// Add null check for metaStr before passing to parseMetaString
			if (metaStr) {
				metadata = parseMetaString(metaStr);
			}
		} catch {
			console.log(chalk.red('❌ Invalid metadata format. Use key=value,key2=value2 ...'));
			return;
		}
		console.log(chalk.gray('🤔 Processing (with metadata)...'));
		const result = await agent.run(message, undefined, undefined, false, {
			memoryMetadata: metadata,
		});
		if (result && result.response) {
			logger.displayAIResponse(result.response);
		} else {
			console.log(chalk.gray('No response received.'));
		}

		// Wait for background operations to complete before exiting
		if (result && result.backgroundOperations) {
			try {
				await result.backgroundOperations;
			} catch {
				// Background operations failures are already logged, don't show to user
			}
		}
	} else {
		console.log(chalk.gray('🤔 Processing...'));
		const result = await agent.run(input);
		if (result && result.response) {
			logger.displayAIResponse(result.response);
		} else {
			console.log(chalk.gray('No response received.'));
		}

		// Wait for background operations to complete before exiting
		if (result && result.backgroundOperations) {
			try {
				await result.backgroundOperations;
			} catch {
				// Background operations failures are already logged, don't show to user
			}
		}
	}
}

/**
 * Start interactive CLI mode where user can continuously chat with the agent
 */
export async function startInteractiveCli(agent: MemAgent): Promise<void> {
	// Common initialization
	await _initCli(agent);

	console.log(chalk.cyan('🚀 Welcome to Cipher Interactive CLI!'));
	console.log(chalk.gray('Your memory-powered coding assistant is ready.'));
	console.log(chalk.gray('• Type /help to see available commands'));
	console.log(chalk.gray('• Use /exit or /quit to end the session'));
	console.log(chalk.gray('• Regular messages will be sent to the AI agent\n'));

	const rl = readline.createInterface({
		input: process.stdin,
		output: process.stdout,
		prompt: chalk.blue('cipher> '),
	});

	// Set up graceful shutdown
	const handleExit = () => {
		console.log(chalk.yellow('\n👋 Goodbye! Your conversation has been saved to memory.'));
		rl.close();
		process.exit(0);
	};

	rl.on('SIGINT', handleExit);
	rl.on('SIGTERM', handleExit);

	rl.prompt();

	rl.on('line', async (input: string) => {
		const trimmedInput = input.trim();

		// Skip empty inputs
		if (!trimmedInput) {
			rl.prompt();
			return;
		}

		try {
			// Parse input to determine if it's a command or regular prompt
			if (trimmedInput.startsWith('!meta ')) {
				// Parse metadata command: !meta key=value,key2=value2 message
				const metaAndMessage = trimmedInput.substring(6).split(' ');
				const metaStr = metaAndMessage[0];
				const message = metaAndMessage.slice(1).join(' ');
				let metadata: Record<string, any> = {};
				try {
					// Add null check for metaStr before passing to parseMetaString
					if (metaStr) {
						metadata = parseMetaString(metaStr);
					}
				} catch {
					console.log(chalk.red('❌ Invalid metadata format. Use key=value,key2=value2 ...'));
					rl.prompt();
					return;
				}
				console.log(chalk.gray('🤔 Thinking (with metadata)...'));
				const result = await agent.run(message, undefined, undefined, false, {
					memoryMetadata: metadata,
				});
				if (result && result.response) {
					logger.displayAIResponse(result.response);
				} else {
					console.log(chalk.gray('No response received.'));
				}

				// Let background operations run in the background without blocking the UI
				if (result && result.backgroundOperations) {
					result.backgroundOperations
						.catch(() => {
							// Background operations failures are already logged, don't show to user
						})
						.finally(() => {
							// Small delay to ensure any error logs are fully written before redisplaying prompt
							setTimeout(() => {
								rl.prompt();
							}, 100);
						});
				}
			} else {
				const parsedInput = commandParser.parseInput(trimmedInput);

				if (parsedInput.isCommand) {
					// Handle slash command
					if (parsedInpu