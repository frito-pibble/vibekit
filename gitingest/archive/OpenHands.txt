Directory structure:
└── all-hands-ai-openhands/
    ├── README.md
    ├── build.sh
    ├── build_vscode.py
    ├── CITATION.cff
    ├── CODE_OF_CONDUCT.md
    ├── COMMUNITY.md
    ├── config.template.toml
    ├── CONTRIBUTING.md
    ├── CREDITS.md
    ├── Development.md
    ├── docker-compose.yml
    ├── ISSUE_TRIAGE.md
    ├── LICENSE
    ├── Makefile
    ├── MANIFEST.in
    ├── pydoc-markdown.yml
    ├── pyproject.toml
    ├── pytest.ini
    ├── README_CN.md
    ├── README_JA.md
    ├── .dockerignore
    ├── .editorconfig
    ├── .nvmrc
    ├── containers/
    │   ├── README.md
    │   ├── build.sh
    │   ├── app/
    │   │   ├── config.sh
    │   │   ├── Dockerfile
    │   │   └── entrypoint.sh
    │   ├── dev/
    │   │   ├── README.md
    │   │   ├── compose.yml
    │   │   ├── dev.sh
    │   │   └── Dockerfile
    │   └── runtime/
    │       ├── README.md
    │       └── config.sh
    ├── dev_config/
    │   └── python/
    │       ├── mypy.ini
    │       ├── ruff.toml
    │       └── .pre-commit-config.yaml
    ├── docs/
    │   ├── README.md
    │   ├── DOC_STYLE_GUIDE.md
    │   ├── docs.json
    │   ├── index.mdx
    │   ├── openapi.json
    │   ├── README_JA.md
    │   ├── static/
    │   │   └── img/
    │   │       ├── backend_architecture.puml
    │   │       └── system_architecture.puml
    │   ├── success-stories/
    │   │   └── index.mdx
    │   └── usage/
    │       ├── about.mdx
    │       ├── agents.mdx
    │       ├── common-settings.mdx
    │       ├── configuration-options.mdx
    │       ├── faqs.mdx
    │       ├── feedback.mdx
    │       ├── getting-started.mdx
    │       ├── installation.mdx
    │       ├── key-features.mdx
    │       ├── local-setup.mdx
    │       ├── mcp.mdx
    │       ├── search-engine-setup.mdx
    │       ├── windows-without-wsl.mdx
    │       ├── architecture/
    │       │   ├── backend.mdx
    │       │   └── runtime.mdx
    │       ├── cloud/
    │       │   ├── bitbucket-installation.mdx
    │       │   ├── cloud-api.mdx
    │       │   ├── cloud-ui.mdx
    │       │   ├── github-installation.mdx
    │       │   ├── gitlab-installation.mdx
    │       │   ├── openhands-cloud.mdx
    │       │   └── slack-installation.mdx
    │       ├── how-to/
    │       │   ├── cli-mode.mdx
    │       │   ├── custom-sandbox-guide.mdx
    │       │   ├── debugging.mdx
    │       │   ├── development-overview.mdx
    │       │   ├── evaluation-harness.mdx
    │       │   ├── github-action.mdx
    │       │   ├── gui-mode.mdx
    │       │   ├── headless-mode.mdx
    │       │   └── websocket-connection.mdx
    │       ├── llms/
    │       │   ├── azure-llms.mdx
    │       │   ├── custom-llm-configs.mdx
    │       │   ├── google-llms.mdx
    │       │   ├── groq.mdx
    │       │   ├── litellm-proxy.mdx
    │       │   ├── llms.mdx
    │       │   ├── local-llms.mdx
    │       │   ├── moonshot.mdx
    │       │   ├── openai-llms.mdx
    │       │   ├── openhands-llms.mdx
    │       │   └── openrouter.mdx
    │       ├── prompting/
    │       │   ├── microagents-keyword.mdx
    │       │   ├── microagents-org.mdx
    │       │   ├── microagents-overview.mdx
    │       │   ├── microagents-public.mdx
    │       │   ├── microagents-repo.mdx
    │       │   ├── prompting-best-practices.mdx
    │       │   └── repository.mdx
    │       ├── runtimes/
    │       │   ├── daytona.mdx
    │       │   ├── docker.mdx
    │       │   ├── e2b.mdx
    │       │   ├── local.mdx
    │       │   ├── modal.mdx
    │       │   ├── overview.mdx
    │       │   ├── remote.mdx
    │       │   └── runloop.mdx
    │       └── troubleshooting/
    │           └── troubleshooting.mdx
    ├── evaluation/
    │   ├── README.md
    │   ├── __init__.py
    │   ├── benchmarks/
    │   │   ├── agent_bench/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── helper.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       ├── run_infer.sh
    │   │   │       └── summarise_results.py
    │   │   ├── aider_bench/
    │   │   │   ├── README.md
    │   │   │   ├── create_dataset.py
    │   │   │   ├── helper.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       ├── run_infer.sh
    │   │   │       └── summarize_results.py
    │   │   ├── biocoder/
    │   │   │   ├── README.md
    │   │   │   ├── run_infer.py
    │   │   │   ├── utils.py
    │   │   │   └── scripts/
    │   │   │       ├── run_infer.sh
    │   │   │       └── setup/
    │   │   │           ├── copy_changed_code.py
    │   │   │           └── remove_code.py
    │   │   ├── bird/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── browsing_delegation/
    │   │   │   ├── README.md
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── commit0/
    │   │   │   ├── README.md
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── discoverybench/
    │   │   │   ├── README.md
    │   │   │   ├── run_infer.py
    │   │   │   ├── eval_utils/
    │   │   │   │   ├── README.md
    │   │   │   │   ├── __init__.py
    │   │   │   │   ├── eval_w_subhypo_gen.py
    │   │   │   │   ├── lm_utils.py
    │   │   │   │   ├── openai_helpers.py
    │   │   │   │   ├── openai_semantic_gen_prompts.py
    │   │   │   │   └── response_parser.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── EDA/
    │   │   │   ├── README.md
    │   │   │   ├── game.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── gaia/
    │   │   │   ├── README.md
    │   │   │   ├── get_score.py
    │   │   │   ├── run_infer.py
    │   │   │   ├── scorer.py
    │   │   │   ├── utils.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── gorilla/
    │   │   │   ├── README.md
    │   │   │   ├── ast_eval_hf.py
    │   │   │   ├── ast_eval_tf.py
    │   │   │   ├── ast_eval_th.py
    │   │   │   ├── run_infer.py
    │   │   │   ├── utils.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── gpqa/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── humanevalfix/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── lca_ci_build_repair/
    │   │   │   ├── README.MD
    │   │   │   ├── config_template.yaml
    │   │   │   ├── eval_infer.py
    │   │   │   ├── run_infer.py
    │   │   │   ├── setup.py
    │   │   │   └── scripts/
    │   │   │       ├── eval_infer.sh
    │   │   │       └── run_infer.sh
    │   │   ├── logic_reasoning/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── Dockerfile
    │   │   │   ├── instruction.txt
    │   │   │   ├── logic_inference.py
    │   │   │   ├── run_infer.py
    │   │   │   ├── scripts/
    │   │   │   │   └── run_infer.sh
    │   │   │   └── .cache_program/
    │   │   │       ├── facts.kfb
    │   │   │       └── rules.krb
    │   │   ├── miniwob/
    │   │   │   ├── README.md
    │   │   │   ├── Dockerfile
    │   │   │   ├── get_avg_reward.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── mint/
    │   │   │   ├── README.md
    │   │   │   ├── config_variables.py
    │   │   │   ├── datatypes.py
    │   │   │   ├── Dockerfile
    │   │   │   ├── env.py
    │   │   │   ├── requirements.txt
    │   │   │   ├── run_infer.py
    │   │   │   ├── utils.py
    │   │   │   ├── prompts/
    │   │   │   │   ├── __init__.py
    │   │   │   │   └── template_with_tool.txt
    │   │   │   ├── scripts/
    │   │   │   │   └── run_infer.sh
    │   │   │   └── tasks/
    │   │   │       ├── __init__.py
    │   │   │       ├── base.py
    │   │   │       ├── codegen.py
    │   │   │       ├── reasoning.py
    │   │   │       └── in_context_examples/
    │   │   │           ├── humaneval/
    │   │   │           │   └── with_tool.txt
    │   │   │           ├── mbpp/
    │   │   │           │   └── with_tool.txt
    │   │   │           └── reasoning/
    │   │   │               └── with_tool.txt
    │   │   ├── ml_bench/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── run_analysis.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       ├── cleanup.sh
    │   │   │       ├── run_analysis.sh
    │   │   │       ├── run_infer.sh
    │   │   │       └── summarise_results.py
    │   │   ├── multi_swe_bench/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── eval_infer.py
    │   │   │   ├── infer.sh
    │   │   │   ├── run_infer.py
    │   │   │   ├── examples/
    │   │   │   │   ├── config.json
    │   │   │   │   ├── output.jsonl
    │   │   │   │   └── patch.jsonl
    │   │   │   ├── resource/
    │   │   │   │   └── mapping.py
    │   │   │   └── scripts/
    │   │   │       ├── run_infer.sh
    │   │   │       ├── data/
    │   │   │       │   └── data_change.py
    │   │   │       ├── eval/
    │   │   │       │   └── convert.py
    │   │   │       └── setup/
    │   │   │           ├── compare_patch_filename.py
    │   │   │           ├── instance_swe_entry.sh
    │   │   │           ├── prepare_swe_utils.sh
    │   │   │           └── swe_entry.sh
    │   │   ├── scienceagentbench/
    │   │   │   ├── README.md
    │   │   │   ├── Dockerfile
    │   │   │   ├── Dockerfile.evaluator
    │   │   │   ├── post_proc.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── swe_bench/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── binary_patch_utils.py
    │   │   │   ├── eval_infer.py
    │   │   │   ├── live_utils.py
    │   │   │   ├── loc_prompt.py
    │   │   │   ├── run_infer.py
    │   │   │   ├── run_infer_interact.py
    │   │   │   ├── run_localize.py
    │   │   │   ├── SWE-bench-Live.md
    │   │   │   ├── SWE-Gym.md
    │   │   │   ├── SWE-Interact.md
    │   │   │   ├── examples/
    │   │   │   │   ├── example_agent_output.jsonl
    │   │   │   │   └── example_model_output.json
    │   │   │   ├── loc_eval/
    │   │   │   │   ├── README.md
    │   │   │   │   ├── __init__.py
    │   │   │   │   ├── loc_evaluator.py
    │   │   │   │   └── loc_utils.py
    │   │   │   ├── prompts/
    │   │   │   │   ├── swe_claude.j2
    │   │   │   │   ├── swe_default.j2
    │   │   │   │   ├── swe_gemini.j2
    │   │   │   │   ├── swe_gpt4.j2
    │   │   │   │   └── swt.j2
    │   │   │   ├── resource/
    │   │   │   │   ├── mapping.py
    │   │   │   │   ├── SWE-Gym__SWE-Gym-train.json
    │   │   │   │   └── swt_bench_constants.py
    │   │   │   ├── scripts/
    │   │   │   │   ├── eval_infer.sh
    │   │   │   │   ├── eval_infer_remote.sh
    │   │   │   │   ├── eval_localization.sh
    │   │   │   │   ├── rollout_swegym.sh
    │   │   │   │   ├── run_infer.sh
    │   │   │   │   ├── run_infer_interact.sh
    │   │   │   │   ├── run_localize.sh
    │   │   │   │   ├── docker/
    │   │   │   │   │   ├── all-swebench-full-instance-images.txt
    │   │   │   │   │   ├── all-swebench-lite-instance-images.txt
    │   │   │   │   │   ├── all-swebench-verified-instance-images.txt
    │   │   │   │   │   ├── get_docker_image_names.py
    │   │   │   │   │   ├── pull_all_eval_docker.sh
    │   │   │   │   │   ├── push_docker_instance_images.py
    │   │   │   │   │   └── push_eval_docker.sh
    │   │   │   │   ├── eval/
    │   │   │   │   │   ├── combine_final_completions.py
    │   │   │   │   │   ├── compare_outputs.py
    │   │   │   │   │   ├── convert_oh_folder_to_swebench_submission.sh
    │   │   │   │   │   ├── convert_oh_output_to_md.py
    │   │   │   │   │   ├── convert_oh_output_to_swe_json.py
    │   │   │   │   │   ├── download_gold_patch.py
    │   │   │   │   │   ├── summarize_outputs.py
    │   │   │   │   │   ├── update_output_with_eval.py
    │   │   │   │   │   └── verify_costs.py
    │   │   │   │   ├── live/
    │   │   │   │   │   └── convert.py
    │   │   │   │   ├── setup/
    │   │   │   │   │   ├── compare_patch_filename.py
    │   │   │   │   │   ├── instance_swe_entry.sh
    │   │   │   │   │   ├── instance_swe_entry_live.sh
    │   │   │   │   │   ├── prepare_swe_utils.sh
    │   │   │   │   │   └── swe_entry.sh
    │   │   │   │   ├── swegym/
    │   │   │   │   │   └── convert_data.ipynb
    │   │   │   │   └── swtbench/
    │   │   │   │       └── convert.py
    │   │   │   └── split/
    │   │   │       └── swegym_verified_instances.json
    │   │   ├── terminal_bench/
    │   │   │   └── README.md
    │   │   ├── testgeneval/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── compute_readability.py
    │   │   │   ├── constants.py
    │   │   │   ├── eval_infer.py
    │   │   │   ├── log_parsers.py
    │   │   │   ├── metrics.py
    │   │   │   ├── NOTES.md
    │   │   │   ├── prompt.py
    │   │   │   ├── pygments_utils.py
    │   │   │   ├── report_utils.py
    │   │   │   ├── run_infer.py
    │   │   │   ├── test_filter.py
    │   │   │   ├── test_spec.py
    │   │   │   ├── utils.py
    │   │   │   └── scripts/
    │   │   │       ├── eval_infer.sh
    │   │   │       ├── run_infer.sh
    │   │   │       ├── docker/
    │   │   │       │   ├── add_testing_dependencies.py
    │   │   │       │   ├── all-swebench-full-instance-images.txt
    │   │   │       │   ├── all-swebench-lite-instance-images.txt
    │   │   │       │   ├── compare_txt_files.py
    │   │   │       │   ├── delete_all_images.sh
    │   │   │       │   └── hf_to_image_list.py
    │   │   │       ├── eval/
    │   │   │       │   ├── build_outputs_ablation.py
    │   │   │       │   ├── compare_outputs.py
    │   │   │       │   ├── convert_oh_folder_to_swebench_submission.sh
    │   │   │       │   ├── convert_oh_output_to_md.py
    │   │   │       │   ├── convert_oh_output_to_swe_json.py
    │   │   │       │   ├── download_gold_test_suites.py
    │   │   │       │   └── summarize_outputs.py
    │   │   │       └── setup/
    │   │   │           ├── instance_swe_entry.sh
    │   │   │           ├── prepare_swe_utils.sh
    │   │   │           └── swe_entry.sh
    │   │   ├── the_agent_company/
    │   │   │   ├── README.md
    │   │   │   ├── browsing.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       ├── run_infer.sh
    │   │   │       └── summarise_results.py
    │   │   ├── toolqa/
    │   │   │   ├── README.md
    │   │   │   ├── Dockerfile
    │   │   │   ├── run_infer.py
    │   │   │   ├── utils.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   ├── versicode/
    │   │   │   ├── README.md
    │   │   │   ├── requirements.txt
    │   │   │   ├── inference_utils/
    │   │   │   │   ├── api_code_migration.py
    │   │   │   │   ├── api_test_block_completion.py
    │   │   │   │   ├── test_block.py
    │   │   │   │   └── test_migration.py
    │   │   │   ├── metric/
    │   │   │   │   ├── compute_ism_pm_score.py
    │   │   │   │   ├── compute_migration_cdc_score.py
    │   │   │   │   ├── compute_versicode_cdc_score.py
    │   │   │   │   └── compute_versicode_em_score.py
    │   │   │   └── output_processing/
    │   │   │       ├── choose_core_line_from_block_versicode.py
    │   │   │       ├── choose_core_line_from_migration_versicode.py
    │   │   │       └── clear_ans.py
    │   │   ├── visual_swe_bench/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       ├── eval_infer.sh
    │   │   │       ├── run_infer.sh
    │   │   │       ├── docker/
    │   │   │       │   ├── all-visualswebench-full-instance-images.txt
    │   │   │       │   └── pull_all_eval_docker.sh
    │   │   │       └── setup/
    │   │   │           └── instance_swe_entry.sh
    │   │   ├── visualwebarena/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── get_success_rate.py
    │   │   │   ├── run_infer.py
    │   │   │   └── scripts/
    │   │   │       └── run_infer.sh
    │   │   └── webarena/
    │   │       ├── README.md
    │   │       ├── __init__.py
    │   │       ├── get_success_rate.py
    │   │       ├── run_infer.py
    │   │       └── scripts/
    │   │           └── run_infer.sh
    │   ├── integration_tests/
    │   │   ├── README.md
    │   │   ├── __init__.py
    │   │   ├── run_infer.py
    │   │   ├── scripts/
    │   │   │   └── run_infer.sh
    │   │   └── tests/
    │   │       ├── __init__.py
    │   │       ├── base.py
    │   │       ├── t01_fix_simple_typo.py
    │   │       ├── t02_add_bash_hello.py
    │   │       ├── t03_jupyter_write_file.py
    │   │       ├── t04_git_staging.py
    │   │       ├── t05_simple_browsing.py
    │   │       ├── t06_github_pr_browsing.py
    │   │       └── t07_interactive_commands.py
    │   ├── regression/
    │   │   ├── README.md
    │   │   ├── conftest.py
    │   │   ├── run_tests.py
    │   │   └── cases/
    │   │       ├── client-server/
    │   │       │   └── task.txt
    │   │       ├── express/
    │   │       │   └── task.txt
    │   │       ├── hello-name/
    │   │       │   ├── task.txt
    │   │       │   └── start/
    │   │       │       └── hello_world.sh
    │   │       ├── hello-world/
    │   │       │   ├── task.txt
    │   │       │   └── test_hello_world.py
    │   │       ├── node-cli-rewrite/
    │   │       │   ├── task.txt
    │   │       │   └── start/
    │   │       │       ├── string_cli.py
    │   │       │       └── commands/
    │   │       │           ├── length.py
    │   │       │           ├── lowercase.py
    │   │       │           ├── reverse.py
    │   │       │           ├── scramble.py
    │   │       │           ├── spongebob.py
    │   │       │           └── uppercase.py
    │   │       ├── python-cli/
    │   │       │   └── task.txt
    │   │       ├── python-cli-help/
    │   │       │   ├── task.txt
    │   │       │   └── start/
    │   │       │       ├── string_cli.py
    │   │       │       └── commands/
    │   │       │           ├── length.py
    │   │       │           ├── lowercase.py
    │   │       │           ├── reverse.py
    │   │       │           ├── scramble.py
    │   │       │           ├── spongebob.py
    │   │       │           └── uppercase.py
    │   │       ├── react-todo/
    │   │       │   └── task.txt
    │   │       └── server-test/
    │   │           ├── task.txt
    │   │           └── start/
    │   │               └── server.py
    │   └── utils/
    │       ├── shared.py
    │       ├── version_control.sh
    │       └── scripts/
    │           └── cleanup_remote_runtime.sh
    ├── frontend/
    │   ├── README.md
    │   ├── global.d.ts
    │   ├── hero.ts
    │   ├── index.html
    │   ├── package.json
    │   ├── playwright.config.ts
    │   ├── postcss.config.js
    │   ├── react-router.config.ts
    │   ├── tailwind.config.js
    │   ├── test-utils.tsx
    │   ├── tsconfig.json
    │   ├── vite-env.d.ts
    │   ├── vite.config.ts
    │   ├── vitest.setup.ts
    │   ├── .env.sample
    │   ├── .eslintrc
    │   ├── .npmrc
    │   ├── .prettierrc.json
    │   ├── __tests__/
    │   │   ├── initial-query.test.tsx
    │   │   ├── microagent-status-indicator.test.tsx
    │   │   ├── parse-pr-url.test.ts
    │   │   ├── api/
    │   │   │   └── file-service/
    │   │   │       └── file-service.api.test.ts
    │   │   ├── components/
    │   │   │   ├── browser.test.tsx
    │   │   │   ├── chat-message.test.tsx
    │   │   │   ├── event-message.test.tsx
    │   │   │   ├── feedback-actions.test.tsx
    │   │   │   ├── feedback-form.test.tsx
    │   │   │   ├── file-operations.test.tsx
    │   │   │   ├── image-preview.test.tsx
    │   │   │   ├── interactive-chat-box.test.tsx
    │   │   │   ├── landing-translations.test.tsx
    │   │   │   ├── likert-scale.test.tsx
    │   │   │   ├── suggestion-item.test.tsx
    │   │   │   ├── suggestions.test.tsx
    │   │   │   ├── upload-image-input.test.tsx
    │   │   │   ├── user-actions.test.tsx
    │   │   │   ├── user-avatar.test.tsx
    │   │   │   ├── buttons/
    │   │   │   │   └── copy-to-clipboard.test.tsx
    │   │   │   ├── chat/
    │   │   │   │   ├── action-suggestions.test.tsx
    │   │   │   │   ├── chat-input.test.tsx
    │   │   │   │   ├── chat-interface.test.tsx
    │   │   │   │   └── expandable-message.test.tsx
    │   │   │   ├── context-menu/
    │   │   │   │   ├── account-settings-context-menu.test.tsx
    │   │   │   │   └── context-menu-list-item.test.tsx
    │   │   │   ├── features/
    │   │   │   │   ├── auth-modal.test.tsx
    │   │   │   │   ├── analytics/
    │   │   │   │   │   └── analytics-consent-form-modal.test.tsx
    │   │   │   │   ├── chat/
    │   │   │   │   │   ├── launch-microagent-modal.test.tsx
    │   │   │   │   │   ├── messages.test.tsx
    │   │   │   │   │   └── path-component.test.tsx
    │   │   │   │   ├── conversation-panel/
    │   │   │   │   │   ├── conversation-card.test.tsx
    │   │   │   │   │   ├── conversation-panel.test.tsx
    │   │   │   │   │   └── utils.ts
    │   │   │   │   ├── home/
    │   │   │   │   │   ├── home-header.test.tsx
    │   │   │   │   │   ├── repo-connector.test.tsx
    │   │   │   │   │   ├── repo-selection-form.test.tsx
    │   │   │   │   │   ├── task-card.test.tsx
    │   │   │   │   │   └── task-suggestions.test.tsx
    │   │   │   │   ├── microagent-management/
    │   │   │   │   │   └── microagent-management.test.tsx
    │   │   │   │   ├── payment/
    │   │   │   │   │   └── payment-form.test.tsx
    │   │   │   │   ├── settings/
    │   │   │   │   │   └── api-keys-manager.test.tsx
    │   │   │   │   └── sidebar/
    │   │   │   │       └── sidebar.test.tsx
    │   │   │   ├── jupyter/
    │   │   │   │   └── jupyter.test.tsx
    │   │   │   ├── modals/
    │   │   │   │   ├── base-modal/
    │   │   │   │   │   └── base-modal.test.tsx
    │   │   │   │   ├── microagents/
    │   │   │   │   │   └── microagent-modal.test.tsx
    │   │   │   │   └── settings/
    │   │   │   │       └── model-selector.test.tsx
    │   │   │   ├── settings/
    │   │   │   │   ├── settings-input.test.tsx
    │   │   │   │   └── settings-switch.test.tsx
    │   │   │   ├── shared/
    │   │   │   │   ├── brand-button.test.tsx
    │   │   │   │   ├── inputs/
    │   │   │   │   │   └── badge-input.test.tsx
    │   │   │   │   └── modals/
    │   │   │   │       └── settings/
    │   │   │   │           └── settings-form.test.tsx
    │   │   │   └── terminal/
    │   │   │       └── terminal.test.tsx
    │   │   ├── context/
    │   │   │   └── ws-client-provider.test.tsx
    │   │   ├── hooks/
    │   │   │   ├── use-click-outside-element.test.tsx
    │   │   │   ├── use-rate.test.ts
    │   │   │   ├── use-terminal.test.tsx
    │   │   │   ├── mutation/
    │   │   │   │   └── use-save-settings.test.tsx
    │   │   │   └── query/
    │   │   │       └── use-feedback-exists.test.tsx
    │   │   ├── i18n/
    │   │   │   ├── duplicate-keys.test.ts
    │   │   │   └── translations.test.tsx
    │   │   ├── routes/
    │   │   │   ├── _oh.test.tsx
    │   │   │   ├── accept-tos.test.tsx
    │   │   │   ├── app-settings.test.tsx
    │   │   │   ├── git-settings.test.tsx
    │   │   │   ├── home-screen.test.tsx
    │   │   │   ├── llm-settings.test.tsx
    │   │   │   ├── secrets-settings.test.tsx
    │   │   │   ├── settings-with-payment.test.tsx
    │   │   │   └── settings.test.tsx
    │   │   ├── services/
    │   │   │   ├── actions.test.tsx
    │   │   │   └── observations.test.tsx
    │   │   └── utils/
    │   │       ├── amount-is-valid.test.ts
    │   │       ├── check-hardcoded-strings.test.tsx
    │   │       ├── convert-raw-providers-to-list.test.ts
    │   │       ├── error-handler.test.ts
    │   │       ├── extract-model-and-provider.test.ts
    │   │       ├── extract-next-page-from-link.test.ts
    │   │       ├── format-ms.test.ts
    │   │       ├── format-time-delta.test.ts
    │   │       ├── group-suggested-tasks.test.ts
    │   │       ├── handle-capture-consent.test.ts
    │   │       ├── has-advanced-settings-set.test.ts
    │   │       ├── i18n-test-utils.tsx
    │   │       ├── is-custom-model.test.ts
    │   │       ├── is-number.test.ts
    │   │       ├── map-provider.test.ts
    │   │       ├── model-name-case-preservation.test.tsx
    │   │       ├── organize-models-and-providers.test.ts
    │   │       ├── parse-github-url.test.ts
    │   │       ├── parse-terminal-output.test.ts
    │   │       └── utils.test.ts
    │   ├── public/
    │   │   ├── browserconfig.xml
    │   │   ├── mockServiceWorker.js
    │   │   ├── robots.txt
    │   │   └── site.webmanifest
    │   ├── scripts/
    │   │   ├── check-translation-completeness.cjs
    │   │   ├── detect-node-version.js
    │   │   └── make-i18n-translations.cjs
    │   ├── src/
    │   │   ├── entry.client.tsx
    │   │   ├── ignore-task-state-map.constant.ts
    │   │   ├── index.css
    │   │   ├── message.d.ts
    │   │   ├── query-client-config.ts
    │   │   ├── react-app-env.d.ts
    │   │   ├── root.tsx
    │   │   ├── routes.ts
    │   │   ├── store.ts
    │   │   ├── tailwind.css
    │   │   ├── api/
    │   │   │   ├── api-keys.ts
    │   │   │   ├── conversation.utils.ts
    │   │   │   ├── invariant-service.ts
    │   │   │   ├── open-hands-axios.ts
    │   │   │   ├── open-hands.ts
    │   │   │   ├── open-hands.types.ts
    │   │   │   ├── secrets-service.ts
    │   │   │   ├── secrets-service.types.ts
    │   │   │   ├── file-service/
    │   │   │   │   ├── file-service.api.ts
    │   │   │   │   └── file-service.types.ts
    │   │   │   ├── memory-service/
    │   │   │   │   └── memory-service.api.ts
    │   │   │   └── suggestions-service/
    │   │   │       └── suggestions-service.api.ts
    │   │   ├── assets/
    │   │   │   ├── arrow.tsx
    │   │   │   ├── calendar.tsx
    │   │   │   ├── chevron-left.tsx
    │   │   │   ├── chevron-right.tsx
    │   │   │   ├── cog-tooth.tsx
    │   │   │   ├── confirm.tsx
    │   │   │   ├── earth.tsx
    │   │   │   ├── pause.tsx
    │   │   │   ├── pencil.tsx
    │   │   │   ├── play.tsx
    │   │   │   ├── reject.tsx
    │   │   │   └── stop.tsx
    │   │   ├── components/
    │   │   │   ├── extension-icon-map.constant.tsx
    │   │   │   ├── features/
    │   │   │   │   ├── analytics/
    │   │   │   │   │   └── analytics-consent-form-modal.tsx
    │   │   │   │   ├── browser/
    │   │   │   │   │   ├── browser-snapshot.tsx
    │   │   │   │   │   ├── browser.tsx
    │   │   │   │   │   └── empty-browser-message.tsx
    │   │   │   │   ├── chat/
    │   │   │   │   │   ├── action-suggestions.tsx
    │   │   │   │   │   ├── chat-input.tsx
    │   │   │   │   │   ├── chat-interface.test.tsx
    │   │   │   │   │   ├── chat-interface.tsx
    │   │   │   │   │   ├── chat-message.tsx
    │   │   │   │   │   ├── chat-suggestions.tsx
    │   │   │   │   │   ├── error-message-banner.tsx
    │   │   │   │   │   ├── error-message.tsx
    │   │   │   │   │   ├── event-message.tsx
    │   │   │   │   │   ├── expandable-message.tsx
    │   │   │   │   │   ├── generic-event-message.tsx
    │   │   │   │   │   ├── interactive-chat-box.tsx
    │   │   │   │   │   ├── mcp-observation-content.tsx
    │   │   │   │   │   ├── messages.tsx
    │   │   │   │   │   ├── mono-component.tsx
    │   │   │   │   │   ├── path-component.tsx
    │   │   │   │   │   ├── success-indicator.tsx
    │   │   │   │   │   ├── typing-indicator.tsx
    │   │   │   │   │   ├── event-content-helpers/
    │   │   │   │   │   │   ├── get-action-content.ts
    │   │   │   │   │   │   ├── get-event-content.tsx
    │   │   │   │   │   │   ├── get-observation-content.ts
    │   │   │   │   │   │   ├── get-observation-result.ts
    │   │   │   │   │   │   ├── parse-message-from-event.ts
    │   │   │   │   │   │   ├── shared.ts
    │   │   │   │   │   │   └── should-render-event.ts
    │   │   │   │   │   └── microagent/
    │   │   │   │   │       ├── launch-microagent-modal.tsx
    │   │   │   │   │       ├── loading-microagent-body.tsx
    │   │   │   │   │       ├── loading-microagent-textarea.tsx
    │   │   │   │   │       ├── microagent-status-indicator.tsx
    │   │   │   │   │       └── microagent-status-toast.tsx
    │   │   │   │   ├── context-menu/
    │   │   │   │   │   ├── account-settings-context-menu.tsx
    │   │   │   │   │   ├── context-menu-list-item.tsx
    │   │   │   │   │   ├── context-menu-separator.tsx
    │   │   │   │   │   └── context-menu.tsx
    │   │   │   │   ├── controls/
    │   │   │   │   │   ├── agent-control-bar.tsx
    │   │   │   │   │   ├── agent-status-bar.tsx
    │   │   │   │   │   ├── controls.tsx
    │   │   │   │   │   └── security-lock.tsx
    │   │   │   │   ├── conversation/
    │   │   │   │   │   └── conversation-tabs.tsx
    │   │   │   │   ├── conversation-panel/
    │   │   │   │   │   ├── budget-display.tsx
    │   │   │   │   │   ├── budget-progress-bar.tsx
    │   │   │   │   │   ├── budget-usage-text.tsx
    │   │   │   │   │   ├── confirm-delete-modal.tsx
    │   │   │   │   │   ├── confirm-stop-modal.tsx
    │   │   │   │   │   ├── conversation-card-context-menu.tsx
    │   │   │   │   │   ├── conversation-card.tsx
    │   │   │   │   │   ├── conversation-panel-wrapper.tsx
    │   │   │   │   │   ├── conversation-panel.tsx
    │   │   │   │   │   ├── conversation-repo-link.tsx
    │   │   │   │   │   ├── conversation-state-indicator.tsx
    │   │   │   │   │   ├── ellipsis-button.tsx
    │   │   │   │   │   ├── exit-conversation-modal.tsx
    │   │   │   │   │   ├── microagents-modal.tsx
    │   │   │   │   │   └── system-message-modal.tsx
    │   │   │   │   ├── diff-viewer/
    │   │   │   │   │   └── file-diff-viewer.tsx
    │   │   │   │   ├── feedback/
    │   │   │   │   │   ├── feedback-form.tsx
    │   │   │   │   │   ├── feedback-modal.tsx
    │   │   │   │   │   └── likert-scale.tsx
    │   │   │   │   ├── files/
    │   │   │   │   │   ├── file-item.tsx
    │   │   │   │   │   └── file-list.tsx
    │   │   │   │   ├── guards/
    │   │   │   │   │   └── email-verification-guard.tsx
    │   │   │   │   ├── home/
    │   │   │   │   │   ├── connect-to-provider-message.tsx
    │   │   │   │   │   ├── home-header.tsx
    │   │   │   │   │   ├── repo-connector.tsx
    │   │   │   │   │   ├── repo-provider-links.tsx
    │   │   │   │   │   ├── repo-selection-form.tsx
    │   │   │   │   │   ├── repository-selection/
    │   │   │   │   │   │   ├── branch-dropdown.tsx
    │   │   │   │   │   │   ├── branch-error-state.tsx
    │   │   │   │   │   │   ├── branch-loading-state.tsx
    │   │   │   │   │   │   ├── index.ts
    │   │   │   │   │   │   ├── repository-dropdown.tsx
    │   │   │   │   │   │   ├── repository-error-state.tsx
    │   │   │   │   │   │   └── repository-loading-state.tsx
    │   │   │   │   │   └── tasks/
    │   │   │   │   │       ├── task-card.tsx
    │   │   │   │   │       ├── task-group.tsx
    │   │   │   │   │       ├── task-issue-number.tsx
    │   │   │   │   │       ├── task-item-title.tsx
    │   │   │   │   │       ├── task-suggestions-skeleton.tsx
    │   │   │   │   │       ├── task-suggestions.tsx
    │   │   │   │   │       └── task.types.ts
    │   │   │   │   ├── images/
    │   │   │   │   │   ├── attach-image-label.tsx
    │   │   │   │   │   ├── image-carousel.tsx
    │   │   │   │   │   ├── image-preview.tsx
    │   │   │   │   │   ├── thumbnail.tsx
    │   │   │   │   │   └── upload-image-input.tsx
    │   │   │   │   ├── jupyter/
    │   │   │   │   │   ├── jupyter-cell-input.tsx
    │   │   │   │   │   ├── jupyter-cell-output.tsx
    │   │   │   │   │   ├── jupyter-cell.tsx
    │   │   │   │   │   └── jupyter.tsx
    │   │   │   │   ├── markdown/
    │   │   │   │   │   ├── anchor.tsx
    │   │   │   │   │   ├── code.tsx
    │   │   │   │   │   ├── list.tsx
    │   │   │   │   │   └── paragraph.tsx
    │   │   │   │   ├── microagent-management/
    │   │   │   │   │   ├── microagent-management-accordion-title.tsx
    │   │   │   │   │   ├── microagent-management-add-microagent-button.tsx
    │   │   │   │   │   ├── microagent-management-add-microagent-modal.tsx
    │   │   │   │   │   ├── microagent-management-content.tsx
    │   │   │   │   │   ├── microagent-management-conversation-stopped.tsx
    │   │   │   │   │   ├── microagent-management-default.tsx
    │   │   │   │   │   ├── microagent-management-error.tsx
    │   │   │   │   │   ├── microagent-management-learn-this-repo.tsx
    │   │   │   │   │   ├── microagent-management-main.tsx
    │   │   │   │   │   ├── microagent-management-microagent-card.tsx
    │   │   │   │   │   ├── microagent-management-no-repositories.tsx
    │   │   │   │   │   ├── microagent-management-opening-pr.tsx
    │   │   │   │   │   ├── microagent-management-repo-microagents.tsx
    │   │   │   │   │   ├── microagent-management-repositories.tsx
    │   │   │   │   │   ├── microagent-management-review-pr.tsx
    │   │   │   │   │   ├── microagent-management-sidebar-header.tsx
    │   │   │   │   │   ├── microagent-management-sidebar-tabs.tsx
    │   │   │   │   │   ├── microagent-management-sidebar.tsx
    │   │   │   │   │   ├── microagent-management-view-microagent-content.tsx
    │   │   │   │   │   ├── microagent-management-view-microagent-header.tsx
    │   │   │   │   │   └── microagent-management-view-microagent.tsx
    │   │   │   │   ├── payment/
    │   │   │   │   │   ├── payment-form.tsx
    │   │   │   │   │   ├── powered-by-stripe-tag.tsx
    │   │   │   │   │   └── setup-payment-modal.tsx
    │   │   │   │   ├── served-host/
    │   │   │   │   │   └── path-form.tsx
    │   │   │   │   ├── settings/
    │   │   │   │   │   ├── api-key-modal-base.tsx
    │   │   │   │   │   ├── api-keys-manager.tsx
    │   │   │   │   │   ├── brand-button.tsx
    │   │   │   │   │   ├── create-api-key-modal.tsx
    │   │   │   │   │   ├── delete-api-key-modal.tsx
    │   │   │   │   │   ├── help-link.tsx
    │   │   │   │   │   ├── input-skeleton.tsx
    │   │   │   │   │   ├── key-status-icon.tsx
    │   │   │   │   │   ├── new-api-key-modal.tsx
    │   │   │   │   │   ├── optional-tag.tsx
    │   │   │   │   │   ├── settings-dropdown-input.tsx
    │   │   │   │   │   ├── settings-input.tsx
    │   │   │   │   │   ├── settings-switch.tsx
    │   │   │   │   │   ├── styled-switch-component.tsx
    │   │   │   │   │   ├── subtext-skeleton.tsx
    │   │   │   │   │   ├── switch-skeleton.tsx
    │   │   │   │   │   ├── app-settings/
    │   │   │   │   │   │   ├── app-settings-inputs-skeleton.tsx
    │   │   │   │   │   │   └── language-input.tsx
    │   │   │   │   │   ├── git-settings/
    │   │   │   │   │   │   ├── bitbucket-token-help-anchor.tsx
    │   │   │   │   │   │   ├── bitbucket-token-input.tsx
    │   │   │   │   │   │   ├── configure-github-repositories-anchor.tsx
    │   │   │   │   │   │   ├── github-settings-inputs-skeleton.tsx
    │   │   │   │   │   │   ├── github-token-help-anchor.tsx
    │   │   │   │   │   │   ├── github-token-input.tsx
    │   │   │   │   │   │   ├── gitlab-token-help-anchor.tsx
    │   │   │   │   │   │   ├── gitlab-token-input.tsx
    │   │   │   │   │   │   └── install-slack-app-anchor.tsx
    │   │   │   │   │   ├── llm-settings/
    │   │   │   │   │   │   └── llm-settings-inputs-skeleton.tsx
    │   │   │   │   │   ├── mcp-settings/
    │   │   │   │   │   │   ├── mcp-config-editor.tsx
    │   │   │   │   │   │   ├── mcp-config-viewer.tsx
    │   │   │   │   │   │   ├── mcp-json-editor.tsx
    │   │   │   │   │   │   ├── mcp-sse-servers.tsx
    │   │   │   │   │   │   └── mcp-stdio-servers.tsx
    │   │   │   │   │   └── secrets-settings/
    │   │   │   │   │       ├── secret-form.tsx
    │   │   │   │   │       └── secret-list-item.tsx
    │   │   │   │   ├── sidebar/
    │   │   │   │   │   ├── avatar.tsx
    │   │   │   │   │   ├── sidebar.tsx
    │   │   │   │   │   ├── user-actions.tsx
    │   │   │   │   │   └── user-avatar.tsx
    │   │   │   │   ├── suggestions/
    │   │   │   │   │   ├── replay-suggestion-box.tsx
    │   │   │   │   │   ├── suggestion-box.tsx
    │   │   │   │   │   ├── suggestion-bubble.tsx
    │   │   │   │   │   ├── suggestion-item.tsx
    │   │   │   │   │   └── suggestions.tsx
    │   │   │   │   ├── terminal/
    │   │   │   │   │   └── terminal.tsx
    │   │   │   │   ├── tips/
    │   │   │   │   │   └── random-tip.tsx
    │   │   │   │   ├── trajectory/
    │   │   │   │   │   └── trajectory-actions.tsx
    │   │   │   │   └── waitlist/
    │   │   │   │       ├── auth-modal.tsx
    │   │   │   │       ├── reauth-modal.tsx
    │   │   │   │       └── tos-checkbox.tsx
    │   │   │   ├── layout/
    │   │   │   │   ├── beta-badge.tsx
    │   │   │   │   ├── container.tsx
    │   │   │   │   ├── count-badge.tsx
    │   │   │   │   ├── nav-tab.tsx
    │   │   │   │   ├── resizable-panel.tsx
    │   │   │   │   ├── scroll-left-button.tsx
    │   │   │   │   ├── scroll-right-button.tsx
    │   │   │   │   ├── served-app-label.tsx
    │   │   │   │   └── tab-content.tsx
    │   │   │   └── shared/
    │   │   │       ├── action-tooltip.tsx
    │   │   │       ├── badge.tsx
    │   │   │       ├── custom-input.tsx
    │   │   │       ├── error-toast.tsx
    │   │   │       ├── git-provider-icon.tsx
    │   │   │       ├── hero-heading.tsx
    │   │   │       ├── loader.tsx
    │   │   │       ├── loading-spinner.tsx
    │   │   │       ├── buttons/
    │   │   │       │   ├── action-button.tsx
    │   │   │       │   ├── all-hands-logo-button.tsx
    │   │   │       │   ├── confirmation-buttons.tsx
    │   │   │       │   ├── conversation-panel-button.tsx
    │   │   │       │   ├── copy-to-clipboard-button.tsx
    │   │   │       │   ├── docs-button.tsx
    │   │   │       │   ├── editor-action-button.tsx
    │   │   │       │   ├── icon-button.tsx
    │   │   │       │   ├── microagent-management-button.tsx
    │   │   │       │   ├── modal-button.tsx
    │   │   │       │   ├── new-project-button.tsx
    │   │   │       │   ├── refresh-button.tsx
    │   │   │       │   ├── refresh-icon-button.tsx
    │   │   │       │   ├── remove-button.tsx
    │   │   │       │   ├── scroll-to-bottom-button.tsx
    │   │   │       │   ├── settings-button.tsx
    │   │   │       │   ├── stop-button.tsx
    │   │   │       │   ├── submit-button.tsx
    │   │   │       │   ├── tooltip-button.tsx
    │   │   │       │   └── trajectory-action-button.tsx
    │   │   │       ├── inputs/
    │   │   │       │   ├── advanced-option-switch.tsx
    │   │   │       │   ├── api-key-input.tsx
    │   │   │       │   ├── badge-input.tsx
    │   │   │       │   ├── base-url-input.tsx
    │   │   │       │   ├── confirmation-mode-switch.tsx
    │   │   │       │   └── custom-model-input.tsx
    │   │   │       └── modals/
    │   │   │           ├── confirmation-modal.tsx
    │   │   │           ├── modal-backdrop.tsx
    │   │   │           ├── modal-body.tsx
    │   │   │           ├── base-modal/
    │   │   │           │   ├── base-modal.tsx
    │   │   │           │   ├── footer-content.tsx
    │   │   │           │   └── header-content.tsx
    │   │   │           ├── confirmation-modals/
    │   │   │           │   ├── base-modal.tsx
    │   │   │           │   └── danger-modal.tsx
    │   │   │           ├── security/
    │   │   │           │   ├── security.tsx
    │   │   │           │   └── invariant/
    │   │   │           │       ├── invariant.tsx
    │   │   │           │       └── assets/
    │   │   │           │           └── logo.tsx
    │   │   │           └── settings/
    │   │   │               ├── model-selector.tsx
    │   │   │               ├── settings-form.tsx
    │   │   │               └── settings-modal.tsx
    │   │   ├── context/
    │   │   │   ├── conversation-subscriptions-provider.tsx
    │   │   │   ├── scroll-context.tsx
    │   │   │   └── ws-client-provider.tsx
    │   │   ├── hooks/
    │   │   │   ├── use-auth-callback.ts
    │   │   │   ├── use-auth-url.ts
    │   │   │   ├── use-auto-login.ts
    │   │   │   ├── use-click-outside-element.ts
    │   │   │   ├── use-conversation-id.ts
    │   │   │   ├── use-create-conversation-and-subscribe-multiple.ts
    │   │   │   ├── use-debounce.ts
    │   │   │   ├── use-document-title-from-state.ts
    │   │   │   ├── use-effect-once.ts
    │   │   │   ├── use-github-auth-url.ts
    │   │   │   ├── use-handle-runtime-active.ts
    │   │   │   ├── use-handle-ws-events.ts
    │   │   │   ├── use-is-creating-conversation.ts
    │   │   │   ├── use-is-on-tos-page.ts
    │   │   │   ├── use-migrate-user-consent.ts
    │   │   │   ├── use-optimistic-user-message.ts
    │   │   │   ├── use-rate.ts
    │   │   │   ├── use-runtime-is-ready.ts
    │   │   │   ├── use-scroll-to-bottom.ts
    │   │   │   ├── use-terminal.ts
    │   │   │   ├── use-track-element-width.ts
    │   │   │   ├── use-user-providers.ts
    │   │   │   ├── use-ws-error-message.ts
    │   │   │   ├── useNotification.ts
    │   │   │   ├── mutation/
    │   │   │   │   ├── use-add-git-providers.ts
    │   │   │   │   ├── use-create-api-key.ts
    │   │   │   │   ├── use-create-conversation.ts
    │   │   │   │   ├── use-create-secret.ts
    │   │   │   │   ├── use-delete-api-key.ts
    │   │   │   │   ├── use-delete-conversation.ts
    │   │   │   │   ├── use-delete-secret.ts
    │   │   │   │   ├── use-get-trajectory.ts
    │   │   │   │   ├── use-logout.ts
    │   │   │   │   ├── use-save-settings.ts
    │   │   │   │   ├── use-stop-conversation.ts
    │   │   │   │   ├── use-submit-conversation-feedback.ts
    │   │   │   │   ├── use-submit-feedback.ts
    │   │   │   │   ├── use-update-conversation.ts
    │   │   │   │   ├── use-update-secret.ts
    │   │   │   │   ├── use-upload-files.ts
    │   │   │   │   └── stripe/
    │   │   │   │       └── use-create-stripe-checkout-session.ts
    │   │   │   └── query/
    │   │   │       ├── use-active-conversation.ts
    │   │   │       ├── use-active-host.ts
    │   │   │       ├── use-ai-config-options.ts
    │   │   │       ├── use-api-keys.ts
    │   │   │       ├── use-balance.ts
    │   │   │       ├── use-config.ts
    │   │   │       ├── use-conversation-config.ts
    │   │   │       ├── use-conversation-microagents.ts
    │   │   │       ├── use-feedback-exists.ts
    │   │   │       ├── use-get-diff.ts
    │   │   │       ├── use-get-git-changes.ts
    │   │   │       ├── use-get-microagents.ts
    │   │   │       ├── use-get-policy.ts
    │   │   │       ├── use-get-risk-severity.ts
    │   │   │       ├── use-get-secrets.ts
    │   │   │       ├── use-get-traces.ts
    │   │   │       ├── use-git-user.ts
    │   │   │       ├── use-is-authed.ts
    │   │   │       ├── use-llm-api-key.ts
    │   │   │       ├── use-microagent-prompt.ts
    │   │   │       ├── use-repository-branches.ts
    │   │   │       ├── use-repository-microagents.ts
    │   │   │       ├── use-search-conversations.ts
    │   │   │       ├── use-search-repositories.ts
    │   │   │       ├── use-settings.ts
    │   │   │       ├── use-suggested-tasks.ts
    │   │   │       ├── use-user-conversation.ts
    │   │   │       ├── use-user-conversations.ts
    │   │   │       ├── use-user-repositories.ts
    │   │   │       └── use-vscode-url.ts
    │   │   ├── i18n/
    │   │   │   ├── declaration.ts
    │   │   │   ├── index.ts
    │   │   │   └── translation.json
    │   │   ├── mocks/
    │   │   │   ├── billing-handlers.ts
    │   │   │   ├── browser.ts
    │   │   │   ├── file-service-handlers.ts
    │   │   │   ├── handlers.ts
    │   │   │   ├── handlers.ws.ts
    │   │   │   ├── mock-ws-helpers.ts
    │   │   │   ├── node.ts
    │   │   │   ├── secrets-handlers.ts
    │   │   │   ├── session-history.mock.ts
    │   │   │   └── task-suggestions-handlers.ts
    │   │   ├── routes/
    │   │   │   ├── accept-tos.tsx
    │   │   │   ├── api-keys.tsx
    │   │   │   ├── app-settings.tsx
    │   │   │   ├── billing.tsx
    │   │   │   ├── browser-tab.tsx
    │   │   │   ├── changes-tab.tsx
    │   │   │   ├── conversation.tsx
    │   │   │   ├── git-settings.tsx
    │   │   │   ├── home.tsx
    │   │   │   ├── jupyter-tab.tsx
    │   │   │   ├── llm-settings.tsx
    │   │   │   ├── mcp-settings.tsx
    │   │   │   ├── microagent-management.tsx
    │   │   │   ├── root-layout.tsx
    │   │   │   ├── secrets-settings.tsx
    │   │   │   ├── served-tab.tsx
    │   │   │   ├── settings.tsx
    │   │   │   ├── terminal-tab.tsx
    │   │   │   ├── user-settings.tsx
    │   │   │   └── vscode-tab.tsx
    │   │   ├── services/
    │   │   │   ├── actions.ts
    │   │   │   ├── agent-state-service.ts
    │   │   │   ├── chat-service.ts
    │   │   │   ├── observations.ts
    │   │   │   ├── settings.ts
    │   │   │   ├── terminal-service.ts
    │   │   │   └── __tests__/
    │   │   │       └── actions.test.ts
    │   │   ├── state/
    │   │   │   ├── agent-slice.tsx
    │   │   │   ├── browser-slice.ts
    │   │   │   ├── code-slice.ts
    │   │   │   ├── command-slice.ts
    │   │   │   ├── file-state-slice.ts
    │   │   │   ├── initial-query-slice.ts
    │   │   │   ├── jupyter-slice.ts
    │   │   │   ├── metrics-slice.ts
    │   │   │   ├── microagent-management-slice.tsx
    │   │   │   ├── security-analyzer-slice.ts
    │   │   │   └── status-slice.ts
    │   │   ├── types/
    │   │   │   ├── action-type.tsx
    │   │   │   ├── agent-state.tsx
    │   │   │   ├── config-type.tsx
    │   │   │   ├── conversation-status.ts
    │   │   │   ├── file-system.d.ts
    │   │   │   ├── git.d.ts
    │   │   │   ├── message.tsx
    │   │   │   ├── microagent-management.tsx
    │   │   │   ├── microagent-status.ts
    │   │   │   ├── observation-type.tsx
    │   │   │   ├── react-query.d.ts
    │   │   │   ├── response-type.tsx
    │   │   │   ├── runtime-status.ts
    │   │   │   ├── settings.ts
    │   │   │   ├── tab-option.tsx
    │   │   │   └── core/
    │   │   │       ├── actions.ts
    │   │   │       ├── base.ts
    │   │   │       ├── guards.ts
    │   │   │       ├── index.ts
    │   │   │       ├── observations.ts
    │   │   │       └── variances.ts
    │   │   ├── utils/
    │   │   │   ├── amount-is-valid.ts
    │   │   │   ├── base64-to-blob.ts
    │   │   │   ├── beep.tsx
    │   │   │   ├── browser-tab.ts
    │   │   │   ├── constants.ts
    │   │   │   ├── convert-file-to-text.ts
    │   │   │   ├── convert-image-to-base-64.ts
    │   │   │   ├── convert-raw-providers-to-list.ts
    │   │   │   ├── custom-toast-handlers.tsx
    │   │   │   ├── download-json.ts
    │   │   │   ├── download-trajectory.ts
    │   │   │   ├── error-handler.ts
    │   │   │   ├── event-logger.ts
    │   │   │   ├── extract-model-and-provider.ts
    │   │   │   ├── extract-next-page-from-link.ts
    │   │   │   ├── feature-flags.ts
    │   │   │   ├── file-validation.ts
    │   │   │   ├── format-ms.ts
    │   │   │   ├── format-time-delta.ts
    │   │   │   ├── generate-auth-url.ts
    │   │   │   ├── get-language-from-path.ts
    │   │   │   ├── get-random-key.ts
    │   │   │   ├── gget-formatted-datetime.ts
    │   │   │   ├── group-suggested-tasks.ts
    │   │   │   ├── handle-capture-consent.ts
    │   │   │   ├── has-advanced-settings-set.ts
    │   │   │   ├── is-custom-model.ts
    │   │   │   ├── is-file-image.ts
    │   │   │   ├── is-number.ts
    │   │   │   ├── is-on-tos-page.ts
    │   │   │   ├── local-storage.ts
    │   │   │   ├── map-provider.ts
    │   │   │   ├── organize-models-and-providers.ts
    │   │   │   ├── parse-cell-content.ts
    │   │   │   ├── parse-github-url.ts
    │   │   │   ├── parse-pr-url.ts
    │   │   │   ├── parse-terminal-output.ts
    │   │   │   ├── retrieve-axios-error-message.ts
    │   │   │   ├── sanitize-query.ts
    │   │   │   ├── settings-utils.ts
    │   │   │   ├── status.ts
    │   │   │   ├── tips.ts
    │   │   │   ├── toast-duration.ts
    │   │   │   ├── toast.tsx
    │   │   │   ├── type-guards.ts
    │   │   │   ├── utils.ts
    │   │   │   ├── verified-models.ts
    │   │   │   ├── vscode-url-helper.ts
    │   │   │   ├── __tests__/
    │   │   │   │   ├── custom-toast-handlers.test.ts
    │   │   │   │   ├── settings-utils.test.ts
    │   │   │   │   ├── toast-duration.test.ts
    │   │   │   │   └── vscode-url-helper.test.ts
    │   │   │   └── suggestions/
    │   │   │       ├── index.ts
    │   │   │       ├── non-repo-suggestions.ts
    │   │   │       └── repo-suggestions.ts
    │   │   └── wrapper/
    │   │       └── event-handler.tsx
    │   ├── tests/
    │   │   ├── conversation-panel.test.ts
    │   │   ├── redirect.spec.ts
    │   │   ├── repo-selection-form.test.tsx
    │   │   ├── settings.spec.ts
    │   │   ├── fixtures/
    │   │   │   └── project.zip
    │   │   └── helpers/
    │   │       └── confirm-settings.ts
    │   └── .husky/
    │       └── pre-commit
    ├── kind/
    │   ├── cluster.yaml
    │   └── manifests/
    │       ├── deployment.yaml
    │       ├── nginx.yaml
    │       ├── role.yaml
    │       ├── roleBinding.yaml
    │       └── service.yaml
    ├── microagents/
    │   ├── README.md
    │   ├── add_agent.md
    │   ├── add_repo_inst.md
    │   ├── address_pr_comments.md
    │   ├── agent_memory.md
    │   ├── bitbucket.md
    │   ├── code-review.md
    │   ├── default-tools.md
    │   ├── docker.md
    │   ├── fix_test.md
    │   ├── flarglebargle.md
    │   ├── github.md
    │   ├── gitlab.md
    │   ├── kubernetes.md
    │   ├── npm.md
    │   ├── pdflatex.md
    │   ├── security.md
    │   ├── ssh.md
    │   ├── swift-linux.md
    │   ├── update_pr_description.md
    │   └── update_test.md
    ├── openhands/
    │   ├── README.md
    │   ├── __init__.py
    │   ├── py.typed
    │   ├── agenthub/
    │   │   ├── README.md
    │   │   ├── __init__.py
    │   │   ├── browsing_agent/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── browsing_agent.py
    │   │   │   ├── response_parser.py
    │   │   │   └── utils.py
    │   │   ├── codeact_agent/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── codeact_agent.py
    │   │   │   ├── function_calling.py
    │   │   │   ├── prompts/
    │   │   │   │   ├── additional_info.j2
    │   │   │   │   ├── in_context_learning_example.j2
    │   │   │   │   ├── in_context_learning_example_suffix.j2
    │   │   │   │   ├── microagent_info.j2
    │   │   │   │   ├── system_prompt.j2
    │   │   │   │   ├── system_prompt_interactive.j2
    │   │   │   │   ├── system_prompt_long_horizon.j2
    │   │   │   │   └── user_prompt.j2
    │   │   │   └── tools/
    │   │   │       ├── __init__.py
    │   │   │       ├── bash.py
    │   │   │       ├── browser.py
    │   │   │       ├── condensation_request.py
    │   │   │       ├── finish.py
    │   │   │       ├── ipython.py
    │   │   │       ├── llm_based_edit.py
    │   │   │       ├── str_replace_editor.py
    │   │   │       └── think.py
    │   │   ├── dummy_agent/
    │   │   │   ├── __init__.py
    │   │   │   └── agent.py
    │   │   ├── loc_agent/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── function_calling.py
    │   │   │   ├── loc_agent.py
    │   │   │   └── tools/
    │   │   │       ├── __init__.py
    │   │   │       ├── explore_structure.py
    │   │   │       └── search_content.py
    │   │   ├── readonly_agent/
    │   │   │   ├── __init__.py
    │   │   │   ├── function_calling.py
    │   │   │   ├── readonly_agent.py
    │   │   │   ├── prompts/
    │   │   │   │   ├── additional_info.j2
    │   │   │   │   ├── in_context_learning_example.j2
    │   │   │   │   ├── in_context_learning_example_suffix.j2
    │   │   │   │   ├── microagent_info.j2
    │   │   │   │   ├── system_prompt.j2
    │   │   │   │   └── user_prompt.j2
    │   │   │   └── tools/
    │   │   │       ├── __init__.py
    │   │   │       ├── glob.py
    │   │   │       ├── grep.py
    │   │   │       └── view.py
    │   │   └── visualbrowsing_agent/
    │   │       ├── README.md
    │   │       ├── __init__.py
    │   │       └── visualbrowsing_agent.py
    │   ├── cli/
    │   │   ├── commands.py
    │   │   ├── main.py
    │   │   ├── settings.py
    │   │   ├── shell_config.py
    │   │   ├── suppress_warnings.py
    │   │   ├── tui.py
    │   │   ├── utils.py
    │   │   └── vscode_extension.py
    │   ├── controller/
    │   │   ├── __init__.py
    │   │   ├── action_parser.py
    │   │   ├── agent.py
    │   │   ├── agent_controller.py
    │   │   ├── replay.py
    │   │   ├── stuck.py
    │   │   └── state/
    │   │       ├── control_flags.py
    │   │       ├── state.py
    │   │       └── state_tracker.py
    │   ├── core/
    │   │   ├── download.py
    │   │   ├── exceptions.py
    │   │   ├── logger.py
    │   │   ├── loop.py
    │   │   ├── main.py
    │   │   ├── message.py
    │   │   ├── message_format.md
    │   │   ├── message_utils.py
    │   │   ├── setup.py
    │   │   ├── config/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── agent_config.py
    │   │   │   ├── cli_config.py
    │   │   │   ├── condenser_config.py
    │   │   │   ├── config_utils.py
    │   │   │   ├── extended_config.py
    │   │   │   ├── kubernetes_config.py
    │   │   │   ├── llm_config.py
    │   │   │   ├── mcp_config.py
    │   │   │   ├── openhands_config.py
    │   │   │   ├── sandbox_config.py
    │   │   │   ├── security_config.py
    │   │   │   └── utils.py
    │   │   ├── const/
    │   │   │   └── guide_url.py
    │   │   └── schema/
    │   │       ├── __init__.py
    │   │       ├── action.py
    │   │       ├── agent.py
    │   │       ├── exit_reason.py
    │   │       └── observation.py
    │   ├── critic/
    │   │   ├── __init__.py
    │   │   ├── base.py
    │   │   └── finish_critic.py
    │   ├── events/
    │   │   ├── __init__.py
    │   │   ├── async_event_store_wrapper.py
    │   │   ├── event.py
    │   │   ├── event_filter.py
    │   │   ├── event_store.py
    │   │   ├── event_store_abc.py
    │   │   ├── nested_event_store.py
    │   │   ├── stream.py
    │   │   ├── tool.py
    │   │   ├── utils.py
    │   │   ├── action/
    │   │   │   ├── __init__.py
    │   │   │   ├── action.py
    │   │   │   ├── agent.py
    │   │   │   ├── browse.py
    │   │   │   ├── commands.py
    │   │   │   ├── empty.py
    │   │   │   ├── files.py
    │   │   │   ├── mcp.py
    │   │   │   └── message.py
    │   │   ├── observation/
    │   │   │   ├── __init__.py
    │   │   │   ├── agent.py
    │   │   │   ├── browse.py
    │   │   │   ├── commands.py
    │   │   │   ├── delegate.py
    │   │   │   ├── empty.py
    │   │   │   ├── error.py
    │   │   │   ├── file_download.py
    │   │   │   ├── files.py
    │   │   │   ├── mcp.py
    │   │   │   ├── observation.py
    │   │   │   ├── reject.py
    │   │   │   └── success.py
    │   │   └── serialization/
    │   │       ├── __init__.py
    │   │       ├── action.py
    │   │       ├── event.py
    │   │       ├── observation.py
    │   │       └── utils.py
    │   ├── experiments/
    │   │   └── experiment_manager.py
    │   ├── integrations/
    │   │   ├── provider.py
    │   │   ├── service_types.py
    │   │   ├── utils.py
    │   │   ├── bitbucket/
    │   │   │   ├── __init__.py
    │   │   │   └── bitbucket_service.py
    │   │   ├── github/
    │   │   │   ├── github_service.py
    │   │   │   └── queries.py
    │   │   ├── gitlab/
    │   │   │   └── gitlab_service.py
    │   │   ├── templates/
    │   │   │   ├── resolver/
    │   │   │   │   ├── summary_prompt.j2
    │   │   │   │   ├── github/
    │   │   │   │   │   ├── issue_comment_conversation_instructions.j2
    │   │   │   │   │   ├── issue_comment_prompt.j2
    │   │   │   │   │   ├── issue_labeled_conversation_instructions.j2
    │   │   │   │   │   ├── issue_labeled_prompt.j2
    │   │   │   │   │   ├── pr_update_conversation_instructions.j2
    │   │   │   │   │   └── pr_update_prompt.j2
    │   │   │   │   ├── gitlab/
    │   │   │   │   │   ├── issue_comment_conversation_instructions.j2
    │   │   │   │   │   ├── issue_comment_prompt.j2
    │   │   │   │   │   ├── issue_labeled_conversation_instructions.j2
    │   │   │   │   │   ├── issue_labeled_prompt.j2
    │   │   │   │   │   ├── mr_update_conversation_instructions.j2
    │   │   │   │   │   └── mr_update_prompt.j2
    │   │   │   │   └── slack/
    │   │   │   │       └── user_message_conversation_instructions.j2
    │   │   │   └── suggested_task/
    │   │   │       ├── failing_checks_prompt.j2
    │   │   │       ├── merge_conflict_prompt.j2
    │   │   │       ├── open_issue_prompt.j2
    │   │   │       └── unresolved_comments_prompt.j2
    │   │   └── vscode/
    │   │       ├── README.md
    │   │       ├── DEVELOPMENT.md
    │   │       ├── LICENSE
    │   │       ├── package.json
    │   │       ├── tsconfig.json
    │   │       ├── .eslintignore
    │   │       ├── .eslintrc.json
    │   │       ├── .prettierrc.json
    │   │       ├── .vscodeignore
    │   │       └── src/
    │   │           ├── extension.ts
    │   │           └── test/
    │   │               ├── runTest.ts
    │   │               └── suite/
    │   │                   ├── extension.test.ts
    │   │                   └── index.ts
    │   ├── io/
    │   │   ├── __init__.py
    │   │   ├── io.py
    │   │   └── json.py
    │   ├── linter/
    │   │   └── __init__.py
    │   ├── llm/
    │   │   ├── __init__.py
    │   │   ├── async_llm.py
    │   │   ├── bedrock.py
    │   │   ├── debug_mixin.py
    │   │   ├── fn_call_converter.py
    │   │   ├── llm.py
    │   │   ├── llm_utils.py
    │   │   ├── metrics.py
    │   │   ├── retry_mixin.py
    │   │   ├── streaming_llm.py
    │   │   └── tool_names.py
    │   ├── mcp/
    │   │   ├── __init__.py
    │   │   ├── client.py
    │   │   ├── tool.py
    │   │   └── utils.py
    │   ├── memory/
    │   │   ├── README.md
    │   │   ├── __init__.py
    │   │   ├── conversation_memory.py
    │   │   ├── memory.py
    │   │   ├── view.py
    │   │   └── condenser/
    │   │       ├── __init__.py
    │   │       ├── condenser.py
    │   │       └── impl/
    │   │           ├── __init__.py
    │   │           ├── amortized_forgetting_condenser.py
    │   │           ├── browser_output_condenser.py
    │   │           ├── conversation_window_condenser.py
    │   │           ├── llm_attention_condenser.py
    │   │           ├── llm_summarizing_condenser.py
    │   │           ├── no_op_condenser.py
    │   │           ├── observation_masking_condenser.py
    │   │           ├── pipeline.py
    │   │           ├── recent_events_condenser.py
    │   │           └── structured_summary_condenser.py
    │   ├── microagent/
    │   │   ├── __init__.py
    │   │   ├── microagent.py
    │   │   ├── types.py
    │   │   └── prompts/
    │   │       └── generate_remember_prompt.j2
    │   ├── resolver/
    │   │   ├── README.md
    │   │   ├── __init__.py
    │   │   ├── io_utils.py
    │   │   ├── issue_handler_factory.py
    │   │   ├── issue_resolver.py
    │   │   ├── resolve_issue.py
    │   │   ├── resolver_output.py
    │   │   ├── send_pull_request.py
    │   │   ├── utils.py
    │   │   ├── visualize_resolver_output.py
    │   │   ├── examples/
    │   │   │   └── openhands-resolver.yml
    │   │   ├── interfaces/
    │   │   │   ├── bitbucket.py
    │   │   │   ├── github.py
    │   │   │   ├── gitlab.py
    │   │   │   ├── issue.py
    │   │   │   └── issue_definitions.py
    │   │   ├── patching/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── apply.py
    │   │   │   ├── exceptions.py
    │   │   │   ├── patch.py
    │   │   │   └── snippets.py
    │   │   └── prompts/
    │   │       ├── guess_success/
    │   │       │   ├── issue-success-check.jinja
    │   │       │   ├── pr-feedback-check.jinja
    │   │       │   ├── pr-review-check.jinja
    │   │       │   └── pr-thread-check.jinja
    │   │       ├── repo_instructions/
    │   │       │   ├── all-hands-ai___openhands-resolver.txt
    │   │       │   ├── all-hands-ai___openhands.txt
    │   │       │   └── rbren___rss-parser.txt
    │   │       └── resolve/
    │   │           ├── basic-conversation-instructions.jinja
    │   │           ├── basic-followup-conversation-instructions.jinja
    │   │           ├── basic-followup.jinja
    │   │           ├── basic-with-tests-conversation-instructions.jinja
    │   │           ├── basic-with-tests.jinja
    │   │           ├── basic.jinja
    │   │           └── pr-changes-summary.jinja
    │   ├── runtime/
    │   │   ├── README.md
    │   │   ├── __init__.py
    │   │   ├── action_execution_server.py
    │   │   ├── base.py
    │   │   ├── file_viewer_server.py
    │   │   ├── runtime_status.py
    │   │   ├── browser/
    │   │   │   ├── __init__.py
    │   │   │   ├── base64.py
    │   │   │   ├── browser_env.py
    │   │   │   └── utils.py
    │   │   ├── builder/
    │   │   │   ├── __init__.py
    │   │   │   ├── base.py
    │   │   │   ├── docker.py
    │   │   │   └── remote.py
    │   │   ├── impl/
    │   │   │   ├── __init__.py
    │   │   │   ├── action_execution/
    │   │   │   │   └── action_execution_client.py
    │   │   │   ├── cli/
    │   │   │   │   ├── __init__.py
    │   │   │   │   └── cli_runtime.py
    │   │   │   ├── docker/
    │   │   │   │   ├── containers.py
    │   │   │   │   └── docker_runtime.py
    │   │   │   ├── kubernetes/
    │   │   │   │   ├── README.md
    │   │   │   │   └── kubernetes_runtime.py
    │   │   │   ├── local/
    │   │   │   │   ├── __init__.py
    │   │   │   │   └── local_runtime.py
    │   │   │   └── remote/
    │   │   │       └── remote_runtime.py
    │   │   ├── mcp/
    │   │   │   ├── config.json
    │   │   │   └── proxy/
    │   │   │       ├── README.md
    │   │   │       ├── __init__.py
    │   │   │       └── manager.py
    │   │   ├── plugins/
    │   │   │   ├── __init__.py
    │   │   │   ├── requirement.py
    │   │   │   ├── agent_skills/
    │   │   │   │   ├── README.md
    │   │   │   │   ├── __init__.py
    │   │   │   │   ├── agentskills.py
    │   │   │   │   ├── file_editor/
    │   │   │   │   │   ├── README.md
    │   │   │   │   │   └── __init__.py
    │   │   │   │   ├── file_ops/
    │   │   │   │   │   ├── __init__.py
    │   │   │   │   │   └── file_ops.py
    │   │   │   │   ├── file_reader/
    │   │   │   │   │   ├── __init__.py
    │   │   │   │   │   └── file_readers.py
    │   │   │   │   ├── repo_ops/
    │   │   │   │   │   ├── __init__.py
    │   │   │   │   │   └── repo_ops.py
    │   │   │   │   └── utils/
    │   │   │   │       ├── config.py
    │   │   │   │       └── dependency.py
    │   │   │   ├── jupyter/
    │   │   │   │   ├── __init__.py
    │   │   │   │   └── execute_server.py
    │   │   │   └── vscode/
    │   │   │       ├── __init__.py
    │   │   │       └── settings.json
    │   │   └── utils/
    │   │       ├── __init__.py
    │   │       ├── bash.py
    │   │       ├── bash_constants.py
    │   │       ├── command.py
    │   │       ├── edit.py
    │   │       ├── file_viewer.py
    │   │       ├── files.py
    │   │       ├── git_handler.py
    │   │       ├── log_capture.py
    │   │       ├── log_streamer.py
    │   │       ├── memory_monitor.py
    │   │       ├── port_lock.py
    │   │       ├── request.py
    │   │       ├── runtime_build.py
    │   │       ├── runtime_init.py
    │   │       ├── singleton.py
    │   │       ├── system.py
    │   │       ├── system_stats.py
    │   │       ├── tenacity_stop.py
    │   │       ├── windows_bash.py
    │   │       ├── windows_exceptions.py
    │   │       ├── runtime_templates/
    │   │       │   └── Dockerfile.j2
    │   │       └── vscode-extensions/
    │   │           ├── hello-world/
    │   │           │   ├── extension.js
    │   │           │   └── package.json
    │   │           └── memory-monitor/
    │   │               ├── README.md
    │   │               ├── extension.js
    │   │               ├── memory_monitor.js
    │   │               ├── package.json
    │   │               └── process_monitor.js
    │   ├── security/
    │   │   ├── README.md
    │   │   ├── __init__.py
    │   │   ├── analyzer.py
    │   │   ├── options.py
    │   │   └── invariant/
    │   │       ├── __init__.py
    │   │       ├── analyzer.py
    │   │       ├── client.py
    │   │       ├── nodes.py
    │   │       ├── parser.py
    │   │       └── policies.py
    │   ├── server/
    │   │   ├── README.md
    │   │   ├── __init__.py
    │   │   ├── __main__.py
    │   │   ├── app.py
    │   │   ├── dependencies.py
    │   │   ├── file_config.py
    │   │   ├── files.py
    │   │   ├── listen.py
    │   │   ├── listen_socket.py
    │   │   ├── middleware.py
    │   │   ├── monitoring.py
    │   │   ├── settings.py
    │   │   ├── shared.py
    │   │   ├── static.py
    │   │   ├── types.py
    │   │   ├── utils.py
    │   │   ├── config/
    │   │   │   └── server_config.py
    │   │   ├── conversation_manager/
    │   │   │   ├── conversation_manager.py
    │   │   │   ├── docker_nested_conversation_manager.py
    │   │   │   └── standalone_conversation_manager.py
    │   │   ├── data_models/
    │   │   │   ├── agent_loop_info.py
    │   │   │   ├── conversation_info.py
    │   │   │   ├── conversation_info_result_set.py
    │   │   │   └── feedback.py
    │   │   ├── mock/
    │   │   │   ├── README.md
    │   │   │   └── listen.py
    │   │   ├── routes/
    │   │   │   ├── conversation.py
    │   │   │   ├── feedback.py
    │   │   │   ├── files.py
    │   │   │   ├── git.py
    │   │   │   ├── health.py
    │   │   │   ├── manage_conversations.py
    │   │   │   ├── mcp.py
    │   │   │   ├── public.py
    │   │   │   ├── secrets.py
    │   │   │   ├── security.py
    │   │   │   ├── settings.py
    │   │   │   └── trajectory.py
    │   │   ├── services/
    │   │   │   └── conversation_service.py
    │   │   ├── session/
    │   │   │   ├── README.md
    │   │   │   ├── __init__.py
    │   │   │   ├── agent_session.py
    │   │   │   ├── conversation.py
    │   │   │   ├── conversation_init_data.py
    │   │   │   └── session.py
    │   │   └── user_auth/
    │   │       ├── __init__.py
    │   │       ├── default_user_auth.py
    │   │       └── user_auth.py
    │   ├── storage/
    │   │   ├── README.md
    │   │   ├── __init__.py
    │   │   ├── files.py
    │   │   ├── google_cloud.py
    │   │   ├── local.py
    │   │   ├── locations.py
    │   │   ├── memory.py
    │   │   ├── s3.py
    │   │   ├── web_hook.py
    │   │   ├── conversation/
    │   │   │   ├── conversation_store.py
    │   │   │   ├── conversation_validator.py
    │   │   │   └── file_conversation_store.py
    │   │   ├── data_models/
    │   │   │   ├── conversation_metadata.py
    │   │   │   ├── conversation_metadata_result_set.py
    │   │   │   ├── conversation_status.py
    │   │   │   ├── settings.py
    │   │   │   └── user_secrets.py
    │   │   ├── secrets/
    │   │   │   ├── file_secrets_store.py
    │   │   │   └── secrets_store.py
    │   │   └── settings/
    │   │       ├── file_settings_store.py
    │   │       └── settings_store.py
    │   └── utils/
    │       ├── README.md
    │       ├── async_utils.py
    │       ├── chunk_localizer.py
    │       ├── conversation_summary.py
    │       ├── ensure_httpx_close.py
    │       ├── http_session.py
    │       ├── import_utils.py
    │       ├── llm.py
    │       ├── prompt.py
    │       ├── search_utils.py
    │       ├── shutdown_listener.py
    │       ├── tenacity_stop.py
    │       └── term_color.py
    ├── openhands-ui/
    │   ├── README.md
    │   ├── index.css
    │   ├── index.ts
    │   ├── package.json
    │   ├── PUBLISHING.md
    │   ├── tsconfig.json
    │   ├── vite.config.ts
    │   ├── vitest.config.ts
    │   ├── vitest.shims.d.ts
    │   ├── .bun-version
    │   ├── components/
    │   │   ├── accordion/
    │   │   │   ├── Accordion.stories.tsx
    │   │   │   ├── Accordion.tsx
    │   │   │   └── components/
    │   │   │       ├── AccordionHeader.tsx
    │   │   │       ├── AccordionItem.tsx
    │   │   │       └── AccordionPanel.tsx
    │   │   ├── button/
    │   │   │   ├── Button.stories.tsx
    │   │   │   ├── Button.tsx
    │   │   │   └── utils.ts
    │   │   ├── checkbox/
    │   │   │   ├── Checkbox.stories.tsx
    │   │   │   └── Checkbox.tsx
    │   │   ├── chip/
    │   │   │   ├── Chip.stories.tsx
    │   │   │   ├── Chip.tsx
    │   │   │   └── utils.ts
    │   │   ├── dialog/
    │   │   │   ├── Dialog.stories.tsx
    │   │   │   └── Dialog.tsx
    │   │   ├── divider/
    │   │   │   ├── Divider.stories.tsx
    │   │   │   └── Divider.tsx
    │   │   ├── icon/
    │   │   │   ├── Icon.stories.tsx
    │   │   │   └── Icon.tsx
    │   │   ├── input/
    │   │   │   ├── Input.stories.tsx
    │   │   │   └── Input.tsx
    │   │   ├── interactive-chip/
    │   │   │   ├── InteractiveChip.stories.tsx
    │   │   │   ├── InteractiveChip.tsx
    │   │   │   └── utils.ts
    │   │   ├── radio-group/
    │   │   │   ├── RadioGroup.stories.tsx
    │   │   │   ├── RadioGroup.tsx
    │   │   │   └── RadioOption.tsx
    │   │   ├── scrollable/
    │   │   │   ├── Scrollable.stories.tsx
    │   │   │   └── Scrollable.tsx
    │   │   ├── select/
    │   │   │   ├── react-select.d.ts
    │   │   │   ├── Select.stories.tsx
    │   │   │   ├── Select.tsx
    │   │   │   └── components/
    │   │   │       ├── DropdownIndicator.tsx
    │   │   │       ├── Option.tsx
    │   │   │       ├── Placeholder.tsx
    │   │   │       └── SingleValue.tsx
    │   │   ├── spinner/
    │   │   │   ├── index.css
    │   │   │   ├── Spinner.stories.tsx
    │   │   │   └── Spinner.tsx
    │   │   ├── tabs/
    │   │   │   ├── Tabs.stories.tsx
    │   │   │   ├── Tabs.tsx
    │   │   │   ├── components/
    │   │   │   │   ├── TabItem.tsx
    │   │   │   │   └── TabScroller.tsx
    │   │   │   └── hooks/
    │   │   │       ├── use-element-overflow.tsx
    │   │   │       └── use-element-scroll.tsx
    │   │   ├── toast/
    │   │   │   ├── Toast.stories.tsx
    │   │   │   ├── Toast.tsx
    │   │   │   ├── ToastManager.tsx
    │   │   │   └── utils.ts
    │   │   ├── toggle/
    │   │   │   ├── Toggle.stories.tsx
    │   │   │   └── Toggle.tsx
    │   │   ├── tooltip/
    │   │   │   ├── Tooltip.stories.tsx
    │   │   │   └── Tooltip.tsx
    │   │   └── typography/
    │   │       ├── BaseTypography.tsx
    │   │       ├── Typography.tsx
    │   │       ├── utils.ts
    │   │       └── stories/
    │   │           ├── Heading.stories.tsx
    │   │           └── Typography.stories.tsx
    │   ├── shared/
    │   │   ├── types.ts
    │   │   ├── hooks/
    │   │   │   └── use-array.ts
    │   │   └── utils/
    │   │       ├── clone-icon.ts
    │   │       ├── cn.ts
    │   │       └── invariant.ts
    │   └── .storybook/
    │       ├── main.ts
    │       ├── preview.tsx
    │       └── prompt.txt
    ├── tests/
    │   ├── test_fileops.py
    │   ├── e2e/
    │   │   └── test_local_runtime.py
    │   ├── runtime/
    │   │   ├── README.md
    │   │   ├── conftest.py
    │   │   ├── test_aci_edit.py
    │   │   ├── test_bash.py
    │   │   ├── test_browsergym_envs.py
    │   │   ├── test_browsing.py
    │   │   ├── test_docker_images.py
    │   │   ├── test_env_vars.py
    │   │   ├── test_glob_and_grep.py
    │   │   ├── test_ipython.py
    │   │   ├── test_llm_based_edit.py
    │   │   ├── test_mcp_action.py
    │   │   ├── test_microagent.py
    │   │   ├── test_port_locking_fix.py
    │   │   ├── test_replay.py
    │   │   ├── test_runtime_resource.py
    │   │   ├── test_setup.py
    │   │   ├── test_stress_remote_runtime.py
    │   │   ├── trajs/
    │   │   │   ├── basic.json
    │   │   │   ├── basic_gui_mode.json
    │   │   │   ├── basic_interactions.json
    │   │   │   └── wrong_initial_state.json
    │   │   └── utils/
    │   │       └── test_system_stats.py
    │   └── unit/
    │       ├── README.md
    │       ├── test_acompletion.py
    │       ├── test_action_serialization.py
    │       ├── test_agent_controller.py
    │       ├── test_agent_delegation.py
    │       ├── test_agent_session.py
    │       ├── test_agent_skill.py
    │       ├── test_agents.py
    │       ├── test_arg_parser.py
    │       ├── test_async_utils.py
    │       ├── test_auto_generate_title.py
    │       ├── test_bash_parsing.py
    │       ├── test_bash_ps1_metadata.py
    │       ├── test_bash_session.py
    │       ├── test_bitbucket.py
    │       ├── test_browsing_agent_parser.py
    │       ├── test_chunk_localizer.py
    │       ├── test_cli.py
    │       ├── test_cli_alias_setup.py
    │       ├── test_cli_commands.py
    │       ├── test_cli_default_model.py
    │       ├── test_cli_pause_resume.py
    │       ├── test_cli_settings.py
    │       ├── test_cli_setup_flow.py
    │       ├── test_cli_suppress_warnings.py
    │       ├── test_cli_thought_order.py
    │       ├── test_cli_tui.py
    │       ├── test_cli_utils.py
    │       ├── test_cli_vi_mode.py
    │       ├── test_cli_workspace.py
    │       ├── test_command_success.py
    │       ├── test_condenser.py
    │       ├── test_config.py
    │       ├── test_config_dict_casting.py
    │       ├── test_config_extended.py
    │       ├── test_contextual_events.py
    │       ├── test_control_flags.py
    │       ├── test_conversation.py
    │       ├── test_conversation_memory.py
    │       ├── test_conversation_routes.py
    │       ├── test_conversation_summary.py
    │       ├── test_conversation_window_condenser.py
    │       ├── test_docker_runtime.py
    │       ├── test_empty_image_url_fix_v2.py
    │       ├── test_ensure_httpx_close.py
    │       ├── test_event_serialization.py
    │       ├── test_event_stream.py
    │       ├── test_exit_reason.py
    │       ├── test_file_conversation_store.py
    │       ├── test_file_edit_observation.py
    │       ├── test_file_settings_store.py
    │       ├── test_function_calling.py
    │       ├── test_get_repository_microagents.py
    │       ├── test_git_handler.py
    │       ├── test_git_handler_real.py
    │       ├── test_git_hooks.py
    │       ├── test_github_service.py
    │       ├── test_gitlab.py
    │       ├── test_image_content_validation.py
    │       ├── test_import_utils.py
    │       ├── test_io.py
    │       ├── test_is_stuck.py
    │       ├── test_json.py
    │       ├── test_json_encoder.py
    │       ├── test_kubernetes_config.py
    │       ├── test_listen.py
    │       ├── test_llm.py
    │       ├── test_llm_config.py
    │       ├── test_llm_draft_config.py
    │       ├── test_llm_fncall_converter.py
    │       ├── test_log_streamer.py
    │       ├── test_logger.py
    │       ├── test_logger_litellm.py
    │       ├── test_logging.py
    │       ├── test_mcp_action_observation.py
    │       ├── test_mcp_config.py
    │       ├── test_mcp_create_clients_timeout.py
    │       ├── test_mcp_routes.py
    │       ├── test_mcp_timeout.py
    │       ├── test_mcp_tool_timeout_stall.py
    │       ├── test_mcp_utils.py
    │       ├── test_memory.py
    │       ├── test_message_serialization.py
    │       ├── test_message_utils.py
    │       ├── test_microagent_no_header.py
    │       ├── test_microagent_utils.py
    │       ├── test_middleware.py
    │       ├── test_nested_event_store.py
    │       ├── test_observation_serialization.py
    │       ├── test_openapi_schema_generation.py
    │       ├── test_patch_whitespace.py
    │       ├── test_prompt_caching.py
    │       ├── test_prompt_manager.py
    │       ├── test_provider_immutability.py
    │       ├── test_runtime_build.py
    │       ├── test_runtime_git_tokens.py
    │       ├── test_runtime_gitlab_microagents.py
    │       ├── test_runtime_import_robustness.py
    │       ├── test_runtime_reboot.py
    │       ├── test_search_utils.py
    │       ├── test_secret_store.py
    │       ├── test_secrets_api.py
    │       ├── test_security.py
    │       ├── test_session.py
    │       ├── test_settings.py
    │       ├── test_settings_api.py
    │       ├── test_settings_store_functions.py
    │       ├── test_setup.py
    │       ├── test_shutdown_listener.py
    │       ├── test_socket_events.py
    │       ├── test_standalone_conversation_manager.py
    │       ├── test_state.py
    │       ├── test_storage.py
    │       ├── test_suggested_tasks.py
    │       ├── test_user_microagents.py
    │       ├── test_view.py
    │       ├── test_windows_bash.py
    │       ├── cli/
    │       │   └── test_vscode_extension.py
    │       ├── core/
    │       │   └── config/
    │       │       └── test_config_utils.py
    │       ├── frontend/
    │       │   └── test_translation_completeness.py
    │       └── resolver/
    │           ├── test_issue_handler_factory.py
    │           ├── test_issue_references.py
    │           ├── test_patch_apply.py
    │           ├── test_resolve_issue.py
    │           ├── github/
    │           │   ├── test_guess_success.py
    │           │   ├── test_issue_handler.py
    │           │   ├── test_issue_handler_error_handling.py
    │           │   ├── test_pr_handler_guess_success.py
    │           │   ├── test_pr_title_escaping.py
    │           │   ├── test_resolve_issues.py
    │           │   └── test_send_pull_request.py
    │           ├── gitlab/
    │           │   ├── test_gitlab_guess_success.py
    │           │   ├── test_gitlab_issue_handler.py
    │           │   ├── test_gitlab_issue_handler_error_handling.py
    │           │   ├── test_gitlab_pr_handler_guess_success.py
    │           │   ├── test_gitlab_pr_title_escaping.py
    │           │   ├── test_gitlab_resolve_issues.py
    │           │   └── test_gitlab_send_pull_request.py
    │           └── mock_output/
    │               ├── output.jsonl
    │               └── repo/
    │                   └── src/
    │                       ├── App.css
    │                       ├── App.tsx
    │                       ├── PullRequestViewer.test.tsx
    │                       └── PullRequestViewer.tsx
    ├── third_party/
    │   ├── __init__.py
    │   ├── containers/
    │   │   └── e2b-sandbox/
    │   │       ├── README.md
    │   │       ├── Dockerfile
    │   │       └── e2b.toml
    │   └── runtime/
    │       ├── __init__.py
    │       └── impl/
    │           ├── __init__.py
    │           ├── daytona/
    │           │   ├── README.md
    │           │   ├── __init__.py
    │           │   └── daytona_runtime.py
    │           ├── e2b/
    │           │   ├── README.md
    │           │   ├── __init__.py
    │           │   ├── e2b_runtime.py
    │           │   ├── filestore.py
    │           │   └── sandbox.py
    │           ├── modal/
    │           │   ├── __init__.py
    │           │   └── modal_runtime.py
    │           └── runloop/
    │               ├── README.md
    │               ├── __init__.py
    │               └── runloop_runtime.py
    ├── .devcontainer/
    │   ├── devcontainer.json
    │   └── setup.sh
    ├── .github/
    │   ├── CODEOWNERS
    │   ├── dependabot.yml
    │   ├── pull_request_template.md
    │   ├── ISSUE_TEMPLATE/
    │   │   ├── bug_template.yml
    │   │   └── feature_request.md
    │   ├── scripts/
    │   │   └── check_version_consistency.py
    │   └── workflows/
    │       ├── clean-up.yml
    │       ├── fe-unit-tests.yml
    │       ├── ghcr-build.yml
    │       ├── integration-runner.yml
    │       ├── lint-fix.yml
    │       ├── lint.yml
    │       ├── npm-publish-ui.yml
    │       ├── openhands-resolver.yml
    │       ├── py-tests.yml
    │       ├── pypi-release.yml
    │       ├── run-eval.yml
    │       ├── stale.yml
    │       ├── ui-build.yml
    │       └── vscode-extension-build.yml
    └── .openhands/
        ├── pre-commit.sh
        ├── setup.sh
        └── microagents/
            ├── documentation.md
            ├── glossary.md
            └── repo.md


Files Content:

(Files content cropped to 300k characters, download full ingest to see more)
================================================
FILE: README.md
================================================
<a name="readme-top"></a>

<div align="center">
  <img src="./docs/static/img/logo.png" alt="Logo" width="200">
  <h1 align="center">OpenHands: Code Less, Make More</h1>
</div>


<div align="center">
  <a href="https://github.com/All-Hands-AI/OpenHands/graphs/contributors"><img src="https://img.shields.io/github/contributors/All-Hands-AI/OpenHands?style=for-the-badge&color=blue" alt="Contributors"></a>
  <a href="https://github.com/All-Hands-AI/OpenHands/stargazers"><img src="https://img.shields.io/github/stars/All-Hands-AI/OpenHands?style=for-the-badge&color=blue" alt="Stargazers"></a>
  <a href="https://github.com/All-Hands-AI/OpenHands/blob/main/LICENSE"><img src="https://img.shields.io/github/license/All-Hands-AI/OpenHands?style=for-the-badge&color=blue" alt="MIT License"></a>
  <br/>
  <a href="https://join.slack.com/t/openhands-ai/shared_invite/zt-3847of6xi-xuYJIPa6YIPg4ElbDWbtSA"><img src="https://img.shields.io/badge/Slack-Join%20Us-red?logo=slack&logoColor=white&style=for-the-badge" alt="Join our Slack community"></a>
  <a href="https://discord.gg/ESHStjSjD4"><img src="https://img.shields.io/badge/Discord-Join%20Us-purple?logo=discord&logoColor=white&style=for-the-badge" alt="Join our Discord community"></a>
  <a href="https://github.com/All-Hands-AI/OpenHands/blob/main/CREDITS.md"><img src="https://img.shields.io/badge/Project-Credits-blue?style=for-the-badge&color=FFE165&logo=github&logoColor=white" alt="Credits"></a>
  <br/>
  <a href="https://docs.all-hands.dev/usage/getting-started"><img src="https://img.shields.io/badge/Documentation-000?logo=googledocs&logoColor=FFE165&style=for-the-badge" alt="Check out the documentation"></a>
  <a href="https://arxiv.org/abs/2407.16741"><img src="https://img.shields.io/badge/Paper%20on%20Arxiv-000?logoColor=FFE165&logo=arxiv&style=for-the-badge" alt="Paper on Arxiv"></a>
  <a href="https://docs.google.com/spreadsheets/d/1wOUdFCMyY6Nt0AIqF705KN4JKOWgeI4wUGUP60krXXs/edit?gid=0#gid=0"><img src="https://img.shields.io/badge/Benchmark%20score-000?logoColor=FFE165&logo=huggingface&style=for-the-badge" alt="Evaluation Benchmark Score"></a>

  <!-- Keep these links. Translations will automatically update with the README. -->
  <a href="https://www.readme-i18n.com/All-Hands-AI/OpenHands?lang=de">Deutsch</a> |
  <a href="https://www.readme-i18n.com/All-Hands-AI/OpenHands?lang=es">Español</a> |
  <a href="https://www.readme-i18n.com/All-Hands-AI/OpenHands?lang=fr">français</a> |
  <a href="https://www.readme-i18n.com/All-Hands-AI/OpenHands?lang=ja">日本語</a> |
  <a href="https://www.readme-i18n.com/All-Hands-AI/OpenHands?lang=ko">한국어</a> |
  <a href="https://www.readme-i18n.com/All-Hands-AI/OpenHands?lang=pt">Português</a> |
  <a href="https://www.readme-i18n.com/All-Hands-AI/OpenHands?lang=ru">Русский</a> |
  <a href="https://www.readme-i18n.com/All-Hands-AI/OpenHands?lang=zh">中文</a>

  <hr>
</div>

Welcome to OpenHands (formerly OpenDevin), a platform for software development agents powered by AI.

OpenHands agents can do anything a human developer can: modify code, run commands, browse the web,
call APIs, and yes—even copy code snippets from StackOverflow.

Learn more at [docs.all-hands.dev](https://docs.all-hands.dev), or [sign up for OpenHands Cloud](https://app.all-hands.dev) to get started.

> [!IMPORTANT]
> Using OpenHands for work? We'd love to chat! Fill out
> [this short form](https://docs.google.com/forms/d/e/1FAIpQLSet3VbGaz8z32gW9Wm-Grl4jpt5WgMXPgJ4EDPVmCETCBpJtQ/viewform)
> to join our Design Partner program, where you'll get early access to commercial features and the opportunity to provide input on our product roadmap.

![App screenshot](./docs/static/img/screenshot.png)

## ☁️ OpenHands Cloud
The easiest way to get started with OpenHands is on [OpenHands Cloud](https://app.all-hands.dev),
which comes with $20 in free credits for new users.

## 💻 Running OpenHands Locally

OpenHands can also run on your local system using Docker.
See the [Running OpenHands](https://docs.all-hands.dev/usage/installation) guide for
system requirements and more information.

> [!WARNING]
> On a public network? See our [Hardened Docker Installation Guide](https://docs.all-hands.dev/usage/runtimes/docker#hardened-docker-installation)
> to secure your deployment by restricting network binding and implementing additional security measures.


```bash
docker pull docker.all-hands.dev/all-hands-ai/runtime:0.49-nikolaik

docker run -it --rm --pull=always \
    -e SANDBOX_RUNTIME_CONTAINER_IMAGE=docker.all-hands.dev/all-hands-ai/runtime:0.49-nikolaik \
    -e LOG_ALL_EVENTS=true \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v ~/.openhands:/.openhands \
    -p 3000:3000 \
    --add-host host.docker.internal:host-gateway \
    --name openhands-app \
    docker.all-hands.dev/all-hands-ai/openhands:0.49
```

> **Note**: If you used OpenHands before version 0.44, you may want to run `mv ~/.openhands-state ~/.openhands` to migrate your conversation history to the new location.

You'll find OpenHands running at [http://localhost:3000](http://localhost:3000)!

When you open the application, you'll be asked to choose an LLM provider and add an API key.
[Anthropic's Claude Sonnet 4](https://www.anthropic.com/api) (`anthropic/claude-sonnet-4-20250514`)
works best, but you have [many options](https://docs.all-hands.dev/usage/llms).

## 💡 Other ways to run OpenHands

> [!WARNING]
> OpenHands is meant to be run by a single user on their local workstation.
> It is not appropriate for multi-tenant deployments where multiple users share the same instance. There is no built-in authentication, isolation, or scalability.
>
> If you're interested in running OpenHands in a multi-tenant environment, check out the source-available, commercially-licensed
> [OpenHands Cloud Helm Chart](https://github.com/all-Hands-AI/OpenHands-cloud)

You can [connect OpenHands to your local filesystem](https://docs.all-hands.dev/usage/runtimes/docker#connecting-to-your-filesystem),
run OpenHands in a scriptable [headless mode](https://docs.all-hands.dev/usage/how-to/headless-mode),
interact with it via a [friendly CLI](https://docs.all-hands.dev/usage/how-to/cli-mode),
or run it on tagged issues with [a github action](https://docs.all-hands.dev/usage/how-to/github-action).

Visit [Running OpenHands](https://docs.all-hands.dev/usage/installation) for more information and setup instructions.

If you want to modify the OpenHands source code, check out [Development.md](https://github.com/All-Hands-AI/OpenHands/blob/main/Development.md).

Having issues? The [Troubleshooting Guide](https://docs.all-hands.dev/usage/troubleshooting) can help.

## 📖 Documentation
  <a href="https://deepwiki.com/All-Hands-AI/OpenHands"><img src="https://deepwiki.com/badge.svg" alt="Ask DeepWiki" title="Autogenerated Documentation by DeepWiki"></a>

To learn more about the project, and for tips on using OpenHands,
check out our [documentation](https://docs.all-hands.dev/usage/getting-started).

There you'll find resources on how to use different LLM providers,
troubleshooting resources, and advanced configuration options.

## 🤝 How to Join the Community

OpenHands is a community-driven project, and we welcome contributions from everyone. We do most of our communication
through Slack, so this is the best place to start, but we also are happy to have you contact us on Discord or Github:

- [Join our Slack workspace](https://join.slack.com/t/openhands-ai/shared_invite/zt-3847of6xi-xuYJIPa6YIPg4ElbDWbtSA) - Here we talk about research, architecture, and future development.
- [Join our Discord server](https://discord.gg/ESHStjSjD4) - This is a community-run server for general discussion, questions, and feedback.
- [Read or post Github Issues](https://github.com/All-Hands-AI/OpenHands/issues) - Check out the issues we're working on, or add your own ideas.

See more about the community in [COMMUNITY.md](./COMMUNITY.md) or find details on contributing in [CONTRIBUTING.md](./CONTRIBUTING.md).

## 📈 Progress

See the monthly OpenHands roadmap [here](https://github.com/orgs/All-Hands-AI/projects/1) (updated at the maintainer's meeting at the end of each month).

<p align="center">
  <a href="https://star-history.com/#All-Hands-AI/OpenHands&Date">
    <img src="https://api.star-history.com/svg?repos=All-Hands-AI/OpenHands&type=Date" width="500" alt="Star History Chart">
  </a>
</p>

## 📜 License

Distributed under the MIT License. See [`LICENSE`](./LICENSE) for more information.

## 🙏 Acknowledgements

OpenHands is built by a large number of contributors, and every contribution is greatly appreciated! We also build upon other open source projects, and we are deeply thankful for their work.

For a list of open source projects and licenses used in OpenHands, please see our [CREDITS.md](./CREDITS.md) file.

## 📚 Cite

```
@inproceedings{
  wang2025openhands,
  title={OpenHands: An Open Platform for {AI} Software Developers as Generalist Agents},
  author={Xingyao Wang and Boxuan Li and Yufan Song and Frank F. Xu and Xiangru Tang and Mingchen Zhuge and Jiayi Pan and Yueqi Song and Bowen Li and Jaskirat Singh and Hoang H. Tran and Fuqiang Li and Ren Ma and Mingzhang Zheng and Bill Qian and Yanjun Shao and Niklas Muennighoff and Yizhe Zhang and Binyuan Hui and Junyang Lin and Robert Brennan and Hao Peng and Heng Ji and Graham Neubig},
  booktitle={The Thirteenth International Conference on Learning Representations},
  year={2025},
  url={https://openreview.net/forum?id=OJd3ayDDoF}
}
```



================================================
FILE: build.sh
================================================
#!/usr/bin/env bash
set -e

poetry build -v



================================================
FILE: build_vscode.py
================================================
import os
import pathlib
import subprocess

# This script is intended to be run by Poetry during the build process.

# Define the expected name of the .vsix file based on the extension's package.json
# This should match the name and version in openhands-vscode/package.json
EXTENSION_NAME = 'openhands-vscode'
EXTENSION_VERSION = '0.0.1'
VSIX_FILENAME = f'{EXTENSION_NAME}-{EXTENSION_VERSION}.vsix'

# Paths
ROOT_DIR = pathlib.Path(__file__).parent.resolve()
VSCODE_EXTENSION_DIR = ROOT_DIR / 'openhands' / 'integrations' / 'vscode'


def check_node_version():
    """Check if Node.js version is sufficient for building the extension."""
    try:
        result = subprocess.run(
            ['node', '--version'], capture_output=True, text=True, check=True
        )
        version_str = result.stdout.strip()
        # Extract major version number (e.g., "v12.22.9" -> 12)
        major_version = int(version_str.lstrip('v').split('.')[0])
        return major_version >= 18  # Align with frontend actual usage (18.20.1)
    except (subprocess.CalledProcessError, FileNotFoundError, ValueError):
        return False


def build_vscode_extension():
    """Builds the VS Code extension."""
    vsix_path = VSCODE_EXTENSION_DIR / VSIX_FILENAME

    # Check if VSCode extension build is disabled via environment variable
    if os.environ.get('SKIP_VSCODE_BUILD', '').lower() in ('1', 'true', 'yes'):
        print('--- Skipping VS Code extension build (SKIP_VSCODE_BUILD is set) ---')
        if vsix_path.exists():
            print(f'--- Using existing VS Code extension: {vsix_path} ---')
        else:
            print('--- No pre-built VS Code extension found ---')
        return

    # Check Node.js version - if insufficient, use pre-built extension as fallback
    if not check_node_version():
        print('--- Warning: Node.js version < 18 detected or Node.js not found ---')
        print('--- Skipping VS Code extension build (requires Node.js >= 18) ---')
        print('--- Using pre-built extension if available ---')

        if not vsix_path.exists():
            print('--- Warning: No pre-built VS Code extension found ---')
            print('--- VS Code extension will not be available ---')
        else:
            print(f'--- Using pre-built VS Code extension: {vsix_path} ---')
        return

    print(f'--- Building VS Code extension in {VSCODE_EXTENSION_DIR} ---')

    try:
        # Ensure npm dependencies are installed
        print('--- Running npm install for VS Code extension ---')
        subprocess.run(
            ['npm', 'install'],
            cwd=VSCODE_EXTENSION_DIR,
            check=True,
            shell=os.name == 'nt',
        )

        # Package the extension
        print(f'--- Packaging VS Code extension ({VSIX_FILENAME}) ---')
        subprocess.run(
            ['npm', 'run', 'package-vsix'],
            cwd=VSCODE_EXTENSION_DIR,
            check=True,
            shell=os.name == 'nt',
        )

        # Verify the generated .vsix file exists
        if not vsix_path.exists():
            raise FileNotFoundError(
                f'VS Code extension package not found after build: {vsix_path}'
            )

        print(f'--- VS Code extension built successfully: {vsix_path} ---')

    except subprocess.CalledProcessError as e:
        print(f'--- Warning: Failed to build VS Code extension: {e} ---')
        print('--- Continuing without building extension ---')
        if not vsix_path.exists():
            print('--- Warning: No pre-built VS Code extension found ---')
            print('--- VS Code extension will not be available ---')


def build(setup_kwargs):
    """
    This function is called by Poetry during the build process.
    `setup_kwargs` is a dictionary that will be passed to `setuptools.setup()`.
    """
    print('--- Running custom Poetry build script (build_vscode.py) ---')

    # Build the VS Code extension and place the .vsix file
    build_vscode_extension()

    # Poetry will handle including files based on pyproject.toml `include` patterns.
    # Ensure openhands/integrations/vscode/*.vsix is included there.

    print('--- Custom Poetry build script (build_vscode.py) finished ---')


if __name__ == '__main__':
    print('Running build_vscode.py directly for testing VS Code extension packaging...')
    build_vscode_extension()
    print('Direct execution of build_vscode.py finished.')



================================================
FILE: CITATION.cff
================================================
cff-version: 1.2.0
message: "If you use this software, please cite it using the following metadata."
title: "OpenHands: An Open Platform for AI Software Developers as Generalist Agents"
authors:
  - family-names: Wang
    given-names: Xingyao
  - family-names: Li
    given-names: Boxuan
  - family-names: Song
    given-names: Yufan
  - family-names: Xu
    given-names: Frank F.
  - family-names: Tang
    given-names: Xiangru
  - family-names: Zhuge
    given-names: Mingchen
  - family-names: Pan
    given-names: Jiayi
  - family-names: Song
    given-names: Yueqi
  - family-names: Li
    given-names: Bowen
  - family-names: Singh
    given-names: Jaskirat
  - family-names: Tran
    given-names: Hoang H.
  - family-names: Li
    given-names: Fuqiang
  - family-names: Ma
    given-names: Ren
  - family-names: Zheng
    given-names: Mingzhang
  - family-names: Qian
    given-names: Bill
  - family-names: Shao
    given-names: Yanjun
  - family-names: Muennighoff
    given-names: Niklas
  - family-names: Zhang
    given-names: Yizhe
  - family-names: Hui
    given-names: Binyuan
  - family-names: Lin
    given-names: Junyang
  - family-names: Brennan
    given-names: Robert
  - family-names: Peng
    given-names: Hao
  - family-names: Ji
    given-names: Heng
  - family-names: Neubig
    given-names: Graham
year: 2024
doi: "10.48550/arXiv.2407.16741"
url: "https://arxiv.org/abs/2407.16741"



================================================
FILE: CODE_OF_CONDUCT.md
================================================

# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, caste, color, religion, or sexual
identity and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people.
* Being respectful of differing opinions, viewpoints, and experiences.
* Giving and gracefully accepting constructive feedback.
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience.
* Focusing on what is best not just for us as individuals, but for the overall
  community.

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or advances of
  any kind.
* Trolling, insulting or derogatory comments, and personal or political attacks.
* Public or private harassment.
* Publishing others' private information, such as a physical or email address,
  without their explicit permission.
* Other conduct which could reasonably be considered inappropriate in a
  professional setting.

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official email address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
contact@all-hands.dev.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series of
actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or permanent
ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior, harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within the
community.

### Slack and Discord Etiquettes

These Slack and Discord etiquette guidelines are designed to foster an inclusive, respectful, and productive environment for all community members. By following these best practices, we ensure effective communication and collaboration while minimizing disruptions. Let’s work together to build a supportive and welcoming community!

- Communicate respectfully and professionally, avoiding sarcasm or harsh language, and remember that tone can be difficult to interpret in text.
- Use threads for specific discussions to keep channels organized and easier to follow.
- Tag others only when their input is critical or urgent, and use @here, @channel or @everyone sparingly to minimize disruptions.
- Be patient, as open-source contributors and maintainers often have other commitments and may need time to respond.
- Post questions or discussions in the most relevant channel (e.g., for [slack - #general](https://openhands-ai.slack.com/archives/C06P5NCGSFP) for general topics, [slack - #questions](https://openhands-ai.slack.com/archives/C06U8UTKSAD) for queries/questions, [discord - #general](https://discord.com/channels/1222935860639563850/1222935861386018885)).
- When asking for help or raising issues, include necessary details like links, screenshots, or clear explanations to provide context.
- Keep discussions in public channels whenever possible to allow others to benefit from the conversation, unless the matter is sensitive or private.
- Always adhere to [our standards](https://github.com/All-Hands-AI/OpenHands/blob/main/CODE_OF_CONDUCT.md#our-standards) to ensure a welcoming and collaborative environment.
- If you choose to mute a channel, consider setting up alerts for topics that still interest you to stay engaged. For Slack, Go to Settings → Notifications → My Keywords to add specific keywords that will notify you when mentioned. For example, if you're here for discussions about LLMs, mute the channel if it’s too busy, but set notifications to alert you only when “LLMs” appears in messages. Also for Discord, go to the channel notifications and choose the option that best describes your need.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.1, available at
[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].

Community Impact Guidelines were inspired by
[Mozilla's code of conduct enforcement ladder][Mozilla CoC].

For answers to common questions about this code of conduct, see the FAQ at
[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at
[https://www.contributor-covenant.org/translations][translations].

[homepage]: https://www.contributor-covenant.org
[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html
[Mozilla CoC]: https://github.com/mozilla/diversity
[FAQ]: https://www.contributor-covenant.org/faq
[translations]: https://www.contributor-covenant.org/translations



================================================
FILE: COMMUNITY.md
================================================
# 🙌 The OpenHands Community

The OpenHands community is built around the belief that (1) AI and AI agents are going to fundamentally change the way
we build software, and (2) if this is true, we should do everything we can to make sure that the benefits provided by
such powerful technology are accessible to everyone.

If this resonates with you, we'd love to have you join us in our quest!

## 🤝 How to Join

Check out our [How to Join the Community section.](https://github.com/All-Hands-AI/OpenHands?tab=readme-ov-file#-how-to-join-the-community)

## 💪 Becoming a Contributor

We welcome contributions from everyone! Whether you're a developer, a researcher, or simply enthusiastic about advancing
the field of software engineering with AI, there are many ways to get involved:

- **Code Contributions:** Help us develop new core functionality, improve our agents, improve the frontend and other
interfaces, or anything else that would help make OpenHands better.
- **Research and Evaluation:** Contribute to our understanding of LLMs in software engineering, participate in
evaluating the models, or suggest improvements.
- **Feedback and Testing:** Use the OpenHands toolset, report bugs, suggest features, or provide feedback on usability.

For details, please check [CONTRIBUTING.md](./CONTRIBUTING.md).

## Code of Conduct

We have a [Code of Conduct](./CODE_OF_CONDUCT.md) that we expect all contributors to adhere to.
Long story short, we are aiming for an open, welcoming, diverse, inclusive, and healthy community.
All contributors are expected to contribute to building this sort of community.

## 🛠️ Becoming a Maintainer

For contributors who have made significant and sustained contributions to the project, there is a possibility of joining
the maintainer team. The process for this is as follows:

1. Any contributor who has made sustained and high-quality contributions to the codebase can be nominated by any
maintainer. If you feel that you may qualify you can reach out to any of the maintainers that have reviewed your PRs and ask if you can be nominated.
2. Once a maintainer nominates a new maintainer, there will be a discussion period among the maintainers for at least 3 days.
3. If no concerns are raised the nomination will be accepted by acclamation, and if concerns are raised there will be a discussion and possible vote.

Note that just making many PRs does not immediately imply that you will become a maintainer. We will be looking
at sustained high-quality contributions over a period of time, as well as good teamwork and adherence to our [Code of Conduct](./CODE_OF_CONDUCT.md).



================================================
FILE: config.template.toml
================================================
###################### OpenHands Configuration Example ######################
#
# All settings have default values, so you only need to uncomment and
# modify what you want to change
# The fields within each section are sorted in alphabetical order.
#
##############################################################################

#################################### Core ####################################
# General core configurations
##############################################################################
[core]
# API keys and configuration for core services

# Base path for the workspace
#workspace_base = "./workspace"

# Cache directory path
#cache_dir = "/tmp/cache"

# Debugging enabled
#debug = false

# Disable color in terminal output
#disable_color = false

# Path to store trajectories, can be a folder or a file
# If it's a folder, the session id will be used as the file name
#save_trajectory_path="./trajectories"

# Whether to save screenshots in the trajectory
# The screenshots are encoded and can make trajectory json files very large
#save_screenshots_in_trajectory = false

# Path to replay a trajectory, must be a file path
# If provided, trajectory will be loaded and replayed before the
# agent responds to any user instruction
#replay_trajectory_path = ""

# File store path
#file_store_path = "/tmp/file_store"

# File store type
#file_store = "memory"

# Maximum file size for uploads, in megabytes
#file_uploads_max_file_size_mb = 0

# Enable the browser environment
#enable_browser = true

# Maximum budget per task, 0.0 means no limit
#max_budget_per_task = 0.0

# Maximum number of iterations
#max_iterations = 500

# Path to mount the workspace in the sandbox
#workspace_mount_path_in_sandbox = "/workspace"

# Path to mount the workspace
#workspace_mount_path = ""

# Path to rewrite the workspace mount path to
#workspace_mount_rewrite = ""

# Run as openhands
#run_as_openhands = true

# Runtime environment
#runtime = "docker"

# Name of the default agent
#default_agent = "CodeActAgent"

# JWT secret for authentication
#jwt_secret = ""

# Restrict file types for file uploads
#file_uploads_restrict_file_types = false

# List of allowed file extensions for uploads
#file_uploads_allowed_extensions = [".*"]

# Whether to enable the default LLM summarizing condenser when no condenser is specified in config
# When true, a LLMSummarizingCondenserConfig will be used as the default condenser
# When false, a NoOpCondenserConfig (no summarization) will be used
#enable_default_condenser = true

# Maximum number of concurrent conversations per user
#max_concurrent_conversations = 3

# Maximum age of conversations in seconds before they are automatically closed
#conversation_max_age_seconds = 864000  # 10 days

#################################### LLM #####################################
# Configuration for LLM models (group name starts with 'llm')
# use 'llm' for the default LLM config
##############################################################################
[llm]
# AWS access key ID
#aws_access_key_id = ""

# AWS region name
#aws_region_name = ""

# AWS secret access key
#aws_secret_access_key = ""

# API key to use (For Headless / CLI only -  In Web this is overridden by Session Init)
api_key = ""

# API base URL (For Headless / CLI only -  In Web this is overridden by Session Init)
#base_url = ""

# API version
#api_version = ""

# Reasoning effort for OpenAI o-series models (low, medium, high, or not set)
#reasoning_effort = "medium"

# Cost per input token
#input_cost_per_token = 0.0

# Cost per output token
#output_cost_per_token = 0.0

# Custom LLM provider
#custom_llm_provider = ""

# Maximum number of characters in an observation's content
#max_message_chars = 10000

# Maximum number of input tokens
#max_input_tokens = 0

# Maximum number of output tokens
#max_output_tokens = 0

# Model to use. (For Headless / CLI only -  In Web this is overridden by Session Init)
model = "gpt-4o"

# Number of retries to attempt when an operation fails with the LLM.
# Increase this value to allow more attempts before giving up
#num_retries = 8

# Maximum wait time (in seconds) between retry attempts
# This caps the exponential backoff to prevent excessively long
#retry_max_wait = 120

# Minimum wait time (in seconds) between retry attempts
# This sets the initial delay before the first retry
#retry_min_wait = 15

# Multiplier for exponential backoff calculation
# The wait time increases by this factor after each failed attempt
# A value of 2.0 means each retry waits twice as long as the previous one
#retry_multiplier = 2.0

# Drop any unmapped (unsupported) params without causing an exception
#drop_params = false

# Modify params for litellm to do transformations like adding a default message, when a message is empty.
# Note: this setting is global, unlike drop_params, it cannot be overridden in each call to litellm.
#modify_params = true

# Using the prompt caching feature if provided by the LLM and supported
#caching_prompt = true

# Base URL for the OLLAMA API
#ollama_base_url = ""

# Temperature for the API
#temperature = 0.0

# Timeout for the API
#timeout = 0

# Top p for the API
#top_p = 1.0

# If model is vision capable, this option allows to disable image processing (useful for cost reduction).
#disable_vision = true

# Custom tokenizer to use for token counting
# https://docs.litellm.ai/docs/completion/token_usage
#custom_tokenizer = ""

# Whether to use native tool calling if supported by the model. Can be true, false, or None by default, which chooses the model's default behavior based on the evaluation.
# ATTENTION: Based on evaluation, enabling native function calling may lead to worse results
# in some scenarios. Use with caution and consider testing with your specific use case.
# https://github.com/All-Hands-AI/OpenHands/pull/4711
#native_tool_calling = None


# Safety settings for models that support them (e.g., Mistral AI, Gemini)
# Example for Mistral AI:
# safety_settings = [
#   { "category" = "hate", "threshold" = "low" },
#   { "category" = "harassment", "threshold" = "low" },
#   { "category" = "sexual", "threshold" = "low" },
#   { "category" = "dangerous", "threshold" = "low" }
# ]
#
# Example for Gemini:
# safety_settings = [
#   { "category" = "HARM_CATEGORY_HARASSMENT", "threshold" = "BLOCK_NONE" },
#   { "category" = "HARM_CATEGORY_HATE_SPEECH", "threshold" = "BLOCK_NONE" },
#   { "category" = "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold" = "BLOCK_NONE" },
#   { "category" = "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold" = "BLOCK_NONE" }
# ]
#safety_settings = []

[llm.draft_editor]
# The number of times llm_editor tries to fix an error when editing.
correct_num = 5

[llm.gpt4o-mini]
api_key = ""
model = "gpt-4o"


#################################### Agent ###################################
# Configuration for agents (group name starts with 'agent')
# Use 'agent' for the default agent config
# otherwise, group name must be `agent.<agent_name>` (case-sensitive), e.g.
# agent.CodeActAgent
##############################################################################
[agent]

# Whether the browsing tool is enabled
# Note: when this is set to true, enable_browser in the core config must also be true
enable_browsing = true

# Whether the LLM draft editor is enabled
enable_llm_editor = false

# Whether the standard editor tool (str_replace_editor) is enabled
# Only has an effect if enable_llm_editor is False
enable_editor = true

# Whether the IPython tool is enabled
enable_jupyter = true

# Whether the command tool is enabled
enable_cmd = true

# Whether the think tool is enabled
enable_think = true

# Whether the finish tool is enabled
enable_finish = true

# LLM config group to use
#llm_config = 'your-llm-config-group'

# Whether to use prompt extension (e.g., microagent, repo/runtime info) at all
#enable_prompt_extensions = true

# List of microagents to disable
#disabled_microagents = []

# Whether history should be truncated to continue the session when hitting LLM context
# length limit
enable_history_truncation = true

# Whether the condensation request tool is enabled
enable_condensation_request = false

[agent.RepoExplorerAgent]
# Example: use a cheaper model for RepoExplorerAgent to reduce cost, especially
# useful when an agent doesn't demand high quality but uses a lot of tokens
llm_config = 'gpt3'

[agent.CustomAgent]
# Example: use a custom agent from a different package
# This will be automatically be registered as a new agent named "CustomAgent"
classpath = "my_package.my_module.MyCustomAgent"

#################################### Sandbox ###################################
# Configuration for the sandbox
##############################################################################
[sandbox]
# Sandbox timeout in seconds
#timeout = 120

# Sandbox user ID
#user_id = 1000

# Container image to use for the sandbox
#base_container_image = "nikolaik/python-nodejs:python3.12-nodejs22"

# Use host network
#use_host_network = false

# Runtime extra build args
#runtime_extra_build_args = ["--network=host", "--add-host=host.docker.internal:host-gateway"]

# Enable auto linting after editing
#enable_auto_lint = false

# Whether to initialize plugins
#initialize_plugins = true

# Extra dependencies to install in the runtime image
#runtime_extra_deps = ""

# Environment variables to set at the launch of the runtime
#runtime_startup_env_vars = {}

# BrowserGym environment to use for evaluation
#browsergym_eval_env = ""

# Platform to use for building the runtime image (e.g., "linux/amd64")
#platform = ""

# Force rebuild of runtime image even if it exists
#force_rebuild_runtime = false

# Runtime container image to use (if not provided, will be built from base_container_image)
#runtime_container_image = ""

# Keep runtime alive after session ends
#keep_runtime_alive = false

# Pause closed runtimes instead of stopping them
#pause_closed_runtimes = false

# Delay in seconds before closing idle runtimes
#close_delay = 300

# Remove all containers when stopping the runtime
#rm_all_containers = false

# Enable GPU support in the runtime
#enable_gpu = false

# When there are multiple cards, you can specify the GPU by ID
#cuda_visible_devices = ''

# Additional Docker runtime kwargs
#docker_runtime_kwargs = {}

# Specific port to use for VSCode. If not set, a random port will be chosen.
# Useful when deploying OpenHands in a remote machine where you need to expose a specific port.
#vscode_port = 41234

# Volume mounts in the format 'host_path:container_path[:mode]'
# e.g. '/my/host/dir:/workspace:rw'
# Multiple mounts can be specified using commas
# e.g. '/path1:/workspace/path1,/path2:/workspace/path2:ro'

# Configure volumes under the [sandbox] section:
# [sandbox]
# volumes = "/my/host/dir:/workspace:rw,/path2:/workspace/path2:ro"

#################################### Security ###################################
# Configuration for security features
##############################################################################
[security]

# Enable confirmation mode (For Headless / CLI only -  In Web this is overridden by Session Init)
#confirmation_mode = false

# The security analyzer to use (For Headless / CLI only -  In Web this is overridden by Session Init)
#security_analyzer = ""

# Whether to enable security analyzer
#enable_security_analyzer = false

#################################### Condenser #################################
# Condensers control how conversation history is managed and compressed when
# the context grows too large. Each agent uses one condenser configuration.
##############################################################################
[condenser]
# The type of condenser to use. Available options:
# - "noop": No condensing, keeps full history (default)
# - "observation_masking": Keeps full event structure but masks older observations
# - "recent": Keeps only recent events and discards older ones
# - "llm": Uses an LLM to summarize conversation history
# - "amortized": Intelligently forgets older events while preserving important context
# - "llm_attention": Uses an LLM to prioritize most relevant context
type = "noop"

# Examples for each condenser type (uncomment and modify as needed):

# 1. NoOp Condenser - No additional settings needed
#type = "noop"

# 2. Observation Masking Condenser
#type = "observation_masking"
# Number of most-recent events where observations will not be masked
#attention_window = 100

# 3. Recent Events Condenser
#type = "recent"
# Number of initial events to always keep (typically includes task description)
#keep_first = 1
# Maximum number of events to keep in history
#max_events = 100

# 4. LLM Summarizing Condenser
#type = "llm"
# Reference to an LLM config to use for summarization
#llm_config = "condenser"
# Number of initial events to always keep (typically includes task description)
#keep_first = 1
# Maximum size of history before triggering summarization
#max_size = 100

# 5. Amortized Forgetting Condenser
#type = "amortized"
# Number of initial events to always keep (typically includes task description)
#keep_first = 1
# Maximum size of history before triggering forgetting
#max_size = 100

# 6. LLM Attention Condenser
#type = "llm_attention"
# Reference to an LLM config to use for attention scoring
#llm_config = "condenser"
# Number of initial events to always keep (typically includes task description)
#keep_first = 1
# Maximum size of history before triggering attention mechanism
#max_size = 100

# Example of a custom LLM configuration for condensers that require an LLM
# If not provided, it falls back to the default LLM
#[llm.condenser]
#model = "gpt-4o"
#temperature = 0.1
#max_input_tokens = 1024

#################################### Eval ####################################
# Configuration for the evaluation, please refer to the specific evaluation
# plugin for the available options
##############################################################################


########################### Kubernetes #######################################
# Kubernetes configuration when using the Kubernetes runtime
##############################################################################
[kubernetes]
# The Kubernetes namespace to use for OpenHands resources
#namespace = "default"

# Domain for ingress resources
#ingress_domain = "localhost"

# Size of the persistent volume claim
#pvc_storage_size = "2Gi"

# Storage class for persistent volume claims
#pvc_storage_class = "standard"

# CPU request for runtime pods
#resource_cpu_request = "1"

# Memory request for runtime pods
#resource_memory_request = "1Gi"

# Memory limit for runtime pods
#resource_memory_limit = "2Gi"

# Optional name of image pull secret for private registries
#image_pull_secret = ""

# Optional name of TLS secret for ingress
#ingress_tls_secret = ""

# Optional node selector key for pod scheduling
#node_selector_key = ""

# Optional node selector value for pod scheduling
#node_selector_val = ""

# Optional YAML string defining pod tolerations
#tolerations_yaml = ""

# Run the runtime sandbox container in privileged mode for use with docker-in-docker
#privileged = false



================================================
FILE: CONTRIBUTING.md
================================================
# Contributing

Thanks for your interest in contributing to OpenHands! We welcome and appreciate contributions.

## Understanding OpenHands's CodeBase

To understand the codebase, please refer to the README in each module:
- [frontend](./frontend/README.md)
- [evaluation](./evaluation/README.md)
- [openhands](./openhands/README.md)
   - [agenthub](./openhands/agenthub/README.md)
   - [server](./openhands/server/README.md)

## Setting up Your Development Environment

We have a separate doc [Development.md](https://github.com/All-Hands-AI/OpenHands/blob/main/Development.md) that tells you how to set up a development workflow.

## How Can I Contribute?

There are many ways that you can contribute:

1. **Download and use** OpenHands, and send [issues](https://github.com/All-Hands-AI/OpenHands/issues) when you encounter something that isn't working or a feature that you'd like to see.
2. **Send feedback** after each session by [clicking the thumbs-up thumbs-down buttons](https://docs.all-hands.dev/usage/feedback), so we can see where things are working and failing, and also build an open dataset for training code agents.
3. **Improve the Codebase** by sending [PRs](#sending-pull-requests-to-openhands) (see details below). In particular, we have some [good first issues](https://github.com/All-Hands-AI/OpenHands/labels/good%20first%20issue) that may be ones to start on.

## What Can I Build?
Here are a few ways you can help improve the codebase.

#### UI/UX
We're always looking to improve the look and feel of the application. If you've got a small fix
for something that's bugging you, feel free to open up a PR that changes the [`./frontend`](./frontend) directory.

If you're looking to make a bigger change, add a new UI element, or significantly alter the style
of the application, please open an issue first, or better, join the #eng-ui-ux channel in our Slack
to gather consensus from our design team first.

#### Improving the agent
Our main agent is the CodeAct agent. You can [see its prompts here](https://github.com/All-Hands-AI/OpenHands/tree/main/openhands/agenthub/codeact_agent).

Changes to these prompts, and to the underlying behavior in Python, can have a huge impact on user experience.
You can try modifying the prompts to see how they change the behavior of the agent as you use the app
locally, but we will need to do an end-to-end evaluation of any changes here to ensure that the agent
is getting better over time.

We use the [SWE-bench](https://www.swebench.com/) benchmark to test our agent. You can join the #evaluation
channel in Slack to learn more.

#### Adding a new agent
You may want to experiment with building new types of agents. You can add an agent to [`openhands/agenthub`](./openhands/agenthub)
to help expand the capabilities of OpenHands.

#### Adding a new runtime
The agent needs a place to run code and commands. When you run OpenHands on your laptop, it uses a Docker container
to do this by default. But there are other ways of creating a sandbox for the agent.

If you work for a company that provides a cloud-based runtime, you could help us add support for that runtime
by implementing the [interface specified here](https://github.com/All-Hands-AI/OpenHands/blob/main/openhands/runtime/base.py).

#### Testing
When you write code, it is also good to write tests. Please navigate to the [`./tests`](./tests) folder to see existing test suites.
At the moment, we have two kinds of tests: [`unit`](./tests/unit) and [`integration`](./evaluation/integration_tests). Please refer to the README for each test suite. These tests also run on GitHub's continuous integration to ensure quality of the project.

## Sending Pull Requests to OpenHands

You'll need to fork our repository to send us a Pull Request. You can learn more
about how to fork a GitHub repo and open a PR with your changes in [this article](https://medium.com/swlh/forks-and-pull-requests-how-to-contribute-to-github-repos-8843fac34ce8).

### Pull Request title
As described [here](https://github.com/commitizen/conventional-commit-types/blob/master/index.json), a valid PR title should begin with one of the following prefixes:

- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code (white space, formatting, missing semicolons, etc.)
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
- `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
- `chore`: Other changes that don't modify src or test files
- `revert`: Reverts a previous commit

For example, a PR title could be:
- `refactor: modify package path`
- `feat(frontend): xxxx`, where `(frontend)` means that this PR mainly focuses on the frontend component.

You may also check out previous PRs in the [PR list](https://github.com/All-Hands-AI/OpenHands/pulls).

### Pull Request description
- If your PR is small (such as a typo fix), you can go brief.
- If it contains a lot of changes, it's better to write more details.

If your changes are user-facing (e.g. a new feature in the UI, a change in behavior, or a bugfix)
please include a short message that we can add to our changelog.

## How to Make Effective Contributions

### Opening Issues

If you notice any bugs or have any feature requests please open them via the [issues page](https://github.com/All-Hands-AI/OpenHands/issues). We will triage based on how critical the bug is or how potentially useful the improvement is, discuss, and implement the ones that the community has interest/effort for.

Further, if you see an issue you like, please leave a "thumbs-up" or a comment, which will help us prioritize.

### Making Pull Requests

We're generally happy to consider all pull requests with the evaluation process varying based on the type of change:

#### For Small Improvements

Small improvements with few downsides are typically reviewed and approved quickly.
One thing to check when making changes is to ensure that all continuous integration tests pass, which you can check before getting a review.

#### For Core Agent Changes

We need to be more careful with changes to the core agent, as it is imperative to maintain high quality. These PRs are evaluated based on three key metrics:

1. **Accuracy**
2. **Efficiency**
3. **Code Complexity**

If it improves accuracy, efficiency, or both with only a minimal change to code quality, that's great we're happy to merge it in!
If there are bigger tradeoffs (e.g. helping efficiency a lot and hurting accuracy a little) we might want to put it behind a feature flag.
Either way, please feel free to discuss on github issues or slack, and we will give guidance and preliminary feedback.



================================================
FILE: CREDITS.md
================================================
# Credits

## Contributors

We would like to thank all the [contributors](https://github.com/All-Hands-AI/OpenHands/graphs/contributors) who have helped make OpenHands possible. We greatly appreciate your dedication and hard work.

## Open Source Projects

OpenHands includes and adapts the following open source projects. We are grateful for their contributions to the open source community:

#### [SWE Agent](https://github.com/princeton-nlp/swe-agent)
   - License: MIT License
   - Description: Adapted for use in OpenHands's agent hub

#### [Aider](https://github.com/paul-gauthier/aider)
   - License: Apache License 2.0
   - Description: AI pair programming tool. OpenHands has adapted and integrated its linter module for code-related tasks in [`agentskills utilities`](https://github.com/All-Hands-AI/OpenHands/tree/main/openhands/runtime/plugins/agent_skills/utils/aider)

#### [BrowserGym](https://github.com/ServiceNow/BrowserGym)
   - License: Apache License 2.0
   - Description: Adapted in implementing the browsing agent


### Reference Implementations for Evaluation Benchmarks
OpenHands integrates code of the reference implementations for the following agent evaluation benchmarks:

#### [HumanEval](https://github.com/openai/human-eval)
   - License: MIT License

#### [DSP](https://github.com/microsoft/DataScienceProblems)
   - License: MIT License

#### [HumanEvalPack](https://github.com/bigcode-project/bigcode-evaluation-harness)
   - License: Apache License 2.0

#### [AgentBench](https://github.com/THUDM/AgentBench)
   - License: Apache License 2.0

#### [SWE-Bench](https://github.com/princeton-nlp/SWE-bench)
   - License: MIT License

#### [BIRD](https://bird-bench.github.io/)
   - License: MIT License
   - Dataset: CC-BY-SA 4.0

#### [Gorilla APIBench](https://github.com/ShishirPatil/gorilla)
   - License: Apache License 2.0

#### [GPQA](https://github.com/idavidrein/gpqa)
   - License: MIT License

#### [ProntoQA](https://github.com/asaparov/prontoqa)
   - License: Apache License 2.0


## Open Source licenses

### MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

### BSD 3-Clause License

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

### Apache License 2.0


                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]



### Non-Open Source Reference Implementations:

#### [MultiPL-E](https://github.com/nuprl/MultiPL-E)
   - License: BSD 3-Clause License with Machine Learning Restriction

BSD 3-Clause License with Machine Learning Restriction

Copyright (c) 2022, Northeastern University, Oberlin College, Roblox Inc,
Stevens Institute of Technology, University of Massachusetts Amherst, and
Wellesley College.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

4.  The contents of this repository may not be used as training data for any
    machine learning model, including but not limited to neural networks.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



================================================
FILE: Development.md
================================================
# Development Guide

This guide is for people working on OpenHands and editing the source code.
If you wish to contribute your changes, check out the
[CONTRIBUTING.md](https://github.com/All-Hands-AI/OpenHands/blob/main/CONTRIBUTING.md)
on how to clone and setup the project initially before moving on. Otherwise,
you can clone the OpenHands project directly.

## Start the Server for Development

### 1. Requirements

- Linux, Mac OS, or [WSL on Windows](https://learn.microsoft.com/en-us/windows/wsl/install) [Ubuntu >= 22.04]
- [Docker](https://docs.docker.com/engine/install/) (For those on MacOS, make sure to allow the default Docker socket to be used from advanced settings!)
- [Python](https://www.python.org/downloads/) = 3.12
- [NodeJS](https://nodejs.org/en/download/package-manager) >= 22.x
- [Poetry](https://python-poetry.org/docs/#installing-with-the-official-installer) >= 1.8
- OS-specific dependencies:
  - Ubuntu: build-essential => `sudo apt-get install build-essential python3.12-dev`
  - WSL: netcat => `sudo apt-get install netcat`

Make sure you have all these dependencies installed before moving on to `make build`.

#### Dev container

There is a [dev container](https://containers.dev/) available which provides a
pre-configured environment with all the necessary dependencies installed if you
are using a [supported editor or tool](https://containers.dev/supporting). For
example, if you are using Visual Studio Code (VS Code) with the
[Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)
extension installed, you can open the project in a dev container by using the
_Dev Container: Reopen in Container_ command from the Command Palette
(Ctrl+Shift+P).

#### Develop without sudo access

If you want to develop without system admin/sudo access to upgrade/install `Python` and/or `NodeJs`, you can use
`conda` or `mamba` to manage the packages for you:

```bash
# Download and install Mamba (a faster version of conda)
curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
bash Miniforge3-$(uname)-$(uname -m).sh

# Install Python 3.12, nodejs, and poetry
mamba install python=3.12
mamba install conda-forge::nodejs
mamba install conda-forge::poetry
```

### 2. Build and Setup The Environment

Begin by building the project which includes setting up the environment and installing dependencies. This step ensures
that OpenHands is ready to run on your system:

```bash
make build
```

### 3. Configuring the Language Model

OpenHands supports a diverse array of Language Models (LMs) through the powerful [litellm](https://docs.litellm.ai) library.

To configure the LM of your choice, run:

```bash
make setup-config
```

This command will prompt you to enter the LLM API key, model name, and other variables ensuring that OpenHands is
tailored to your specific needs. Note that the model name will apply only when you run headless. If you use the UI,
please set the model in the UI.

Note: If you have previously run OpenHands using the docker command, you may have already set some environmental
variables in your terminal. The final configurations are set from highest to lowest priority:
Environment variables > config.toml variables > default variables

**Note on Alternative Models:**
See [our documentation](https://docs.all-hands.dev/usage/llms) for recommended models.

### 4. Running the application

#### Option A: Run the Full Application

Once the setup is complete, this command starts both the backend and frontend servers, allowing you to interact with OpenHands:

```bash
make run
```

#### Option B: Individual Server Startup

- **Start the Backend Server:** If you prefer, you can start the backend server independently to focus on
backend-related tasks or configurations.

  ```bash
  make start-backend
  ```

- **Start the Frontend Server:** Similarly, you can start the frontend server on its own to work on frontend-related
components or interface enhancements.
  ```bash
  make start-frontend
  ```

### 5. Running OpenHands with OpenHands

You can use OpenHands to develop and improve OpenHands itself! This is a powerful way to leverage AI assistance for contributing to the project.

#### Quick Start

1. **Build and run OpenHands:**
   ```bash
   export INSTALL_DOCKER=0
   export RUNTIME=local
   make build && make run
   ```

2. **Access the interface:**
   - Local development: http://localhost:3001
   - Remote/cloud environments: Use the appropriate external URL

3. **Configure for external access (if needed):**
   ```bash
   # For external access (e.g., cloud environments)
   make run FRONTEND_PORT=12000 FRONTEND_HOST=0.0.0.0 BACKEND_HOST=0.0.0.0
   ```

### 6. LLM Debugging

If you encounter any issues with the Language Model (LM) or you're simply curious, export DEBUG=1 in the environment and restart the backend.
OpenHands will log the prompts and responses in the logs/llm/CURRENT_DATE directory, allowing you to identify the causes.

### 7. Help

Need help or info on available targets and commands? Use the help command for all the guidance you need with OpenHands.

```bash
make help
```

### 8. Testing

To run tests, refer to the following:

#### Unit tests

```bash
poetry run pytest ./tests/unit/test_*.py
```

### 9. Add or update dependency

1. Add your dependency in `pyproject.toml` or use `poetry add xxx`.
2. Update the poetry.lock file via `poetry lock --no-update`.

### 9. Use existing Docker image

To reduce build time (e.g., if no changes were made to the client-runtime component), you can use an existing Docker
container image by setting the SANDBOX_RUNTIME_CONTAINER_IMAGE environment variable to the desired Docker image.

Example: `export SANDBOX_RUNTIME_CONTAINER_IMAGE=ghcr.io/all-hands-ai/runtime:0.49-nikolaik`

## Develop inside Docker container

TL;DR

```bash
make docker-dev
```

See more details [here](./containers/dev/README.md).

If you are just interested in running `OpenHands` without installing all the required tools on your host.

```bash
make docker-run
```

If you do not have `make` on your host, run:

```bash
cd ./containers/dev
./dev.sh
```

You do need [Docker](https://docs.docker.com/engine/install/) installed on your host though.

## Key Documentation Resources

Here's a guide to the important documentation files in the repository:

- [/README.md](./README.md): Main project overview, features, and basic setup instructions
- [/Development.md](./Development.md) (this file): Comprehensive guide for developers working on OpenHands
- [/CONTRIBUTING.md](./CONTRIBUTING.md): Guidelines for contributing to the project, including code style and PR process
- [/docs/DOC_STYLE_GUIDE.md](./docs/DOC_STYLE_GUIDE.md): Standards for writing and maintaining project documentation
- [/openhands/README.md](./openhands/README.md): Details about the backend Python implementation
- [/frontend/README.md](./frontend/README.md): Frontend React application setup and development guide
- [/containers/README.md](./containers/README.md): Information about Docker containers and deployment
- [/tests/unit/README.md](./tests/unit/README.md): Guide to writing and running unit tests
- [/evaluation/README.md](./evaluation/README.md): Documentation for the evaluation framework and benchmarks
- [/microagents/README.md](./microagents/README.md): Information about the microagents architecture and implementation
- [/openhands/server/README.md](./openhands/server/README.md): Server implementation details and API documentation
- [/openhands/runtime/README.md](./openhands/runtime/README.md): Documentation for the runtime environment and execution model



================================================
FILE: docker-compose.yml
================================================

services:
  openhands:
    build:
      context: ./
      dockerfile: ./containers/app/Dockerfile
    image: openhands:latest
    container_name: openhands-app-${DATE:-}
    environment:
      - SANDBOX_RUNTIME_CONTAINER_IMAGE=${SANDBOX_RUNTIME_CONTAINER_IMAGE:-docker.all-hands.dev/all-hands-ai/runtime:0.49-nikolaik}
      #- SANDBOX_USER_ID=${SANDBOX_USER_ID:-1234} # enable this only if you want a specific non-root sandbox user but you will have to manually adjust permissions of ~/.openhands for this user
      - WORKSPACE_MOUNT_PATH=${WORKSPACE_BASE:-$PWD/workspace}
    ports:
      - "3000:3000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.openhands:/.openhands
      - ${WORKSPACE_BASE:-$PWD/workspace}:/opt/workspace_base
    pull_policy: build
    stdin_open: true
    tty: true



================================================
FILE: ISSUE_TRIAGE.md
================================================
# Issue Triage
These are the procedures and guidelines on how issues are triaged in this repo by the maintainers.

## General
* All issues must be tagged with **enhancement**, **bug** or **troubleshooting/help**.
* Issues may be tagged with what it relates to (**agent quality**, **resolver**, **CLI**, etc.).

## Severity
* **High**: High visibility issues or affecting many users.
* **Critical**: Affecting all users or potential security issues.

## Difficulty
* Issues with low implementation difficulty may be tagged with **good first issue**.

## Not Enough Information
* User is asked to provide more information (logs, how to reproduce, etc.) when the issue is not clear.
* If an issue is unclear and the author does not provide more information or respond to a request,
the issue may be closed as **not planned** (Usually after a week).

## Multiple Requests/Fixes in One Issue
* These issues will be narrowed down to one request/fix so the issue is more easily tracked and fixed.
* Issues may be broken down into multiple issues if required.

## Stale and Auto Closures
* In order to keep a maintainable backlog, issues that have no activity within 30 days are automatically marked as **Stale**.
* If issues marked as **Stale** continue to have no activity for 7 more days, they will automatically be closed as not planned.
* Issues may be reopened by maintainers if deemed important.



================================================
FILE: LICENSE
================================================
The MIT License (MIT)
=====================

Copyright © 2023

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the “Software”), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.



================================================
FILE: Makefile
================================================
SHELL=/usr/bin/env bash
# Makefile for OpenHands project

# Variables
BACKEND_HOST ?= "127.0.0.1"
BACKEND_PORT = 3000
BACKEND_HOST_PORT = "$(BACKEND_HOST):$(BACKEND_PORT)"
FRONTEND_HOST ?= "127.0.0.1"
FRONTEND_PORT = 3001
DEFAULT_WORKSPACE_DIR = "./workspace"
DEFAULT_MODEL = "gpt-4o"
CONFIG_FILE = config.toml
PRE_COMMIT_CONFIG_PATH = "./dev_config/python/.pre-commit-config.yaml"
PYTHON_VERSION = 3.12
KIND_CLUSTER_NAME = "local-hands"

# ANSI color codes
GREEN=$(shell tput -Txterm setaf 2)
YELLOW=$(shell tput -Txterm setaf 3)
RED=$(shell tput -Txterm setaf 1)
BLUE=$(shell tput -Txterm setaf 6)
RESET=$(shell tput -Txterm sgr0)

# Build
build:
	@echo "$(GREEN)Building project...$(RESET)"
	@$(MAKE) -s check-dependencies
	@$(MAKE) -s install-python-dependencies
	@$(MAKE) -s install-frontend-dependencies
	@$(MAKE) -s install-pre-commit-hooks
	@$(MAKE) -s build-frontend
	@echo "$(GREEN)Build completed successfully.$(RESET)"

check-dependencies:
	@echo "$(YELLOW)Checking dependencies...$(RESET)"
	@$(MAKE) -s check-system
	@$(MAKE) -s check-python
	@$(MAKE) -s check-npm
	@$(MAKE) -s check-nodejs
ifeq ($(INSTALL_DOCKER),)
	@$(MAKE) -s check-docker
endif
	@$(MAKE) -s check-poetry
	@$(MAKE) -s check-tmux
	@echo "$(GREEN)Dependencies checked successfully.$(RESET)"

check-system:
	@echo "$(YELLOW)Checking system...$(RESET)"
	@if [ "$(shell uname)" = "Darwin" ]; then \
		echo "$(BLUE)macOS detected.$(RESET)"; \
	elif [ "$(shell uname)" = "Linux" ]; then \
		if [ -f "/etc/manjaro-release" ]; then \
			echo "$(BLUE)Manjaro Linux detected.$(RESET)"; \
		else \
			echo "$(BLUE)Linux detected.$(RESET)"; \
		fi; \
	elif [ "$$(uname -r | grep -i microsoft)" ]; then \
		echo "$(BLUE)Windows Subsystem for Linux detected.$(RESET)"; \
	else \
		echo "$(RED)Unsupported system detected. Please use macOS, Linux, or Windows Subsystem for Linux (WSL).$(RESET)"; \
		exit 1; \
	fi

check-python:
	@echo "$(YELLOW)Checking Python installation...$(RESET)"
	@if command -v python$(PYTHON_VERSION) > /dev/null; then \
		echo "$(BLUE)$(shell python$(PYTHON_VERSION) --version) is already installed.$(RESET)"; \
	else \
		echo "$(RED)Python $(PYTHON_VERSION) is not installed. Please install Python $(PYTHON_VERSION) to continue.$(RESET)"; \
		exit 1; \
	fi

check-npm:
	@echo "$(YELLOW)Checking npm installation...$(RESET)"
	@if command -v npm > /dev/null; then \
		echo "$(BLUE)npm $(shell npm --version) is already installed.$(RESET)"; \
	else \
		echo "$(RED)npm is not installed. Please install Node.js to continue.$(RESET)"; \
		exit 1; \
	fi

check-nodejs:
	@echo "$(YELLOW)Checking Node.js installation...$(RESET)"
	@if command -v node > /dev/null; then \
		NODE_VERSION=$(shell node --version | sed -E 's/v//g'); \
		IFS='.' read -r -a NODE_VERSION_ARRAY <<< "$$NODE_VERSION"; \
		if [ "$${NODE_VERSION_ARRAY[0]}" -ge 22 ]; then \
			echo "$(BLUE)Node.js $$NODE_VERSION is already installed.$(RESET)"; \
		else \
			echo "$(RED)Node.js 22.x or later is required. Please install Node.js 22.x or later to continue.$(RESET)"; \
			exit 1; \
		fi; \
	else \
		echo "$(RED)Node.js is not installed. Please install Node.js to continue.$(RESET)"; \
		exit 1; \
	fi

check-docker:
	@echo "$(YELLOW)Checking Docker installation...$(RESET)"
	@if command -v docker > /dev/null; then \
		echo "$(BLUE)$(shell docker --version) is already installed.$(RESET)"; \
	else \
		echo "$(RED)Docker is not installed. Please install Docker to continue.$(RESET)"; \
		exit 1; \
	fi

check-tmux:
	@echo "$(YELLOW)Checking tmux installation...$(RESET)"
	@if command -v tmux > /dev/null; then \
		echo "$(BLUE)$(shell tmux -V) is already installed.$(RESET)"; \
	else \
		echo "$(YELLOW)╔════════════════════════════════════════════════════════════════════════════╗$(RESET)"; \
		echo "$(YELLOW)║ OPTIONAL: tmux is not installed.                                          ║$(RESET)"; \
		echo "$(YELLOW)║ Some advanced terminal features may not work without tmux.                ║$(RESET)"; \
		echo "$(YELLOW)║ You can install it if needed, but it's not required for development.      ║$(RESET)"; \
		echo "$(YELLOW)╚════════════════════════════════════════════════════════════════════════════╝$(RESET)"; \
	fi

check-poetry:
	@echo "$(YELLOW)Checking Poetry installation...$(RESET)"
	@if command -v poetry > /dev/null; then \
		POETRY_VERSION=$(shell poetry --version 2>&1 | sed -E 's/Poetry \(version ([0-9]+\.[0-9]+\.[0-9]+)\)/\1/'); \
		IFS='.' read -r -a POETRY_VERSION_ARRAY <<< "$$POETRY_VERSION"; \
		if [ $${POETRY_VERSION_ARRAY[0]} -gt 1 ] || ([ $${POETRY_VERSION_ARRAY[0]} -eq 1 ] && [ $${POETRY_VERSION_ARRAY[1]} -ge 8 ]); then \
			echo "$(BLUE)$(shell poetry --version) is already installed.$(RESET)"; \
		else \
			echo "$(RED)Poetry 1.8 or later is required. You can install poetry by running the following command, then adding Poetry to your PATH:"; \
			echo "$(RED) curl -sSL https://install.python-poetry.org | python$(PYTHON_VERSION) -$(RESET)"; \
			echo "$(RED)More detail here: https://python-poetry.org/docs/#installing-with-the-official-installer$(RESET)"; \
			exit 1; \
		fi; \
	else \
		echo "$(RED)Poetry is not installed. You can install poetry by running the following command, then adding Poetry to your PATH:"; \
		echo "$(RED) curl -sSL https://install.python-poetry.org | python$(PYTHON_VERSION) -$(RESET)"; \
		echo "$(RED)More detail here: https://python-poetry.org/docs/#installing-with-the-official-installer$(RESET)"; \
		exit 1; \
	fi

install-python-dependencies:
	@echo "$(GREEN)Installing Python dependencies...$(RESET)"
	@if [ -z "${TZ}" ]; then \
		echo "Defaulting TZ (timezone) to UTC"; \
		export TZ="UTC"; \
	fi
	poetry env use python$(PYTHON_VERSION)
	@if [ "$(shell uname)" = "Darwin" ]; then \
		echo "$(BLUE)Installing chroma-hnswlib...$(RESET)"; \
		export HNSWLIB_NO_NATIVE=1; \
		poetry run pip install chroma-hnswlib; \
	fi
	@if [ -n "${POETRY_GROUP}" ]; then \
		echo "Installing only POETRY_GROUP=${POETRY_GROUP}"; \
		poetry install --only $${POETRY_GROUP}; \
	else \
		poetry install --with dev,test,runtime; \
	fi
	@if [ "${INSTALL_PLAYWRIGHT}" != "false" ] && [ "${INSTALL_PLAYWRIGHT}" != "0" ]; then \
		if [ -f "/etc/manjaro-release" ]; then \
			echo "$(BLUE)Detected Manjaro Linux. Installing Playwright dependencies...$(RESET)"; \
			poetry run pip install playwright; \
			poetry run playwright install chromium; \
		else \
			if [ ! -f cache/playwright_chromium_is_installed.txt ]; then \
				echo "Running playwright install --with-deps chromium..."; \
				poetry run playwright install --with-deps chromium; \
				mkdir -p cache; \
				touch cache/playwright_chromium_is_installed.txt; \
			else \
				echo "Setup already done. Skipping playwright installation."; \
			fi \
		fi \
	else \
		echo "Skipping Playwright installation (INSTALL_PLAYWRIGHT=${INSTALL_PLAYWRIGHT})."; \
	fi
	@echo "$(GREEN)Python dependencies installed successfully.$(RESET)"

install-frontend-dependencies:
	@echo "$(YELLOW)Setting up frontend environment...$(RESET)"
	@echo "$(YELLOW)Detect Node.js version...$(RESET)"
	@cd frontend && node ./scripts/detect-node-version.js
	echo "$(BLUE)Installing frontend dependencies with npm...$(RESET)"
	@cd frontend && npm install
	@echo "$(GREEN)Frontend dependencies installed successfully.$(RESET)"

install-pre-commit-hooks:
	@echo "$(YELLOW)Installing pre-commit hooks...$(RESET)"
	@git config --unset-all core.hooksPath || true
	@poetry run pre-commit install --config $(PRE_COMMIT_CONFIG_PATH)
	@echo "$(GREEN)Pre-commit hooks installed successfully.$(RESET)"

lint-backend:
	@echo "$(YELLOW)Running linters...$(RESET)"
	@poetry run pre-commit run --all-files --show-diff-on-failure --config $(PRE_COMMIT_CONFIG_PATH)

lint-frontend:
	@echo "$(YELLOW)Running linters for frontend...$(RESET)"
	@cd frontend && npm run lint

lint:
	@$(MAKE) -s lint-frontend
	@$(MAKE) -s lint-backend

kind:
	@echo "$(YELLOW)Checking if kind is installed...$(RESET)"
	@if ! command -v kind > /dev/null; then \
		echo "$(RED)kind is not installed. Please install kind with `brew install kind` to continue$(RESET)"; \
		exit 1; \
	else \
		echo "$(BLUE)kind $(shell kind version) is already installed.$(RESET)"; \
	fi
	@echo "$(YELLOW)Checking if kind cluster '$(KIND_CLUSTER_NAME)' already exists...$(RESET)"
	@if kind get clusters | grep -q "^$(KIND_CLUSTER_NAME)$$"; then \
		echo "$(BLUE)Kind cluster '$(KIND_CLUSTER_NAME)' already exists.$(RESET)"; \
		kubectl config use-context kind-$(KIND_CLUSTER_NAME); \
	else \
		echo "$(YELLOW)Creating kind cluster '$(KIND_CLUSTER_NAME)'...$(RESET)"; \
		kind create cluster --name $(KIND_CLUSTER_NAME) --config kind/cluster.yaml; \
	fi
	@echo "$(YELLOW)Checking if mirrord is installed...$(RESET)"
	@if ! command -v mirrord > /dev/null; then \
		echo "$(RED)mirrord is not installed. Please install mirrord with `brew install metalbear-co/mirrord/mirrord` to continue$(RESET)"; \
		exit 1; \
	else \
		echo "$(BLUE)mirrord $(shell mirrord --version) is already installed.$(RESET)"; \
	fi
	@echo "$(YELLOW)Installing k8s mirrord resources...$(RESET)"
	@kubectl apply -f kind/manifests
	@echo "$(GREEN)Mirrord resources installed successfully.$(RESET)"
	@echo "$(YELLOW)Waiting for Mirrord pod to be ready.$(RESET)"
	@sleep 5
	@kubectl wait --for=condition=Available deployment/ubuntu-dev
	@echo "$(YELLOW)Waiting for Nginx to be ready.$(RESET)"
	@kubectl -n ingress-nginx wait --for=condition=Available deployment/ingress-nginx-controller
	@echo "$(YELLOW)Running make run inside of mirrord.$(RESET)"
	@mirrord exec --target deployment/ubuntu-dev -- make run

test-frontend:
	@echo "$(YELLOW)Running tests for frontend...$(RESET)"
	@cd frontend && npm run test

test:
	@$(MAKE) -s test-frontend

build-frontend:
	@echo "$(YELLOW)Building frontend...$(RESET)"
	@cd frontend && npm run prepare && npm run build

# Start backend
start-backend:
	@echo "$(YELLOW)Starting backend...$(RESET)"
	@poetry run uvicorn openhands.server.listen:app --host $(BACKEND_HOST) --port $(BACKEND_PORT) --reload --reload-exclude "./workspace"

# Start frontend
start-frontend:
	@echo "$(YELLOW)Starting frontend...$(RESET)"
	@cd frontend && \
	if grep -qi microsoft /proc/version 2>/dev/null; then \
		echo "Detected WSL environment. Using 'dev_wsl'"; \
		SCRIPT=dev_wsl; \
	else \
		SCRIPT=dev; \
	fi; \
	VITE_BACKEND_HOST=$(BACKEND_HOST_PORT) VITE_FRONTEND_PORT=$(FRONTEND_PORT) npm run $$SCRIPT -- --port $(FRONTEND_PORT) --host $(BACKEND_HOST)

# Common setup for running the app (non-callable)
_run_setup:
	@if [ "$(OS)" = "Windows_NT" ]; then \
		echo "$(RED) Windows is not supported, use WSL instead!$(RESET)"; \
		exit 1; \
	fi
	@mkdir -p logs
	@echo "$(YELLOW)Starting backend server...$(RESET)"
	@poetry run uvicorn openhands.server.listen:app --host $(BACKEND_HOST) --port $(BACKEND_PORT) &
	@echo "$(YELLOW)Waiting for the backend to start...$(RESET)"
	@until nc -z localhost $(BACKEND_PORT); do sleep 0.1; done
	@echo "$(GREEN)Backend started successfully.$(RESET)"

# Run the app (standard mode)
run:
	@echo "$(YELLOW)Running the app...$(RESET)"
	@$(MAKE) -s _run_setup
	@$(MAKE) -s start-frontend
	@echo "$(GREEN)Application started successfully.$(RESET)"

# Run the app (in docker)
docker-run: WORKSPACE_BASE ?= $(PWD)/workspace
docker-run:
	@if [ -f /.dockerenv ]; then \
		echo "Running inside a Docker container. Exiting..."; \
		exit 0; \
	else \
		echo "$(YELLOW)Running the app in Docker $(OPTIONS)...$(RESET)"; \
		export WORKSPACE_BASE=${WORKSPACE_BASE}; \
		export SANDBOX_USER_ID=$(shell id -u); \
		export DATE=$(shell date +%Y%m%d%H%M%S); \
		docker compose up $(OPTIONS); \
	fi


# Setup config.toml
setup-config:
	@echo "$(YELLOW)Setting up config.toml...$(RESET)"
	@$(MAKE) setup-config-prompts
	@mv $(CONFIG_FILE).tmp $(CONFIG_FILE)
	@echo "$(GREEN)Config.toml setup completed.$(RESET)"

setup-config-prompts:
	@echo "[core]" > $(CONFIG_FILE).tmp

	@read -p "Enter your workspace directory (as absolute path) [default: $(DEFAULT_WORKSPACE_DIR)]: " workspace_dir; \
	 workspace_dir=$${workspace_dir:-$(DEFAULT_WORKSPACE_DIR)}; \
	 echo "workspace_base=\"$$workspace_dir\"" >> $(CONFIG_FILE).tmp

	@echo "" >> $(CONFIG_FILE).tmp

	@echo "[llm]" >> $(CONFIG_FILE).tmp
	@read -p "Enter your LLM model name, used for running without UI. Set the model in the UI after you start the app. (see https://docs.litellm.ai/docs/providers for full list) [default: $(DEFAULT_MODEL)]: " llm_model; \
	 llm_model=$${llm_model:-$(DEFAULT_MODEL)}; \
	 echo "model=\"$$llm_model\"" >> $(CONFIG_FILE).tmp

	@read -p "Enter your LLM api key: " llm_api_key; \
	 echo "api_key=\"$$llm_api_key\"" >> $(CONFIG_FILE).tmp

	@read -p "Enter your LLM base URL [mostly used for local LLMs, leave blank if not needed - example: http://localhost:5001/v1/]: " llm_base_url; \
	 if [[ ! -z "$$llm_base_url" ]]; then echo "base_url=\"$$llm_base_url\"" >> $(CONFIG_FILE).tmp; fi

setup-config-basic:
	@printf '%s\n' \
	'[core]' \
	'workspace_base="./workspace"' \
	> config.toml
	@echo "$(GREEN)config.toml created.$(RESET)"

openhands-cloud-run:
	@$(MAKE) run BACKEND_HOST="0.0.0.0" BACKEND_PORT="12000" FRONTEND_HOST="0.0.0.0" FRONTEND_PORT="12001"

# Develop in container
docker-dev:
	@if [ -f /.dockerenv ]; then \
		echo "Running inside a Docker container. Exiting..."; \
		exit 0; \
	else \
		echo "$(YELLOW)Build and run in Docker $(OPTIONS)...$(RESET)"; \
		./containers/dev/dev.sh $(OPTIONS); \
	fi

# Clean up all caches
clean:
	@echo "$(YELLOW)Cleaning up caches...$(RESET)"
	@rm -rf openhands/.cache
	@echo "$(GREEN)Caches cleaned up successfully.$(RESET)"

# Help
help:
	@echo "$(BLUE)Usage: make [target]$(RESET)"
	@echo "Targets:"
	@echo "  $(GREEN)build$(RESET)               - Build project, including environment setup and dependencies."
	@echo "  $(GREEN)lint$(RESET)                - Run linters on the project."
	@echo "  $(GREEN)setup-config$(RESET)        - Setup the configuration for OpenHands by providing LLM API key,"
	@echo "                        LLM Model name, and workspace directory."
	@echo "  $(GREEN)start-backend$(RESET)       - Start the backend server for the OpenHands project."
	@echo "  $(GREEN)start-frontend$(RESET)      - Start the frontend server for the OpenHands project."
	@echo "  $(GREEN)run$(RESET)                 - Run the OpenHands application, starting both backend and frontend servers."
	@echo "                        Backend Log file will be stored in the 'logs' directory."
	@echo "  $(GREEN)docker-dev$(RESET)          - Build and run the OpenHands application in Docker."
	@echo "  $(GREEN)docker-run$(RESET)          - Run the OpenHands application, starting both backend and frontend servers in Docker."
	@echo "  $(GREEN)help$(RESET)                - Display this help message, providing information on available targets."

# Phony targets
.PHONY: build check-dependencies check-system check-python check-npm check-nodejs check-docker check-poetry install-python-dependencies install-frontend-dependencies install-pre-commit-hooks lint-backend lint-frontend lint test-frontend test build-frontend start-backend start-frontend _run_setup run run-wsl setup-config setup-config-prompts setup-config-basic openhands-cloud-run docker-dev docker-run clean help
.PHONY: kind



================================================
FILE: MANIFEST.in
================================================
# Exclude all Python bytecode files
global-exclude *.pyc

# Exclude Python cache directories
global-exclude __pycache__



================================================
FILE: pydoc-markdown.yml
================================================
loaders:
  - type: python
    search_path: [.]
processors:
  - type: filter
    skip_empty_modules: true
  - type: smart
  - type: crossref
renderer:
  type: docusaurus
  docs_base_path: docs/modules
  relative_output_path: python
  relative_sidebar_path: sidebar.json
  sidebar_top_level_label: Backend



================================================
FILE: pyproject.toml
================================================
[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core",
]

[tool.poetry]
name = "openhands-ai"
version = "0.49.1"
description = "OpenHands: Code Less, Make More"
authors = [ "OpenHands" ]
license = "MIT"
readme = "README.md"
repository = "https://github.com/All-Hands-AI/OpenHands"
packages = [
  { include = "openhands/**/*" },
  { include = "third_party/**/*" },
  { include = "pyproject.toml", to = "openhands" },
  { include = "poetry.lock", to = "openhands" },
]
include = [
  "openhands/integrations/vscode/openhands-vscode-0.0.1.vsix",
]
build = "build_vscode.py" # Build VSCode extension during Poetry build

[tool.poetry.dependencies]
python = "^3.12,<3.14"
litellm = "^1.74.3, !=1.64.4, !=1.67.*" # avoid 1.64.4 (known bug) & 1.67.* (known bug #10272)
aiohttp = ">=3.9.0,!=3.11.13"           # Pin to avoid yanked version 3.11.13
google-generativeai = "*"               # To use litellm with Gemini Pro API
google-api-python-client = "^2.164.0"   # For Google Sheets API
google-auth-httplib2 = "*"              # For Google Sheets authentication
google-auth-oauthlib = "*"              # For Google Sheets OAuth
termcolor = "*"
docker = "*"
fastapi = "*"
toml = "*"
types-toml = "*"
uvicorn = "*"
numpy = "*"
json-repair = "*"
browsergym-core = "0.13.3"              # integrate browsergym-core as the browsing interface
html2text = "*"

pexpect = "*"
jinja2 = "^3.1.3"
python-multipart = "*"
tenacity = ">=8.5,<10.0"
zope-interface = "7.2"
pathspec = "^0.12.1"
pyjwt = "^2.9.0"
dirhash = "*"
tornado = "*"
python-dotenv = "*"
rapidfuzz = "^3.9.0"
whatthepatch = "^1.0.6"
protobuf = "^5.0.0,<6.0.0"                         # Updated to support newer opentelemetry
opentelemetry-api = "^1.33.1"
opentelemetry-exporter-otlp-proto-grpc = "^1.33.1"

libtmux = ">=0.37,<0.40"
pygithub = "^2.5.0"
joblib = "*"
openhands-aci = "0.3.1"
python-socketio = "^5.11.4"
sse-starlette = "^2.1.3"
psutil = "*"
python-json-logger = "^3.2.1"
prompt-toolkit = "^3.0.50"
poetry = "^2.1.2"
anyio = "4.9.0"
pythonnet = "*"
fastmcp = "^2.5.2"
python-frontmatter = "^1.1.0"
shellingham = "^1.5.4"
# TODO: Should these go into the runtime group?
ipywidgets = "^8.1.5"
qtconsole = "^5.6.1"
PyPDF2 = "*"
python-pptx = "*"
pylatexenc = "*"
python-docx = "*"
bashlex = "^0.18"

# TODO: These are integrations that should probably be optional
redis = ">=5.2,<7.0"
minio = "^7.2.8"

stripe = ">=11.5,<13.0"
google-cloud-aiplatform = "*"
anthropic = { extras = [ "vertex" ], version = "*" }
boto3 = "*"
kubernetes = "^33.1.0"
pyyaml = "^6.0.2"
memory-profiler = "^0.61.0"
jupyter_kernel_gateway = "*"

# Third-party runtime dependencies (optional)
e2b = { version = ">=1.0.5,<1.8.0", optional = true }
modal = { version = ">=0.66.26,<1.2.0", optional = true }
runloop-api-client = { version = "0.50.0", optional = true }
daytona = { version = "0.24.2", optional = true }

[tool.poetry.extras]
third_party_runtimes = [ "e2b", "modal", "runloop-api-client", "daytona" ]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ruff = "0.12.4"
mypy = "1.17.0"
pre-commit = "4.2.0"
build = "*"
types-setuptools = "*"
pytest = "^8.4.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-asyncio = "*"
pytest-forked = "*"
pytest-xdist = "*"
openai = "*"
pandas = "*"
reportlab = "*"
gevent = ">=24.2.1,<26.0.0"

[tool.poetry.group.runtime]
optional = true

[tool.poetry.group.runtime.dependencies]
jupyterlab = "*"
notebook = "*"
flake8 = "*"

[tool.poetry.group.evaluation]
optional = true

[tool.poetry.group.evaluation.dependencies]
streamlit = "*"
whatthepatch = "*"
retry = "*"
evaluate = "*"
visualswebench = { git = "https://github.com/luolin101/Visual-SWE-bench.git" }
swegym = { git = "https://github.com/SWE-Gym/SWE-Bench-Package.git" }
commit0 = "*"
func_timeout = "*"
sympy = "*"
gdown = "*"
matplotlib = "*"
seaborn = "*"
tabulate = "*"
browsergym = "0.13.3"
browsergym-webarena = "0.13.3"
browsergym-miniwob = "0.13.3"
browsergym-visualwebarena = "0.13.3"
boto3-stubs = { extras = [ "s3" ], version = "^1.37.19" }
# transitive dependency, pinned here to avoid conflicts
pyarrow = "21.0.0"
datasets = "*"
joblib = "*"
swebench = { git = "https://github.com/ryanhoangt/SWE-bench.git", rev = "fix-modal-patch-eval" }

[tool.poetry.scripts]
openhands = "openhands.cli.main:main"

[tool.poetry.group.testgeneval.dependencies]
fuzzywuzzy = "^0.18.0"
rouge = "^1.0.1"
python-levenshtein = ">=0.26.1,<0.28.0"
tree-sitter-python = "^0.23.6"

[tool.poetry-dynamic-versioning]
enable = true
style = "semver"

[tool.autopep8]
# autopep8 fights with mypy on line length issue
ignore = [ "E501" ]

[tool.black]
# prevent black (if installed) from changing single quotes to double quotes
skip-string-normalization = true

[tool.ruff]
lint.select = [ "D" ]
# ignore warnings for missing docstrings
lint.ignore = [ "D1" ]
lint.pydocstyle.convention = "google"

[tool.coverage.run]
concurrency = [ "gevent" ]



================================================
FILE: pytest.ini
================================================
[pytest]
addopts = -p no:warnings
asyncio_default_fixture_loop_scope = function



================================================
FILE: README_CN.md
================================================
[Binary file]


================================================
FILE: README_JA.md
================================================
<a name="readme-top"></a>

<div align="center">
  <img src="./docs/static/img/logo.png" alt="Logo" width="200">
  <h1 align="center">OpenHands: コードを減らして、もっと作ろう</h1>
</div>

<div align="center">
  <a href="https://github.com/All-Hands-AI/OpenHands/graphs/contributors"><img src="https://img.shields.io/github/contributors/All-Hands-AI/OpenHands?style=for-the-badge&color=blue" alt="Contributors"></a>
  <a href="https://github.com/All-Hands-AI/OpenHands/stargazers"><img src="https://img.shields.io/github/stars/All-Hands-AI/OpenHands?style=for-the-badge&color=blue" alt="Stargazers"></a>
  <a href="https://github.com/All-Hands-AI/OpenHands/blob/main/LICENSE"><img src="https://img.shields.io/github/license/All-Hands-AI/OpenHands?style=for-the-badge&color=blue" alt="MIT License"></a>
  <br/>
  <a href="https://join.slack.com/t/openhands-ai/shared_invite/zt-3847of6xi-xuYJIPa6YIPg4ElbDWbtSA"><img src="https://img.shields.io/badge/Slack-Join%20Us-red?logo=slack&logoColor=white&style=for-the-badge" alt="Slackコミュニティに参加"></a>
  <a href="https://discord.gg/ESHStjSjD4"><img src="https://img.shields.io/badge/Discord-Join%20Us-purple?logo=discord&logoColor=white&style=for-the-badge" alt="Discordコミュニティに参加"></a>
  <a href="https://github.com/All-Hands-AI/OpenHands/blob/main/CREDITS.md"><img src="https://img.shields.io/badge/Project-Credits-blue?style=for-the-badge&color=FFE165&logo=github&logoColor=white" alt="クレジット"></a>
  <br/>
  <a href="https://docs.all-hands.dev/usage/getting-started"><img src="https://img.shields.io/badge/Documentation-000?logo=googledocs&logoColor=FFE165&style=for-the-badge" alt="ドキュメントを見る"></a>
  <a href="https://arxiv.org/abs/2407.16741"><img src="https://img.shields.io/badge/Paper%20on%20Arxiv-000?logoColor=FFE165&logo=arxiv&style=for-the-badge" alt="Arxiv論文"></a>
  <a href="https://docs.google.com/spreadsheets/d/1wOUdFCMyY6Nt0AIqF705KN4JKOWgeI4wUGUP60krXXs/edit?gid=0#gid=0"><img src="https://img.shields.io/badge/Benchmark%20score-000?logoColor=FFE165&logo=huggingface&style=for-the-badge" alt="評価ベンチマークスコア"></a>
  <hr>
</div>

OpenHands（旧OpenDevin）へようこそ。これはAIが駆動するソフトウェア開発エージェントのプラットフォームです。

OpenHandsのエージェントは人間の開発者ができることは何でもこなします。コードを修正し、コマンドを実行し、ウェブを閲覧し、APIを呼び出し、StackOverflowからコードスニペットをコピーすることさえできます。

詳細は[docs.all-hands.dev](https://docs.all-hands.dev)をご覧いただくか、[OpenHands Cloud](https://app.all-hands.dev)に登録して始めましょう。

> [!IMPORTANT]
> 仕事でOpenHandsを使っていますか？ぜひお話を聞かせてください。[こちらの短いフォーム](https://docs.google.com/forms/d/e/1FAIpQLSet3VbGaz8z32gW9Wm-Grl4jpt5WgMXPgJ4EDPVmCETCBpJtQ/viewform)にご記入いただき、Design Partnerプログラムにご参加ください。商用機能の早期アクセスや製品ロードマップへのフィードバックの機会を提供します。

![アプリのスクリーンショット](./docs/static/img/screenshot.png)

## ☁️ OpenHands Cloud
OpenHandsを始める最も簡単な方法は[OpenHands Cloud](https://app.all-hands.dev)を利用することです。新規ユーザーには50ドル分の無料クレジットが付与されます。

## 💻 OpenHandsをローカルで実行する

OpenHandsはDockerを利用してローカル環境でも実行できます。システム要件や詳細については[Running OpenHands](https://docs.all-hands.dev/usage/installation)ガイドをご覧ください。

> [!WARNING]
> 公共ネットワークで実行していますか？[Hardened Docker Installation Guide](https://docs.all-hands.dev/usage/runtimes/docker#hardened-docker-installation)を参照して、ネットワークバインディングの制限や追加のセキュリティ対策を実施してください。

```bash
docker pull docker.all-hands.dev/all-hands-ai/runtime:0.49-nikolaik

docker run -it --rm --pull=always \
    -e SANDBOX_RUNTIME_CONTAINER_IMAGE=docker.all-hands.dev/all-hands-ai/runtime:0.49-nikolaik \
    -e LOG_ALL_EVENTS=true \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v ~/.openhands:/.openhands \
    -p 3000:3000 \
    --add-host host.docker.internal:host-gateway \
    --name openhands-app \
    docker.all-hands.dev/all-hands-ai/openhands:0.49
```

**注**: バージョン0.44以前のOpenHandsを使用していた場合は、会話履歴を移行するために `mv ~/.openhands-state ~/.openhands` を実行してください。

OpenHandsは[http://localhost:3000](http://localhost:3000)で起動します！



================================================
FILE: .dockerignore
================================================
# NodeJS
frontend/node_modules

# Configuration (except pyproject.toml)
*.ini
*.toml
!pyproject.toml
*.yml

# Documentation (except README.md)
*.md
!README.md

# Hidden files and directories
.*
__pycache__

# Unneded files and directories
/dev_config/
/docs/
/evaluation/
/tests/
CITATION.cff



================================================
FILE: .editorconfig
================================================
[*]
# force *nix line endings so files don't look modified in container run from Windows clone
end_of_line = lf
trim_trailing_whitespace = true
insert_final_newline = true



================================================
FILE: .nvmrc
================================================
22



================================================
FILE: containers/README.md
================================================
# Docker Containers

Each folder here contains a Dockerfile, and a config.sh describing how to build
the images and where to push them. These images are built and pushed in GitHub Actions
by the `ghcr.yml` workflow.

## Building Manually

```bash
docker build -f containers/app/Dockerfile -t openhands .
docker build -f containers/sandbox/Dockerfile -t sandbox .
```



================================================
FILE: containers/build.sh
================================================
#!/usr/bin/env bash
set -eo pipefail

# Initialize variables with default values
image_name=""
org_name=""
push=0
load=0
tag_suffix=""
dry_run=0

# Function to display usage information
usage() {
    echo "Usage: $0 -i <image_name> [-o <org_name>] [--push] [--load] [-t <tag_suffix>] [--dry]"
    echo "  -i: Image name (required)"
    echo "  -o: Organization name"
    echo "  --push: Push the image"
    echo "  --load: Load the image"
    echo "  -t: Tag suffix"
    echo "  --dry: Don't build, only create build-args.json"
    exit 1
}

# Parse command-line options
while [[ $# -gt 0 ]]; do
    case $1 in
        -i) image_name="$2"; shift 2 ;;
        -o) org_name="$2"; shift 2 ;;
        --push) push=1; shift ;;
        --load) load=1; shift ;;
        -t) tag_suffix="$2"; shift 2 ;;
        --dry) dry_run=1; shift ;;
        *) usage ;;
    esac
done
# Check if required arguments are provided
if [[ -z "$image_name" ]]; then
    echo "Error: Image name is required."
    usage
fi

echo "Building: $image_name"
tags=()

OPENHANDS_BUILD_VERSION="dev"

cache_tag_base="buildcache"
cache_tag="$cache_tag_base"

if [[ -n $RELEVANT_SHA ]]; then
  git_hash=$(git rev-parse --short "$RELEVANT_SHA")
  tags+=("$git_hash")
  tags+=("$RELEVANT_SHA")
fi

if [[ -n $GITHUB_REF_NAME ]]; then
  # check if ref name is a version number
  if [[ $GITHUB_REF_NAME =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    major_version=$(echo "$GITHUB_REF_NAME" | cut -d. -f1)
    minor_version=$(echo "$GITHUB_REF_NAME" | cut -d. -f1,2)
    tags+=("$major_version" "$minor_version")
    tags+=("latest")
  fi
  sanitized_ref_name=$(echo "$GITHUB_REF_NAME" | sed 's/[^a-zA-Z0-9.-]\+/-/g')
  OPENHANDS_BUILD_VERSION=$sanitized_ref_name
  sanitized_ref_name=$(echo "$sanitized_ref_name" | tr '[:upper:]' '[:lower:]') # lower case is required in tagging
  tags+=("$sanitized_ref_name")
  cache_tag+="-${sanitized_ref_name}"
fi

if [[ -n $tag_suffix ]]; then
  cache_tag+="-${tag_suffix}"
  for i in "${!tags[@]}"; do
    tags[$i]="${tags[$i]}-$tag_suffix"
  done
fi

echo "Tags: ${tags[@]}"

if [[ "$image_name" == "openhands" ]]; then
  dir="./containers/app"
elif [[ "$image_name" == "runtime" ]]; then
  dir="./containers/runtime"
else
  dir="./containers/$image_name"
fi

if [[ (! -f "$dir/Dockerfile") && "$image_name" != "runtime" ]]; then
  # Allow runtime to be built without a Dockerfile
  echo "No Dockerfile found"
  exit 1
fi
if [[ ! -f "$dir/config.sh" ]]; then
  echo "No config.sh found for Dockerfile"
  exit 1
fi

source "$dir/config.sh"

if [[ -n "$org_name" ]]; then
  DOCKER_ORG="$org_name"
fi

# If $DOCKER_IMAGE_SOURCE_TAG is set, add it to the tags
if [[ -n "$DOCKER_IMAGE_SOURCE_TAG" ]]; then
  tags+=("$DOCKER_IMAGE_SOURCE_TAG")
fi
# If $DOCKER_IMAGE_TAG is set, add it to the tags
if [[ -n "$DOCKER_IMAGE_TAG" ]]; then
  tags+=("$DOCKER_IMAGE_TAG")
fi

DOCKER_REPOSITORY="$DOCKER_REGISTRY/$DOCKER_ORG/$DOCKER_IMAGE"
DOCKER_REPOSITORY=${DOCKER_REPOSITORY,,} # lowercase
echo "Repo: $DOCKER_REPOSITORY"
echo "Base dir: $DOCKER_BASE_DIR"

args=""
full_tags=()
for tag in "${tags[@]}"; do
  args+=" -t $DOCKER_REPOSITORY:$tag"
  full_tags+=("$DOCKER_REPOSITORY:$tag")
done


if [[ $push -eq 1 ]]; then
  args+=" --push"
  args+=" --cache-to=type=registry,ref=$DOCKER_REPOSITORY:$cache_tag,mode=max"
fi

if [[ $load -eq 1 ]]; then
  args+=" --load"
fi

echo "Args: $args"

# Modify the platform selection based on --load flag
if [[ $load -eq 1 ]]; then
  # When loading, build only for the current platform
  platform=$(docker version -f '{{.Server.Os}}/{{.Server.Arch}}')
else
  # For push or without load, build for multiple platforms
  platform="linux/amd64,linux/arm64"
fi
if [[ $dry_run -eq 1 ]]; then
  echo "Dry Run is enabled. Writing build config to docker-build-dry.json"
  jq -n \
    --argjson tags "$(printf '%s\n' "${full_tags[@]}" | jq -R . | jq -s .)" \
    --arg platform "$platform" \
    --arg openhands_build_version "$OPENHANDS_BUILD_VERSION" \
    --arg dockerfile "$dir/Dockerfile" \
    '{
      tags: $tags,
      platform: $platform,
      build_args: [
        "OPENHANDS_BUILD_VERSION=" + $openhands_build_version
      ],
      dockerfile: $dockerfile
    }' > docker-build-dry.json

    exit 0
fi



echo "Building for platform(s): $platform"

docker buildx build \
  $args \
  --build-arg OPENHANDS_BUILD_VERSION="$OPENHANDS_BUILD_VERSION" \
  --cache-from=type=registry,ref=$DOCKER_REPOSITORY:$cache_tag \
  --cache-from=type=registry,ref=$DOCKER_REPOSITORY:$cache_tag_base-main \
  --platform $platform \
  --provenance=false \
  -f "$dir/Dockerfile" \
  "$DOCKER_BASE_DIR"

# If load was requested, print the loaded images
if [[ $load -eq 1 ]]; then
  echo "Local images built:"
  docker images "$DOCKER_REPOSITORY" --format "{{.Repository}}:{{.Tag}}"
fi



================================================
FILE: containers/app/config.sh
================================================
DOCKER_REGISTRY=ghcr.io
DOCKER_ORG=all-hands-ai
DOCKER_IMAGE=openhands
DOCKER_BASE_DIR="."



================================================
FILE: containers/app/Dockerfile
================================================
ARG OPENHANDS_BUILD_VERSION=dev
FROM node:24.3.0-bookworm-slim AS frontend-builder

WORKDIR /app

COPY frontend/package.json frontend/package-lock.json ./
RUN npm ci

COPY frontend ./
RUN npm run build

FROM python:3.12.10-slim AS base
FROM base AS backend-builder

WORKDIR /app
ENV PYTHONPATH='/app'

ENV POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=1 \
    POETRY_VIRTUALENVS_CREATE=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

RUN apt-get update -y \
    && apt-get install -y curl make git build-essential \
    && python3 -m pip install poetry --break-system-packages

COPY pyproject.toml poetry.lock ./
RUN touch README.md
RUN export POETRY_CACHE_DIR && poetry install --no-root && rm -rf $POETRY_CACHE_DIR

FROM base AS openhands-app

WORKDIR /app

# re-declare for this section
ARG OPENHANDS_BUILD_VERSION

ENV RUN_AS_OPENHANDS=true
# A random number--we need this to be different from the user's UID on the host machine
ENV OPENHANDS_USER_ID=42420
ENV SANDBOX_LOCAL_RUNTIME_URL=http://host.docker.internal
ENV USE_HOST_NETWORK=false
ENV WORKSPACE_BASE=/opt/workspace_base
ENV OPENHANDS_BUILD_VERSION=$OPENHANDS_BUILD_VERSION
ENV SANDBOX_USER_ID=0
ENV FILE_STORE=local
ENV FILE_STORE_PATH=/.openhands
ENV INIT_GIT_IN_EMPTY_WORKSPACE=1
RUN mkdir -p $FILE_STORE_PATH
RUN mkdir -p $WORKSPACE_BASE

RUN apt-get update -y \
    && apt-get install -y curl ssh sudo \
    && rm -rf /var/lib/apt/lists/*

# Default is 1000, but OSX is often 501
RUN sed -i 's/^UID_MIN.*/UID_MIN 499/' /etc/login.defs
# Default is 60000, but we've seen up to 200000
RUN sed -i 's/^UID_MAX.*/UID_MAX 1000000/' /etc/login.defs

RUN groupadd app
RUN useradd -l -m -u $OPENHANDS_USER_ID -s /bin/bash openhands && \
    usermod -aG app openhands && \
    usermod -aG sudo openhands && \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
RUN chown -R openhands:app /app && chmod -R 770 /app
RUN sudo chown -R openhands:app $WORKSPACE_BASE && sudo chmod -R 770 $WORKSPACE_BASE
USER openhands

ENV VIRTUAL_ENV=/app/.venv \
    PATH="/app/.venv/bin:$PATH" \
    PYTHONPATH='/app'

COPY --chown=openhands:app --chmod=770 --from=backend-builder ${VIRTUAL_ENV} ${VIRTUAL_ENV}

COPY --chown=openhands:app --chmod=770 ./microagents ./microagents
COPY --chown=openhands:app --chmod=770 ./openhands ./openhands
COPY --chown=openhands:app --chmod=777 ./openhands/runtime/plugins ./openhands/runtime/plugins
COPY --chown=openhands:app pyproject.toml poetry.lock README.md MANIFEST.in LICENSE ./

# This is run as "openhands" user, and will create __pycache__ with openhands:openhands ownership
RUN python openhands/core/download.py # No-op to download assets
# Add this line to set group ownership of all files/directories not already in "app" group
# openhands:openhands -> openhands:app
RUN find /app \! -group app -exec chgrp app {} +

COPY --chown=openhands:app --chmod=770 --from=frontend-builder /app/build ./frontend/build
COPY --chown=openhands:app --chmod=770 ./containers/app/entrypoint.sh /app/entrypoint.sh

USER root

WORKDIR /app

ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["uvicorn", "openhands.server.listen:app", "--host", "0.0.0.0", "--port", "3000"]



================================================
FILE: containers/app/entrypoint.sh
================================================
#!/bin/bash
set -eo pipefail

echo "Starting OpenHands..."
if [[ $NO_SETUP == "true" ]]; then
  echo "Skipping setup, running as $(whoami)"
  "$@"
  exit 0
fi

if [ "$(id -u)" -ne 0 ]; then
  echo "The OpenHands entrypoint.sh must run as root"
  exit 1
fi

if [ -z "$SANDBOX_USER_ID" ]; then
  echo "SANDBOX_USER_ID is not set"
  exit 1
fi

if [ -z "$WORKSPACE_MOUNT_PATH" ]; then
  # This is set to /opt/workspace in the Dockerfile. But if the user isn't mounting, we want to unset it so that OpenHands doesn't mount at all
  unset WORKSPACE_BASE
fi

if [[ "$SANDBOX_USER_ID" -eq 0 ]]; then
  echo "Running OpenHands as root"
  export RUN_AS_OPENHANDS=false
  "$@"
else
  echo "Setting up enduser with id $SANDBOX_USER_ID"
  if id "enduser" &>/dev/null; then
    echo "User enduser already exists. Skipping creation."
  else
    if ! useradd -l -m -u $SANDBOX_USER_ID -s /bin/bash enduser; then
      echo "Failed to create user enduser with id $SANDBOX_USER_ID. Moving openhands user."
      incremented_id=$(($SANDBOX_USER_ID + 1))
      usermod -u $incremented_id openhands
      if ! useradd -l -m -u $SANDBOX_USER_ID -s /bin/bash enduser; then
        echo "Failed to create user enduser with id $SANDBOX_USER_ID for a second time. Exiting."
        exit 1
      fi
    fi
  fi
  usermod -aG app enduser
  # get the user group of /var/run/docker.sock and set openhands to that group
  DOCKER_SOCKET_GID=$(stat -c '%g' /var/run/docker.sock)
  echo "Docker socket group id: $DOCKER_SOCKET_GID"
  if getent group $DOCKER_SOCKET_GID; then
    echo "Group with id $DOCKER_SOCKET_GID already exists"
  else
    echo "Creating group with id $DOCKER_SOCKET_GID"
    groupadd -g $DOCKER_SOCKET_GID docker
  fi

  mkdir -p /home/enduser/.cache/huggingface/hub/

  usermod -aG $DOCKER_SOCKET_GID enduser
  echo "Running as enduser"
  su enduser /bin/bash -c "${*@Q}" # This magically runs any arguments passed to the script as a command
fi



================================================
FILE: containers/dev/README.md
================================================
# Develop in Docker

> [!WARNING]
> This is not officially supported and may not work.

Install [Docker](https://docs.docker.com/engine/install/) on your host machine and run:

```bash
make docker-dev
# same as:
cd ./containers/dev
./dev.sh
```

It could take some time if you are running for the first time as Docker will pull all the  tools required for building OpenHands. The next time you run again, it should be instant.

## Build and run

If everything goes well, you should be inside a container after Docker finishes building the `openhands:dev` image similar to the following:

```bash
Build and run in Docker ...
root@93fc0005fcd2:/app#
```

You may now proceed with the normal [build and run](../../Development.md) workflow as if you were on the host.

## Make changes

The source code on the host is mounted as `/app` inside docker. You may edit the files as usual either inside the Docker container or on your host with your favorite IDE/editors.

The following are also mapped as readonly from your host:

```yaml
# host credentials
- $HOME/.git-credentials:/root/.git-credentials:ro
- $HOME/.gitconfig:/root/.gitconfig:ro
- $HOME/.npmrc:/root/.npmrc:ro
```

## VSCode

Alternatively, if you use VSCode, you could also [attach to the running container](https://code.visualstudio.com/docs/devcontainers/attach-container).

See details for [developing in docker](https://code.visualstudio.com/docs/devcontainers/containers) or simply ask `OpenHands` ;-)

## Rebuild dev image

You could optionally pass additional options to the build script.

```bash
make docker-dev OPTIONS="--build"
# or
./containers/dev/dev.sh --build
```

See [docker compose run](https://docs.docker.com/reference/cli/docker/compose/run/) for more options.



================================================
FILE: containers/dev/compose.yml
================================================
#
services:
  dev:
    privileged: true
    build:
      context: ${OPENHANDS_WORKSPACE:-../../}
      dockerfile: ./containers/dev/Dockerfile
    image: openhands:dev
    container_name: openhands-dev
    environment:
      - BACKEND_HOST=${BACKEND_HOST:-"0.0.0.0"}
      - SANDBOX_API_HOSTNAME=host.docker.internal
      - DOCKER_HOST_ADDR=host.docker.internal
      #
      - SANDBOX_RUNTIME_CONTAINER_IMAGE=${SANDBOX_RUNTIME_CONTAINER_IMAGE:-ghcr.io/all-hands-ai/runtime:0.49-nikolaik}
      - SANDBOX_USER_ID=${SANDBOX_USER_ID:-1234}
      - WORKSPACE_MOUNT_PATH=${WORKSPACE_BASE:-$PWD/workspace}
    ports:
      - "3000:3000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${WORKSPACE_BASE:-$PWD/workspace}:/opt/workspace_base
      # source code
      - ${OPENHANDS_WORKSPACE:-../../}:/app
      # host credentials
      - $HOME/.git-credentials:/root/.git-credentials:ro
      - $HOME/.gitconfig:/root/.gitconfig:ro
      - $HOME/.npmrc:/root/.npmrc:ro
      # cache
      - cache-data:/root/.cache
    pull_policy: never
    stdin_open: true
    tty: true

##
volumes:
  cache-data:



================================================
FILE: containers/dev/dev.sh
================================================
#!/usr/bin/env bash
set -o pipefail

function get_docker() {
    echo "Docker is required to build and run OpenHands."
    echo "https://docs.docker.com/get-started/get-docker/"
    exit 1
}

function check_tools() {
	command -v docker &>/dev/null || get_docker
}

function exit_if_indocker() {
    if [ -f /.dockerenv ]; then
        echo "Running inside a Docker container. Exiting..."
        exit 1
    fi
}

#
exit_if_indocker

check_tools

##
OPENHANDS_WORKSPACE=$(git rev-parse --show-toplevel)

cd "$OPENHANDS_WORKSPACE/containers/dev/" || exit 1

##
export BACKEND_HOST="0.0.0.0"
#
export SANDBOX_USER_ID=$(id -u)
export WORKSPACE_BASE=${WORKSPACE_BASE:-$OPENHANDS_WORKSPACE/workspace}

docker compose run --rm --service-ports "$@" dev

##



================================================
FILE: containers/dev/Dockerfile
================================================
# syntax=docker/dockerfile:1

###
FROM ubuntu:22.04 AS dind

# https://docs.docker.com/engine/install/ubuntu/
RUN apt-get update && apt-get install -y \
	ca-certificates \
	curl \
	&& install -m 0755 -d /etc/apt/keyrings \
	&& curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc \
	&& chmod a+r /etc/apt/keyrings/docker.asc \
	&& echo \
		"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
		$(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

RUN apt-get update && apt-get install -y \
	docker-ce \
	docker-ce-cli \
	containerd.io \
	docker-buildx-plugin \
	docker-compose-plugin \
	&& rm -rf /var/lib/apt/lists/* \
	&& apt-get clean \
	&& apt-get autoremove -y

###
FROM dind AS openhands

ENV DEBIAN_FRONTEND=noninteractive

#
RUN apt-get update && apt-get install -y \
	bash \
    build-essential \
    curl \
	git \
	git-lfs \
	software-properties-common \
	make \
    netcat \
    sudo \
	wget \
	&& rm -rf /var/lib/apt/lists/* \
	&& apt-get clean \
	&& apt-get autoremove -y

# https://github.com/cli/cli/blob/trunk/docs/install_linux.md
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
	&& chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
	&& echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
	&& apt-get update && apt-get -y install \
    gh \
  && rm -rf /var/lib/apt/lists/* \
  && apt-get clean \
  && apt-get autoremove -y

# Python 3.12
RUN add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update \
    && apt-get install -y python3.12 python3.12-venv python3.12-dev python3-pip \
    && ln -s /usr/bin/python3.12 /usr/bin/python

# NodeJS >= 22.x
RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash - \
    && apt-get install -y nodejs

# Poetry >= 1.8
RUN curl -fsSL https://install.python-poetry.org | python3.12 - \
    && ln -s ~/.local/bin/poetry /usr/local/bin/poetry

#
RUN <<EOF
#!/bin/bash
printf "#!/bin/bash
set +x
uname -a
docker --version
gh --version | head -n 1
git --version
#
python --version
echo node `node --version`
echo npm `npm --version`
poetry --version
netcat -h 2>&1 | head -n 1
" > /version.sh
chmod a+x /version.sh
EOF

###
FROM openhands AS dev

RUN apt-get update && apt-get install -y \
	dnsutils \
	file \
	iproute2 \
	jq \
	lsof \
	ripgrep \
	silversearcher-ag \
	vim \
	&& rm -rf /var/lib/apt/lists/* \
	&& apt-get clean \
	&& apt-get autoremove -y

WORKDIR /app

# cache build dependencies
RUN \
  --mount=type=bind,source=./,target=/app/,rw \
  <<EOF
#!/bin/bash
make -s clean
make -s check-dependencies
make -s install-python-dependencies

# NOTE
# node_modules are .dockerignore-d therefore not mountable
# make -s install-frontend-dependencies
EOF

#
CMD ["bash"]



================================================
FILE: containers/runtime/README.md
================================================
# Dynamically constructed Dockerfile

This folder builds a runtime image (sandbox), which will use a dynamically generated `Dockerfile`
that depends on the `base_image` **AND** a [Python source distribution](https://docs.python.org/3.10/distutils/sourcedist.html) that is based on the current commit of `openhands`.

The following command will generate a `Dockerfile` file for `nikolaik/python-nodejs:python3.12-nodejs22` (the default base image), an updated `config.sh` and the runtime source distribution files/folders into `containers/runtime`:

```bash
poetry run python3 openhands/runtime/utils/runtime_build.py \
    --base_image nikolaik/python-nodejs:python3.12-nodejs22 \
    --build_folder containers/runtime
```



================================================
FILE: containers/runtime/config.sh
================================================
DOCKER_REGISTRY=ghcr.io
DOCKER_ORG=all-hands-ai
DOCKER_BASE_DIR="./containers/runtime"
DOCKER_IMAGE=runtime
# These variables will be appended by the runtime_build.py script
# DOCKER_IMAGE_TAG=
# DOCKER_IMAGE_SOURCE_TAG=



================================================
FILE: dev_config/python/mypy.ini
================================================
[mypy]
warn_unused_configs = True
ignore_missing_imports = True
check_untyped_defs = True
explicit_package_bases = True
warn_unreachable = True
warn_redundant_casts = True
no_implicit_optional = True
strict_optional = True

# Exclude third-party runtime directory from type checking
exclude = third_party/

[mypy-openhands.memory.condenser.impl.*]
disable_error_code = override



================================================
FILE: dev_config/python/ruff.toml
================================================
# Exclude third-party runtime directory from linting
exclude = ["third_party/"]

[lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "Q",
    "B",
    "ASYNC",
    "UP006",  # Use `list` instead of `List` for annotations
    "UP007",  # Use `X | Y` instead of `Union[X, Y]`
    "UP008",  # Use `X | None` instead of `Optional[X]`
]

ignore = [
    "E501",
    "B003",
    "B007",
    "B009",
    "B010",
    "B904",
    "B018",
    # Temporarily ignore ASYNC rules until they can be properly fixed in a separate PR
    "ASYNC110",
    "ASYNC220",
    "ASYNC221",
    "ASYNC230",
    "ASYNC251",
]

[lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[format]
quote-style = "single"

[lint.flake8-bugbear]
extend-immutable-calls = ["Depends", "fastapi.Depends", "fastapi.params.Depends"]



================================================
FILE: dev_config/python/.pre-commit-config.yaml
================================================
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        exclude: ^(docs/|modules/|python/|openhands-ui/|third_party/)
      - id: end-of-file-fixer
        exclude: ^(docs/|modules/|python/|openhands-ui/|third_party/)
      - id: check-yaml
        args: ["--allow-multiple-documents"]
      - id: debug-statements

  - repo: https://github.com/tox-dev/pyproject-fmt
    rev: v2.5.1
    hooks:
      - id: pyproject-fmt
  - repo: https://github.com/abravalheri/validate-pyproject
    rev: v0.24.1
    hooks:
      - id: validate-pyproject

  - repo: https://github.com/astral-sh/ruff-pre-commit
    # Ruff version.
    rev: v0.11.8
    hooks:
      # Run the linter.
      - id: ruff
        entry: ruff check --config dev_config/python/ruff.toml
        types_or: [python, pyi, jupyter]
        args: [--fix, --unsafe-fixes]
        exclude: third_party/
      # Run the formatter.
      - id: ruff-format
        entry: ruff format --config dev_config/python/ruff.toml
        types_or: [python, pyi, jupyter]
        exclude: third_party/

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.15.0
    hooks:
      - id: mypy
        additional_dependencies:
          [types-requests, types-setuptools, types-pyyaml, types-toml, types-docker, pydantic, lxml]
        # To see gaps add `--html-report mypy-report/`
        entry: mypy --config-file dev_config/python/mypy.ini openhands/
        always_run: true
        pass_filenames: false



================================================
FILE: docs/README.md
================================================
# Setup

```
npm install -g mint
```

or

```
yarn global add mint
```

# Preview

```
mint dev
```



================================================
FILE: docs/DOC_STYLE_GUIDE.md
================================================
# Documentation Style Guide

## General Writing Principles

- **Clarity & Conciseness**: Always prioritize clarity and brevity. Avoid unnecessary jargon or overly complex explanations.
Keep sentences short and to the point.
- **Gradual Complexity**: Start with the simplest, most basic setup, and then gradually introduce more advanced
concepts and configurations.

## Formatting Guidelines

### Headers

Use **Title Case** for the first and second level headers.

Example:
  - **Basic Usage**
  - **Advanced Configuration Options**

### Lists

When listing items or options, use bullet points to enhance readability.

Example:
  - Option A
  - Option B
  - Option C

### Procedures

For instructions or processes that need to be followed in a specific order, use numbered steps.

Example:
  1. Step one: Do this.
    - First this sub step.
    - Then this sub step.
  2. Step two: Complete this action.
  3. Step three: Verify the result.

### Code Blocks

* Use code blocks for multi-line inputs, outputs, commands and code samples.

Example:
```bash
docker run -it \
    -e THIS=this \
    -e THAT=that
    ...
```

### Use of Note and Warning

When adding a note or warning, use the built-in note and warning syntax.

Example:
<Note>
This section is for advanced users only.
</Note>

### Referring to UI Elements

When referencing UI elements, use ``.

Example:
1. Toggle the `Advanced` option
2. Enter your model in the `Custom Model` textbox.



================================================
FILE: docs/docs.json
================================================
{
  "$schema": "https://mintlify.com/docs.json",
  "theme": "mint",
  "name": "All Hands Docs",
  "colors": {
    "primary": "#99873c",
    "light": "#ffe165",
    "dark": "#ffe165"
  },
  "background": {
    "color": {
      "light": "#f7f3ee",
      "dark": "#0B0D0E"
    }
  },
  "appearance": {
    "default": "light"
  },
  "favicon": "/logo-square.png",
  "navigation": {
    "tabs": [
      {
        "tab": "Docs",
        "pages": [
          "index",
          "usage/installation",
          "usage/getting-started",
          "usage/key-features",
          "usage/faqs",
          {
            "group": "OpenHands Cloud",
            "pages": [
              "usage/cloud/openhands-cloud",
              {
                "group": "Integrations",
                "pages": [
                  "usage/cloud/bitbucket-installation",
                  "usage/cloud/github-installation",
                  "usage/cloud/gitlab-installation",
                  "usage/cloud/slack-installation"
                ]
              },
              "usage/cloud/cloud-ui",
              "usage/cloud/cloud-api"
            ]
          },
          {
            "group": "Run OpenHands on Your Own",
            "pages": [
              "usage/local-setup",
              "usage/how-to/gui-mode",
              "usage/how-to/cli-mode",
              "usage/how-to/headless-mode",
              "usage/how-to/github-action",
              {
                "group": "Advanced Configuration",
                "pages": [
                {
                  "group": "LLM Configuration",
                  "pages": [
                    "usage/llms/llms",
                    {
                      "group": "Providers",
                      "pages": [
                        "usage/llms/azure-llms",
                        "usage/llms/google-llms",
                        "usage/llms/groq",
                        "usage/llms/local-llms",
                        "usage/llms/litellm-proxy",
                        "usage/llms/moonshot",
                        "usage/llms/openai-llms",
                        "usage/llms/openhands-llms",
                        "usage/llms/openrouter"
                      ]
                    }
                  ]
                },
                {
                  "group": "Runtime Configuration",
                  "pages": [
                    "usage/runtimes/overview",
                    {
                      "group": "Providers",
                      "pages": [
                        "usage/runtimes/docker",
                        "usage/runtimes/remote",
                        "usage/runtimes/local",
                        {
                          "group": "Third-Party Providers",
                          "pages": [
                            "usage/runtimes/modal",
                            "usage/runtimes/daytona",
                            "usage/runtimes/runloop",
                            "usage/runtimes/e2b"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "usage/configuration-options",
                "usage/how-to/custom-sandbox-guide",
                "usage/search-engine-setup",
                "usage/mcp"
                ]
              }
            ]
          },
          {
            "group": "Customizations & Settings",
            "pages": [
              "usage/common-settings",
              "usage/prompting/repository",
              {
                "group": "Microagents",
                "pages": [
                  "usage/prompting/microagents-overview",
                  "usage/prompting/microagents-repo",
                  "usage/prompting/microagents-keyword",
                  "usage/prompting/microagents-org",
                  "usage/prompting/microagents-public"
                ]
              }
            ]
          },
          {
            "group": "Tips and Tricks",
            "pages": [
              "usage/prompting/prompting-best-practices"
            ]
          },
          {
            "group": "Troubleshooting & Feedback",
            "pages": [
              "usage/troubleshooting/troubleshooting",
              "usage/feedback"
            ]
          },
          {
            "group": "OpenHands Developers",
            "pages": [
              "usage/how-to/development-overview",
              {
                "group": "Architecture",
                "pages": [
                  "usage/architecture/backend",
                  "usage/architecture/runtime"
                ]
              },
              "usage/how-to/debugging",
              "usage/how-to/evaluation-harness",
              "usage/how-to/websocket-connection"
            ]
          }
        ]
      },
      {
        "tab": "Success Stories",
        "pages": [
          "success-stories/index"
        ]
      },
      {
          "tab": "API Reference",
          "openapi": "/openapi.json"
      }
    ],
    "global": {
      "anchors": [
        {
          "anchor": "Company",
          "href": "https://www.all-hands.dev/",
          "icon": "house"
        },
        {
          "anchor": "Blog",
          "href": "https://www.all-hands.dev/blog",
          "icon": "newspaper"
        },
        {
          "anchor": "OpenHands Cloud",
          "href": "https://app.all-hands.dev",
          "icon": "cloud"
        }
      ]
    }
  },
  "logo": {
    "light": "/logo/light.svg",
    "dark": "/logo/dark.svg"
  },
  "navbar": {
    "links": [
    ],
    "primary": {
      "type": "github",
      "href": "https://github.com/All-Hands-AI/OpenHands"
    }
  },
  "footer": {
    "socials": {
      "slack": "https://join.slack.com/t/openhands-ai/shared_invite/zt-3847of6xi-xuYJIPa6YIPg4ElbDWbtSA",
      "github": "https://github.com/All-Hands-AI/OpenHands",
      "discord": "https://discord.gg/ESHStjSjD4"
    }
  },
  "contextual": {
    "options": [
      "copy",
      "view",
      "chatgpt",
      "claude"
    ]
  },
  "redirects": [
    {
      "source": "/modules/:slug*",
      "destination": "/:slug*"
    }
  ]
}



================================================
FILE: docs/index.mdx
================================================
---
title: Introduction
description: OpenHands - Code Less, Make More
icon: book-open
mode: wide
---
Use AI to tackle the toil in your backlog. Our agents have all the same tools as a human developer: they can modify code, run commands, browse the web, call APIs, and yes-even copy code snippets from StackOverflow.

<iframe
  className="w-full aspect-video"
  src="https://www.youtube.com/embed/oB4JR98KRAA"
  title="YouTube video player"
  frameborder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowfullscreen
></iframe>



================================================
FILE: docs/openapi.json
================================================
{
  "openapi": "3.0.3",
  "info": {
    "title": "OpenHands API",
    "description": "OpenHands: Code Less, Make More",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://app.all-hands.dev",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health check",
        "description": "Check if the API is running",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "API is running",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}/config": {
      "get": {
        "summary": "Get runtime configuration",
        "description": "Retrieve the runtime configuration (session ID and runtime ID)",
        "operationId": "getRemoteRuntimeConfig",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Runtime configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "runtime_id": {
                      "type": "string",
                      "nullable": true
                    },
                    "session_id": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}/vscode-url": {
      "get": {
        "summary": "Get VSCode URL",
        "description": "Get the VSCode URL for the conversation",
        "operationId": "getVscodeUrl",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "VSCode URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vscode_url": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error getting VSCode URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vscode_url": {
                      "type": "string",
                      "nullable": true
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}/web-hosts": {
      "get": {
        "summary": "Get runtime hosts",
        "description": "Get the hosts used by the runtime",
        "operationId": "getHosts",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Runtime hosts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hosts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error getting runtime hosts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hosts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}/submit-feedback": {
      "post": {
        "summary": "Submit feedback",
        "description": "Submit user feedback for a conversation",
        "operationId": "submitFeedback",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "version": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "string",
                    "default": "private"
                  },
                  "polarity": {
                    "type": "string"
                  },
                  "feedback": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Error submitting feedback",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}/list-files": {
      "get": {
        "summary": "List files",
        "description": "List files in the specified path",
        "operationId": "listFiles",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Path to list files from"
          }
        ],
        "responses": {
          "200": {
            "description": "List of files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Runtime not initialized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error listing files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}/select-file": {
      "get": {
        "summary": "Get file content",
        "description": "Retrieve the content of a specified file",
        "operationId": "selectFile",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          },
          {
            "name": "file",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Path of the file to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "File content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unable to open binary file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error opening file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}/zip-directory": {
      "get": {
        "summary": "Download workspace as zip",
        "description": "Download the current workspace as a zip file",
        "operationId": "zipCurrentWorkspace",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace zip file",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "500": {
            "description": "Error zipping workspace",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}/git/changes": {
      "get": {
        "summary": "Get git changes",
        "description": "Get git changes in the workspace",
        "operationId": "gitChanges",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Git changes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Error getting git changes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}/git/diff": {
      "get": {
        "summary": "Get git diff",
        "description": "Get git diff for a specific file",
        "operationId": "gitDiff",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Path of the file to get diff for"
          }
        ],
        "responses": {
          "200": {
            "description": "Git diff",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Error getting git diff",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}/trajectory": {
      "get": {
        "summary": "Get trajectory",
        "description": "Get the conversation trajectory",
        "operationId": "getTrajectory",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation trajectory",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "trajectory": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error getting trajectory",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "trajectory": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}/security/{path}": {
      "get": {
        "summary": "Security analyzer API (GET)",
        "description": "Catch-all route for security analyzer API GET requests",
        "operationId": "securityApiGet",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security analyzer API path"
          }
        ],
        "responses": {
          "200": {
            "description": "Security analyzer response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Security analyzer not initialized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Security analyzer API (POST)",
        "description": "Catch-all route for security analyzer API POST requests",
        "operationId": "securityApiPost",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security analyzer API path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Security analyzer response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Security analyzer not initialized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Security analyzer API (PUT)",
        "description": "Catch-all route for security analyzer API PUT requests",
        "operationId": "securityApiPut",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security analyzer API path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Security analyzer response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Security analyzer not initialized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Security analyzer API (DELETE)",
        "description": "Catch-all route for security analyzer API DELETE requests",
        "operationId": "securityApiDelete",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security analyzer API path"
          }
        ],
        "responses": {
          "200": {
            "description": "Security analyzer response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Security analyzer not initialized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations": {
      "post": {
        "summary": "Create new conversation",
        "description": "Initialize a new conversation",
        "operationId": "newConversation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repository": {
                    "type": "string",
                    "nullable": true,
                    "description": "Full name of the repository (e.g., owner/repo)"
                  },
                  "git_provider": {
                    "type": "string",
                    "nullable": true,
                    "description": "The Git provider (e.g., github or gitlab). If omitted, all configured providers are checked for the repository."
                  },
                  "selected_branch": {
                    "type": "string",
                    "nullable": true
                  },
                  "initial_user_msg": {
                    "type": "string",
                    "nullable": true
                  },
                  "conversation_instructions": {
                    "type": "string",
                    "nullable": true,
                    "description": "Optional instructions the agent must follow throughout the conversation while addressing the user's initial task"
                  },
                  "image_urls": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "replay_json": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Conversation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "conversation_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error creating conversation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string"
                    },
                    "msg_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Search conversations",
        "description": "Search for conversations",
        "operationId": "searchConversations",
        "parameters": [
          {
            "name": "page_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Page ID for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            },
            "description": "Number of conversations to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "conversation_id": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "last_updated_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "selected_repository": {
                            "type": "string",
                            "nullable": true
                          },
                          "status": {
                            "type": "string",
                            "enum": ["RUNNING", "STOPPED"]
                          },
                          "trigger": {
                            "type": "string",
                            "enum": ["GUI", "API"]
                          }
                        }
                      }
                    },
                    "next_page_id": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/conversations/{conversation_id}": {
      "get": {
        "summary": "Get conversation",
        "description": "Get conversation details",
        "operationId": "getConversation",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation_id": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "last_updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "selected_repository": {
                      "type": "string",
                      "nullable": true
                    },
                    "status": {
                      "type": "string",
                      "enum": ["RUNNING", "STOPPED"]
                    },
                    "trigger": {
                      "type": "string",
                      "enum": ["GUI", "API"]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update conversation",
        "description": "Update conversation details",
        "operationId": "updateConversation",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Conversation updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete conversation",
        "description": "Delete a conversation",
        "operationId": "deleteConversation",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/repositories": {
      "get": {
        "summary": "Get user repositories",
        "description": "Get repositories for the authenticated user",
        "operationId": "getUserRepositories",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "pushed"
            },
            "description": "Sort order for repositories"
          }
        ],
        "responses": {
          "200": {
            "description": "User repositories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "full_name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string",
                        "nullable": true
                      },
                      "html_url": {
                        "type": "string"
                      },
                      "private": {
                        "type": "boolean"
                      },
                      "fork": {
                        "type": "boolean"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unknown error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/info": {
      "get": {
        "summary": "Get user info",
        "description": "Get information about the authenticated user",
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "User information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string",
                      "nullable": true
                    },
                    "email": {
                      "type": "string",
                      "nullable": true
                    },
                    "avatar_url": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unknown error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/search/repositories": {
      "get": {
        "summary": "Search repositories",
        "description": "Search for repositories",
        "operationId": "searchRepositories",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Search query"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 5
            },
            "description": "Number of repositories to return per page"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "stars"
            },
            "description": "Sort order for repositories"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "desc"
            },
            "description": "Sort direction"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "full_name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string",
                        "nullable": true
                      },
                      "html_url": {
                        "type": "string"
                      },
                      "private": {
                        "type": "boolean"
                      },
                      "fork": {
                        "type": "boolean"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unknown error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/suggested-tasks": {
      "get": {
        "summary": "Get suggested tasks",
        "description": "Get suggested tasks for the authenticated user across their most recently pushed repositories",
        "operationId": "getSuggestedTasks",
        "responses": {
          "200": {
            "description": "Suggested tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "repository": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unknown error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings": {
      "get": {
        "summary": "Get settings",
        "description": "Get user settings",
        "operationId": "loadSettings",
        "responses": {
          "200": {
            "description": "User settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "language": {
                      "type": "string"
                    },
                    "agent": {
                      "type": "string"
                    },
                    "security_analyzer": {
                      "type": "string"
                    },
                    "confirmation_mode": {
                      "type": "boolean"
                    },
                    "llm_model": {
                      "type": "string"
                    },
                    "llm_api_key_set": {
                      "type": "boolean"
                    },
                    "llm_base_url": {
                      "type": "string",
                      "nullable": true
                    },
                    "remote_runtime_resource_factor": {
                      "type": "number"
                    },
                    "enable_default_condenser": {
                      "type": "boolean"
                    },
                    "enable_sound_notifications": {
                      "type": "boolean"
                    },
                    "user_consents_to_analytics": {
                      "type": "boolean"
                    },
                    "provider_tokens_set": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Settings not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Store settings",
        "description": "Store user settings",
        "operationId": "storeSettings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "language": {
                    "type": "string"
                  },
                  "agent": {
                    "type": "string"
                  },
                  "security_analyzer": {
                    "type": "string"
                  },
                  "confirmation_mode": {
                    "type": "boolean"
                  },
                  "llm_model": {
                    "type": "string"
                  },
                  "llm_api_key": {
                    "type": "string"
                  },
                  "llm_base_url": {
                    "type": "string",
                    "nullable": true
                  },
                  "remote_runtime_resource_factor": {
                    "type": "number"
                  },
                  "enable_default_condenser": {
                    "type": "boolean"
                  },
                  "enable_sound_notifications": {
                    "type": "boolean"
                  },
                  "user_consents_to_analytics": {
                    "type": "boolean"
                  },
                  "provider_tokens": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Settings stored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error storing settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reset-settings": {
      "post": {
        "summary": "Reset settings (Deprecated)",
        "description": "This endpoint is deprecated and will return a 410 Gone error. Reset functionality has been removed.",
        "operationId": "resetSettings",
        "deprecated": true,
        "responses": {
          "410": {
            "description": "Feature removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Reset settings functionality has been removed."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/unset-settings-tokens": {
      "post": {
        "summary": "Unset settings tokens",
        "description": "Unset provider tokens in settings",
        "operationId": "unsetSettingsTokens",
        "responses": {
          "200": {
            "description": "Tokens unset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error unsetting tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/options/models": {
      "get": {
        "summary": "Get models",
        "description": "Get all models supported by LiteLLM",
        "operationId": "getLitellmModels",
        "responses": {
          "200": {
            "description": "List of models",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/options/agents": {
      "get": {
        "summary": "Get agents",
        "description": "Get all agents supported by OpenHands",
        "operationId": "getAgents",
        "responses": {
          "200": {
            "description": "List of agents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/options/security-analyzers": {
      "get": {
        "summary": "Get security analyzers",
        "description": "Get all supported security analyzers",
        "operationId": "getSecurityAnalyzers",
        "responses": {
          "200": {
            "description": "List of security analyzers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/options/config": {
      "get": {
        "summary": "Get config",
        "description": "Get current server configuration",
        "operationId": "getConfig",
        "responses": {
          "200": {
            "description": "Server configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Repository": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "html_url": {
            "type": "string"
          },
          "private": {
            "type": "boolean"
          },
          "fork": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "owner_type": {
            "type": "string",
            "enum": ["user", "organization"],
            "nullable": true
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "avatar_url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SuggestedTask": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ConversationInfo": {
        "type": "object",
        "properties": {
          "conversation_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "last_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "selected_repository": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": ["RUNNING", "STOPPED"]
          },
          "trigger": {
            "type": "string",
            "enum": ["GUI", "API"]
          }
        }
      },
      "ConversationInfoResultSet": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConversationInfo"
            }
          },
          "next_page_id": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FeedbackDataModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "version": {
            "type": "string"
          },
          "permissions": {
            "type": "string",
            "default": "private"
          },
          "polarity": {
            "type": "string"
          },
          "feedback": {
            "type": "string"
          },
          "trajectory": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "Settings": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "agent": {
            "type": "string"
          },
          "security_analyzer": {
            "type": "string"
          },
          "confirmation_mode": {
            "type": "boolean"
          },
          "llm_model": {
            "type": "string"
          },
          "llm_api_key": {
            "type": "string"
          },
          "llm_base_url": {
            "type": "string",
            "nullable": true
          },
          "remote_runtime_resource_factor": {
            "type": "number"
          },
          "enable_default_condenser": {
            "type": "boolean"
          },
          "enable_sound_notifications": {
            "type": "boolean"
          },
          "user_consents_to_analytics": {
            "type": "boolean"
          }
        }
      },
      "GETSettingsModel": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "agent": {
            "type": "string"
          },
          "security_analyzer": {
            "type": "string"
          },
          "confirmation_mode": {
            "type": "boolean"
          },
          "llm_model": {
            "type": "string"
          },
          "llm_api_key_set": {
            "type": "boolean"
          },
          "llm_base_url": {
            "type": "string",
            "nullable": true
          },
          "remote_runtime_resource_factor": {
            "type": "number"
          },
          "enable_default_condenser": {
            "type": "boolean"
          },
          "enable_sound_notifications": {
            "type": "boolean"
          },
          "user_consents_to_analytics": {
            "type": "boolean"
          },
          "provider_tokens_set": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "POSTSettingsModel": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "agent": {
            "type": "string"
          },
          "security_analyzer": {
            "type": "string"
          },
          "confirmation_mode": {
            "type": "boolean"
          },
          "llm_model": {
            "type": "string"
          },
          "llm_api_key": {
            "type": "string"
          },
          "llm_base_url": {
            "type": "string",
            "nullable": true
          },
          "remote_runtime_resource_factor": {
            "type": "number"
          },
          "enable_default_condenser": {
            "type": "boolean"
          },
          "enable_sound_notifications": {
            "type": "boolean"
          },
          "user_consents_to_analytics": {
            "type": "boolean"
          },
          "provider_tokens": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}



================================================
FILE: docs/README_JA.md
================================================
# セットアップ

```
npm install -g mint
```

または

```
yarn global add mint
```

# プレビュー

```
mint dev
```



================================================
FILE: docs/static/img/backend_architecture.puml
================================================
@startuml openhands
!pragma useIntermediatePackages false

class openhands.action.agent.AgentEchoAction {
  content: str
  runnable: bool
  action: str
}
class openhands.action.agent.AgentFinishAction {
  runnable: bool
  action: str
}
class openhands.observation.AgentMessageObservation {
  role: str
  observation: str
}
class openhands.action.agent.AgentSummarizeAction {
  summary: str
  action: str
}
class openhands.action.agent.AgentThinkAction {
  thought: str
  runnable: bool
  action: str
}
class openhands.action.base.ExecutableAction {
}
class openhands.action.base.NotExecutableAction {
}
class openhands.observation.Observation {
  content: str
}
class openhands.action.base.Action {
}
class openhands.action.base.NullAction {
  action: str
}
class openhands.action.bash.CmdRunAction {
  command: str
  action: str
}
class openhands.action.browse.BrowseURLAction {
  url: str
  action: str
}
class openhands.observation.BrowserOutputObservation {
  url: str
  status_code: int
  error: bool
  observation: str
}
class openhands.action.fileop.FileReadAction {
  path: str
  action: str
}
class openhands.observation.FileReadObservation {
  path: str
  observation: str
}
class openhands.action.fileop.FileWriteAction {
  path: str
  contents: str
  action: str
}
class openhands.observation.FileWriteObservation {
  path: str
  observation: str
}
class openhands.action.tasks.AddTaskAction {
  parent: str
  goal: str
  subtasks: list
  action: str
}
class openhands.action.tasks.ModifyTaskAction {
  id: str
  state: str
  action: str
}
abstract class openhands.agent.Agent {
  _registry: Dict[str, Type[Agent]] {static}
  llm: LLM
  _complete: None
}
class openhands.llm.llm.LLM {
  model: None
  api_key: None
  base_url: None
  _debug_dir: None
  _debug_idx: None
  _debug_id: None
  _completion: None
}
class openhands.controller.agent_controller.AgentController {
  agent: Agent
  max_iterations: int
  workdir: str
  command_manager: CommandManager
  state: State
  plan: Plan
  callbacks: List[Callable]
}
class openhands.observation.AgentErrorObservation {
  observation: str
}
class openhands.controller.command_manager.CommandManager {
  directory: None
  shell: None
}
class openhands.observation.NullObservation {
  observation: str
}
class openhands.plan.Plan {
  main_goal: str {static}
  task: Task {static}
  main_goal: str
  task: None
}
class openhands.state.State {
  plan: Plan
  iteration: int
  history: List[Tuple[Action, Observation]]
  updated_info: List[Tuple[Action, Observation]]
}
class openhands.observation.CmdOutputObservation {
  command: str
  exit_code: int
  observation: str
}
class openhands.sandbox.sandbox.DockerInteractive {
  instance_id: None
  instance_id: None
  workspace_dir: None
  workspace_dir: None
  workspace_dir: None
  timeout: int
  base_container_image: None
  container_name: None
}
class openhands.observation.UserMessageObservation {
  role: str
  observation: str
}
class openhands.plan.Task {
  id: str {static}
  goal: str {static}
  parent: Task | None {static}
  subtasks: List[Task] {static}
  id: None
  id: None
  parent: None
  goal: str
  subtasks: None
}

class openhands.server.session.Session {
  websocket: None
  controller: Optional[AgentController]
  agent: Optional[Agent]
  agent_task: None
}

openhands.action.base.ExecutableAction <|-- openhands.action.agent.AgentEchoAction
openhands.action.base.NotExecutableAction <|-- openhands.action.agent.AgentFinishAction
openhands.observation.Observation <|-- openhands.observation.AgentMessageObservation
openhands.action.base.NotExecutableAction <|-- openhands.action.agent.AgentSummarizeAction
openhands.action.base.NotExecutableAction <|-- openhands.action.agent.AgentThinkAction
openhands.action.base.Action <|-- openhands.action.base.ExecutableAction
openhands.action.base.Action <|-- openhands.action.base.NotExecutableAction
openhands.action.base.NotExecutableAction <|-- openhands.action.base.NullAction
openhands.action.base.ExecutableAction <|-- openhands.action.bash.CmdRunAction
openhands.action.base.ExecutableAction <|-- openhands.action.browse.BrowseURLAction
openhands.observation.Observation <|-- openhands.observation.BrowserOutputObservation
openhands.action.base.ExecutableAction <|-- openhands.action.fileop.FileReadAction
openhands.observation.Observation <|-- openhands.observation.FileReadObservation
openhands.action.base.ExecutableAction <|-- openhands.action.fileop.FileWriteAction
openhands.observation.Observation <|-- openhands.observation.FileWriteObservation
openhands.action.base.NotExecutableAction <|-- openhands.action.tasks.AddTaskAction
openhands.action.base.NotExecutableAction <|-- openhands.action.tasks.ModifyTaskAction
openhands.agent.Agent *-- openhands.agent.Agent
openhands.agent.Agent *-- openhands.llm.llm.LLM
openhands.controller.agent_controller.AgentController *-- openhands.agent.Agent
openhands.observation.Observation <|-- openhands.observation.AgentErrorObservation
openhands.observation.Observation <|-- openhands.observation.NullObservation
openhands.plan.Plan *-- openhands.plan.Task
openhands.state.State *-- openhands.plan.Plan
openhands.state.State *-- openhands.observation.CmdOutputObservation
openhands.state.State *-- openhands.action.base.Action
openhands.state.State *-- openhands.observation.Observation
openhands.observation.Observation <|-- openhands.observation.CmdOutputObservation
openhands.observation.Observation <|-- openhands.observation.UserMessageObservation
openhands.plan.Task *-- openhands.plan.Task
openhands.server.session.Session *-- openhands.controller.agent_controller.AgentController
openhands.server.session.Session *-- openhands.agent.Agent
openhands.controller.agent_controller.AgentController -> openhands.state.State
openhands.controller.agent_controller.AgentController -> openhands.plan.Plan
openhands.controller.agent_controller.AgentController -> openhands.controller.command_manager.CommandManager
openhands.controller.command_manager.CommandManager -> openhands.sandbox.sandbox.DockerInteractive

footer Based on f3fda42; Generated by //py2puml//
@enduml



================================================
FILE: docs/static/img/system_architecture.puml
================================================
@startuml "System Architecture"


node frontend as frontend{

    component App

    package components{

        component Terminal

        component ChatInterface

        component BannerSettings

    }

    package services{
        component chatService

        component settingsService

        chatService -[hidden]u-> settingsService
    }

    package socket

    App -> Terminal
    App -> ChatInterface
    App -> BannerSettings
    ChatInterface -> chatService
    BannerSettings -> settingsService
    Terminal -> socket
    chatService -d-> socket
    settingsService -d-> socket
    services -[hidden]d-> socket

    Terminal -[hidden]u-> ChatInterface
    ChatInterface -[hidden]u-> BannerSettings



    interface "HTTP (:3001)" as HTTP
    HTTP - App

}

node backend{
    package server as serverpackage{
        component Server

        'defined in server/server.py, port is defined at startup with uvicorn
        interface "Client WS\n(:3000/ws)" as client_socket
        client_socket - Server


    }
    node AgentController{

    }
    Server -d-> AgentController
}


socket -d-> client_socket: connects to \n VITE_TERMINAL_WS_URL

@enduml



================================================
FILE: docs/success-stories/index.mdx
================================================
---
title: "Success Stories"
description: "Real-world examples of what you can achieve with OpenHands"
---

Discover how developers and teams are using OpenHands to automate their software development workflows. From quick fixes to complex projects, see what's possible with AI-powered development assistance.

Check out the [#success-stories](https://www.linen.dev/s/openhands/c/success-stories) channel on our Slack for more!

<Update label="2025-06-13 OpenHands helps frontline support" description="@Joe Pelletier">

## One of the cool things about OpenHands, and especially the Slack Integration, is the ability to empower folks who are on the ‘front lines’ with customers.

For example, often times Support and Customer Success teams will field bug reports, doc questions, and other ‘nits’ from customers. They tend to have few options to deal with this, other than file a feedback ticket with product teams and hope it gets prioritized in an upcoming sprint.

Instead, with tools like OpenHands and the Slack integration, they can request OpenHands to make fixes proactively and then have someone on the engineering team (like a lead engineer, a merge engineer, or even technical product manager) review the PR and approve it — thus reducing the cycle time for ‘quick wins’ from weeks to just a few hours.

Here's how we do that with the OpenHands project:

<iframe
  width="560"
  height="560"
  src="https://www.linen.dev/s/openhands/t/29118545/seems-mcp-config-from-config-toml-is-being-overwritten-hence#629f8e2b-cde8-427e-920c-390557a06cc9"
  frameborder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowfullscreen
></iframe>

[Original Slack thread](https://www.linen.dev/s/openhands/t/29124350/one-of-the-cool-things-about-openhands-and-especially-the-sl#25029f37-7b0d-4535-9187-83b3e06a4011)

</Update>


<Update label="2025-06-13 Ask OpenHands to show me some love" description="@Graham Neubig">

## Asked openhands to “show me some love” and...

Asked openhands to “show me some love” and it coded up this app for me, actually kinda genuinely feel loved

<video
  controls
  autoplay
  className="w-full aspect-video"
  src="/success-stories/stories/2025-06-13-show-love/v1.mp4"
></video>

[Original Slack thread](https://www.linen.dev/s/openhands/t/29100731/asked-openhands-to-show-me-some-love-and-it-coded-up-this-ap#1e08af6b-b7d5-4167-8a53-17e6806555e0)

</Update>

<Update label="2025-06-11 OpenHands does 100% of my infra IAM research for me" description="@Xingyao Wang">

## Now, OpenHands does 100% of my infra IAM research for me

Got an IAM error on GCP? Send a screenshot to OH... and it just works!!!
Can't imagine going back to the early days without OH: I'd spend an entire afternoon figuring how to get IAM right

[Original Slack thread](https://www.linen.dev/s/openhands/t/29100732/now-openhands-does-100-of-my-infra-iam-research-for-me-sweat#20482a73-4e2e-4edd-b6d1-c9e8442fccd1)

![](/success-stories/stories/2025-06-11-infra-iam/s1.png)
![](/success-stories/stories/2025-06-11-infra-iam/s2.png)

</Update>

<Update label="2025-06-08 OpenHands builds an interactive map for me" description="@Rodrigo Argenton Freire (ODLab)">

## Very simple example, but baby steps....

I am a professor of architecture and urban design. We built, me and some students, an interactive map prototype to help visitors and new students to find important places in the campus. Considering that we lack a lot of knowledge in programming, that was really nice to build and a smooth process.
We first created the main components with all-hands and then adjusted some details locally. Definitely, saved us a lot of time and money.
That's a prototype but we will have all the info by tuesday.
https://buriti-emau.github.io/Mapa-UFU/

[Original Slack thread](https://www.linen.dev/s/openhands/t/29100736/very-simple-example-but-baby-steps-i-am-a-professor-of-archi#8f2e3f3f-44e6-44ea-b9a8-d53487470179)

![](/success-stories/stories/2025-06-08-map/s1.png)

</Update>


<Update label="2025-06-06 Web Search Saves the Day" description="@Ian Walker">

## Tavily adapter helps solve persistent debugging issue

Big congratulations to the new [Tavily adapter](https://www.all-hands.dev/blog/building-a-provably-versatile-agent)... OpenHands and I have been beavering away at a Lightstreamer client library for most of this week but were getting a persistent (and unhelpful) "unexpected error" from the server.

Coming back to the problem today, after trying several unsuccessful fixes prompted by me, OH decided all by itself to search the web, and found the cause of the problem (of course it was simply CRLF line endings...). I was on the verge of giving up - good thing OH has more stamina than me!

This demonstrates how OpenHands' web search capabilities can help solve debugging issues that would otherwise require extensive manual research.

<iframe
  width="560"
  height="560"
  src="https://www.linen.dev/s/openhands/t/29100737/big-congratulations-to-the-new-tavily-adapter-openhands-and-#87b027e5-188b-425e-8aa9-719dcb4929f4"
  title="YouTube video player"
  frameborder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowfullscreen
></iframe>


[Original Slack thread](https://www.linen.dev/s/openhands/t/29100737/big-congratulations-to-the-new-tavily-adapter-openhands-and-#76f1fb26-6ef7-4709-b9ea-fb99105e47e4)

</Update>

<Update label="2025-06-05 OpenHands updates my personal website for a new paper" description="@Xingyao Wang">

## I asked OpenHands to update my personal website for the "OpenHands Versa" paper.

It is an extremely trivial task: You just need to browse to arxiv, copy the author names, format them for BibTeX, and then modify the papers.bib file. But now I'm getting way too lazy to even open my IDE and actually do this one-file change!

[Original Tweet/X thread](https://x.com/xingyaow_/status/1930796287919542410)

[Original Slack thread](https://www.linen.dev/s/openhands/t/29100738/i-asked-openhands-to-update-my-personal-website-for-the-open#f0324022-b12b-4d34-b12b-bdbc43823f69)

</Update>

<Update label="2025-06-02 OpenHands makes an animated gif of swe-bench verified scores over time" description="@Graham Neubig">

## I asked OpenHands to make an animated gif of swe-bench verified scores over time.

It took a bit of prompting but ended up looking pretty nice I think

<video width="560" height="315" autoPlay loop muted src="/success-stories/stories/2025-06-02-swebench-score/s1.mp4"></video>

[Original Slack thread](https://www.linen.dev/s/openhands/t/29100744/i-asked-openhands-to-make-an-animated-gif-of-swe-bench-verif#fb3b82c9-6222-4311-b97b-b2ac1cfe6dff)

</Update>

<Update label="2025-05-30 AWS Troubleshooting" description="@Graham Neubig">

## Quick AWS security group fix

I really don't like trying to fix issues with AWS, especially security groups and other finicky things like this. But I started up an instance and wasn't able to ssh in. So I asked OpenHands:

> Currently, the following ssh command is timing out:
>
> $ ssh -i gneubig.pem ubuntu@XXX.us-east-2.compute.amazonaws.com
> ssh: connect to host XXX.us-east-2.compute.amazonaws.com port 22: Operation timed out
>
> Use the provided AWS credentials to take a look at i-XXX and examine why

And 2 minutes later I was able to SSH in!

This shows how OpenHands can quickly diagnose and fix AWS infrastructure issues that would normally require manual investigation.

[Original Slack thread](https://www.linen.dev/s/openhands/t/29100747/i-really-don-t-like-trying-to-fix-issues-with-aws-especially#d92a66d2-3bc1-4467-9d09-dc983004d083)

</Update>


<Update label="2025-05-04 Chrome Extension Development" description="@Xingyao Wang">

## OpenHands builds Chrome extension for GitHub integration

I asked OpenHands to write a Chrome extension based on our [OpenHands Cloud API](https://docs.all-hands.dev/modules/usage/cloud/cloud-api). Once installed, you can now easily launch an OpenHands cloud session from your GitHub webpage/PR!

This demonstrates OpenHands' ability to create browser extensions and integrate with external APIs, enabling seamless workflows between GitHub and OpenHands Cloud.

![Chrome extension](/success-stories/stories/2025-05-04-chrome-extension/s1.png)
![Chrome extension](/success-stories/stories/2025-05-04-chrome-extension/s2.png)

[GitHub Repository](https://github.com/xingyaoww/openhands-chrome-extension)

[Original Slack thread](https://www.linen.dev/s/openhands/t/29100755/i-asked-openhands-to-write-a-chrome-extension-based-on-our-h#88f14b7f-f8ff-40a6-83c2-bd64e95924c5)

</Update>


<Update label="2025-04-11 Visual UI Testing" description="@Xingyao Wang">

## OpenHands tests UI automatically with visual browsing

Thanks to visual browsing -- OpenHands can actually test some simple UI by serving the website, clicking the button in the browser and looking at screenshots now!

Prompt is just:
```
I want to create a Hello World app in Javascript that:
* Displays Hello World in the middle.
* Has a button that when clicked, changes the greeting with a bouncing animation to fun versions of Hello.
* Has a counter for how many times the button has been clicked.
* Has another button that changes the app's background color.
```

Eager-to-work Sonnet 3.7 will test stuff for you without you asking!

This showcases OpenHands' visual browsing capabilities, enabling it to create, serve, and automatically test web applications through actual browser interactions and screenshot analysis.

![Visual UI testing](/success-stories/stories/2025-04-11-visual-ui/s1.png)

[Original Slack thread](https://www.linen.dev/s/openhands/t/29100764/thanks-to-u07k0p3bdb9-s-visual-browsing-openhands-can-actual#21beb9bc-1a04-4272-87e9-4d3e3b9925e7)

</Update>

<Update label="2025-03-07 Proactive Error Handling" description="@Graham Neubig">

## OpenHands fixes crashes before you notice them

Interesting story, I asked OpenHands to start an app on port 12000, it showed up on the app pane. I started using the app, and then it crashed... But because it crashed in OpenHands, OpenHands immediately saw the error message and started fixing the problem without me having to do anything. It was already fixing the problem before I even realized what was going wrong.

This demonstrates OpenHands' proactive monitoring capabilities - it doesn't just execute commands, but actively watches for errors and begins remediation automatically, often faster than human reaction time.

</Update>

<Update label="2024-12-03 Creative Design Acceleration" description="@Rohit Malhotra">

## Pair programming for interactive design projects

Used OpenHands as a pair programmer to do heavy lifting for a creative/interactive design project in p5js.

I usually take around 2 days for high fidelity interactions (planning strategy + writing code + circling back with designer), did this in around 5hrs instead with the designer watching curiously the entire time.

This showcases how OpenHands can accelerate creative and interactive design workflows, reducing development time by 75% while maintaining high quality output.

[Original Tweet](https://x.com/rohit_malh5/status/1863995531657425225)

</Update>



================================================
FILE: docs/usage/about.mdx
================================================
---
title: About OpenHands
---

## Research Strategy

Achieving full replication of production-grade applications with LLMs is a complex endeavor. Our strategy involves:

- **Core Technical Research:** Focusing on foundational research to understand and improve the technical aspects of code generation and handling.
- **Task Planning:** Developing capabilities for bug detection, codebase management, and optimization.
- **Evaluation:** Establishing comprehensive evaluation metrics to better understand and improve our agents.

## Default Agent

Our default Agent is currently the [CodeActAgent](./agents), which is capable of generating code and handling files.

## Built With

OpenHands is built using a combination of powerful frameworks and libraries, providing a robust foundation for its
development. Here are the key technologies used in the project:

![FastAPI](https://img.shields.io/badge/FastAPI-black?style=for-the-badge) ![uvicorn](https://img.shields.io/badge/uvicorn-black?style=for-the-badge) ![LiteLLM](https://img.shields.io/badge/LiteLLM-black?style=for-the-badge) ![Docker](https://img.shields.io/badge/Docker-black?style=for-the-badge) ![Ruff](https://img.shields.io/badge/Ruff-black?style=for-the-badge) ![MyPy](https://img.shields.io/badge/MyPy-black?style=for-the-badge) ![LlamaIndex](https://img.shields.io/badge/LlamaIndex-black?style=for-the-badge) ![React](https://img.shields.io/badge/React-black?style=for-the-badge)

Please note that the selection of these technologies is in progress, and additional technologies may be added or
existing ones may be removed as the project evolves. We strive to adopt the most suitable and efficient tools to
enhance the capabilities of OpenHands.

## License

Distributed under MIT [License](https://github.com/All-Hands-AI/OpenHands/blob/main/LICENSE).



================================================
FILE: docs/usage/agents.mdx
================================================
---
title: Main Agent and Capabilities
---

## CodeActAgent

### Description

This agent implements the CodeAct idea ([paper](https://arxiv.org/abs/2402.01030), [tweet](https://twitter.com/xingyaow_/status/1754556835703751087)) that consolidates LLM agents’ **act**ions into a
unified **code** action space for both _simplicity_ and _performance_.

The conceptual idea is illustrated below. At each turn, the agent can:

1. **Converse**: Communicate with humans in natural language to ask for clarification, confirmation, etc.
2. **CodeAct**: Choose to perform the task by executing code

- Execute any valid Linux `bash` command
- Execute any valid `Python` code with [an interactive Python interpreter](https://ipython.org/). This is simulated through `bash` command, see plugin system below for more details.

![image](https://github.com/All-Hands-AI/OpenHands/assets/38853559/92b622e3-72ad-4a61-8f41-8c040b6d5fb3)

### Demo

https://github.com/All-Hands-AI/OpenHands/assets/38853559/f592a192-e86c-4f48-ad31-d69282d5f6ac

_Example of CodeActAgent with `gpt-4-turbo-2024-04-09` performing a data science task (linear regression)_.



================================================
FILE: docs/usage/common-settings.mdx
================================================
---
title: OpenHands Settings
description: Overview of some of the settings available in OpenHands.
---

## Openhands Cloud vs Running on Your Own

There are some differences between the settings available in OpenHands Cloud and those available when running OpenHands
on your own:
* [OpenHands Cloud settings](/usage/cloud/cloud-ui#settings)
* [Settings available when running on your own](/usage/how-to/gui-mode#settings)

Refer to these pages for more detailed information.

## Secrets Management

OpenHands provides a secrets manager that allows you to securely store and manage sensitive information that can be
accessed by the agent during runtime, such as API keys. These secrets are automatically exported as environment
variables in the agent's runtime environment.

### Accessing the Secrets Manager

In the Settings page, navigate to the `Secrets` tab. Here, you'll see a list of all your existing custom secrets.

### Adding a New Secret
1. Click `Add a new secret`.
2. Fill in the following fields:
   - **Name**: A unique identifier for your secret (e.g., `AWS_ACCESS_KEY`). This will be the environment variable name.
   - **Value**: The sensitive information you want to store.
   - **Description** (optional): A brief description of what the secret is used for, which is also provided to the agent.
3. Click `Add secret` to save.

### Editing a Secret

1. Click the `Edit` button next to the secret you want to modify.
2. You can update the name and description of the secret.
<Note>
  For security reasons, you cannot view or edit the value of an existing secret. If you need to change the
  value, delete the secret and create a new one.
</Note>

### Deleting a Secret

1. Click the `Delete` button next to the secret you want to remove.
2. Select `Confirm` to delete the secret.

### Using Secrets in the Agent
 - All custom secrets are automatically exported as environment variables in the agent's runtime environment.
 - You can access them in your code using standard environment variable access methods
   (e.g., `os.environ['SECRET_NAME']` in Python).
 - Example: If you create a secret named `OPENAI_API_KEY`, you can access it in your code as
   `process.env.OPENAI_API_KEY` in JavaScript or `os.environ['OPENAI_API_KEY']` in Python.



================================================
FILE: docs/usage/configuration-options.mdx
================================================
---
title: Configuration Options
description: This page outlines all available configuration options for OpenHands, allowing you to customize its
  behavior and integrate it with other services.
---

<Note>
   In GUI Mode, any settings applied through the Settings UI will take precedence.
</Note>

## Location of the `config.toml` File

When running OpenHands in CLI, headless, or development mode, you can use a project-specific `config.toml` file for configuration, which must be
located in the same directory from which the command is run. Alternatively, you may use the `--config-file` option to
specify a different path to the `config.toml` file.

## Core Configuration

The core configuration options are defined in the `[core]` section of the `config.toml` file.

### Workspace
- `workspace_base` **(Deprecated)**
  - Type: `str`
  - Default: `"./workspace"`
  - Description: Base path for the workspace. **Deprecated: Use `SANDBOX_VOLUMES` instead.**

- `cache_dir`
  - Type: `str`
  - Default: `"/tmp/cache"`
  - Description: Cache directory path

### Debugging and Logging
- `debug`
  - Type: `bool`
  - Default: `false`
  - Description: Enable debugging

- `disable_color`
  - Type: `bool`
  - Default: `false`
  - Description: Disable color in terminal output

### Trajectories
- `save_trajectory_path`
  - Type: `str`
  - Default: `"./trajectories"`
  - Description: Path to store trajectories (can be a folder or a file). If it's a folder, the trajectories will be saved in a file named with the session id name and .json extension, in that folder.

- `replay_trajectory_path`
  - Type: `str`
  - Default: `""`
  - Description: Path to load a trajectory and replay. If given, must be a path to the trajectory file in JSON format. The actions in the trajectory file would be replayed first before any user instruction is executed.

### File Store
- `file_store_path`
  - Type: `str`
  - Default: `"/tmp/file_store"`
  - Description: File store path

- `file_store`
  - Type: `str`
  - Default: `"memory"`
  - Description: File store type

- `file_uploads_allowed_extensions`
  - Type: `list of str`
  - Default: `[".*"]`
  - Description: List of allowed file extensions for uploads

- `file_uploads_max_file_size_mb`
  - Type: `int`
  - Default: `0`
  - Description: Maximum file size for uploads, in megabytes

- `file_uploads_restrict_file_types`
  - Type: `bool`
  - Default: `false`
  - Description: Restrict file types for file uploads

- `file_uploads_allowed_extensions`
  - Type: `list of str`
  - Default: `[".*"]`
  - Description: List of allowed file extensions for uploads

### Task Management
- `max_budget_per_task`
  - Type: `float`
  - Default: `0.0`
  - Description: Maximum budget per task (0.0 means no limit)

- `max_iterations`
  - Type: `int`
  - Default: `100`
  - Description: Maximum number of iterations

### Sandbox Configuration
- `volumes`
  - Type: `str`
  - Default: `None`
  - Description: Volume mounts in the format 'host_path:container_path[:mode]', e.g. '/my/host/dir:/workspace:rw'. Multiple mounts can be specified using commas, e.g. '/path1:/workspace/path1,/path2:/workspace/path2:ro'

- `workspace_mount_path_in_sandbox` **(Deprecated)**
  - Type: `str`
  - Default: `"/workspace"`
  - Description: Path to mount the workspace in the sandbox. **Deprecated: Use `SANDBOX_VOLUMES` instead.**

- `workspace_mount_path` **(Deprecated)**
  - Type: `str`
  - Default: `""`
  - Description: Path to mount the workspace. **Deprecated: Use `SANDBOX_VOLUMES` instead.**

- `workspace_mount_rewrite` **(Deprecated)**
  - Type: `str`
  - Default: `""`
  - Description: Path to rewrite the workspace mount path to. You can usually ignore this, it refers to special cases of running inside another container. **Deprecated: Use `SANDBOX_VOLUMES` instead.**

### Miscellaneous
- `run_as_openhands`
  - Type: `bool`
  - Default: `true`
  - Description: Run as OpenHands

- `runtime`
  - Type: `str`
  - Default: `"docker"`
  - Description: Runtime environment

- `default_agent`
  - Type: `str`
  - Default: `"CodeActAgent"`
  - Description: Name of the default agent

- `jwt_secret`
  - Type: `str`
  - Default: `uuid.uuid4().hex`
  - Description: JWT secret for authentication. Please set it to your own value.

## LLM Configuration

The LLM (Large Language Model) configuration options are defined in the `[llm]` section of the `config.toml` file.

To use these with the docker command, pass in `-e LLM_<option>`. Example: `-e LLM_NUM_RETRIES`.

<Note>
For development setups, you can also define custom named LLM configurations. See [Custom LLM Configurations](./llms/custom-llm-configs) for details.
</Note>

**AWS Credentials**
- `aws_access_key_id`
  - Type: `str`
  - Default: `""`
  - Description: AWS access key ID

- `aws_region_name`
  - Type: `str`
  - Default: `""`
  - Description: AWS region name

- `aws_secret_access_key`
  - Type: `str`
  - Default: `""`
  - Description: AWS secret access key

### API Configuration
- `api_key`
  - Type: `str`
  - Default: `None`
  - Description: API key to use

- `base_url`
  - Type: `str`
  - Default: `""`
  - Description: API base URL

- `api_version`
  - Type: `str`
  - Default: `""`
  - Description: API version

- `input_cost_per_token`
  - Type: `float`
  - Default: `0.0`
  - Description: Cost per input token

- `output_cost_per_token`
  - Type: `float`
  - Default: `0.0`
  - Description: Cost per output token

### Custom LLM Provider
- `custom_llm_provider`
  - Type: `str`
  - Default: `""`
  - Description: Custom LLM provider


### Message Handling
- `max_message_chars`
  - Type: `int`
  - Default: `30000`
  - Description: The approximate maximum number of characters in the content of an event included in the prompt to the LLM. Larger observations are truncated.

- `max_input_tokens`
  - Type: `int`
  - Default: `0`
  - Description: Maximum number of input tokens

- `max_output_tokens`
  - Type: `int`
  - Default: `0`
  - Description: Maximum number of output tokens

### Model Selection
- `model`
  - Type: `str`
  - Default: `"claude-3-5-sonnet-20241022"`
  - Description: Model to use

### Retrying
- `num_retries`
  - Type: `int`
  - Default: `8`
  - Description: Number of retries to attempt

- `retry_max_wait`
  - Type: `int`
  - Default: `120`
  - Description: Maximum wait time (in seconds) between retry attempts

- `retry_min_wait`
  - Type: `int`
  - Default: `15`
  - Description: Minimum wait time (in seconds) between retry attempts

- `retry_multiplier`
  - Type: `float`
  - Default: `2.0`
  - Description: Multiplier for exponential backoff calculation

### Advanced Options
- `drop_params`
  - Type: `bool`
  - Default: `false`
  - Description: Drop any unmapped (unsupported) params without causing an exception

- `caching_prompt`
  - Type: `bool`
  - Default: `true`
  - Description: Using the prompt caching feature if provided by the LLM and supported

- `ollama_base_url`
  - Type: `str`
  - Default: `""`
  - Description: Base URL for the OLLAMA API

- `temperature`
  - Type: `float`
  - Default: `0.0`
  - Description: Temperature for the API

- `timeout`
  - Type: `int`
  - Default: `0`
  - Description: Timeout for the API

- `top_p`
  - Type: `float`
  - Default: `1.0`
  - Description: Top p for the API

- `disable_vision`
  - Type: `bool`
  - Default: `None`
  - Description: If model is vision capable, this option allows to disable image processing (useful for cost reduction)

## Agent Configuration

The agent configuration options are defined in the `[agent]` and `[agent.<agent_name>]` sections of the `config.toml` file.

### LLM Configuration
- `llm_config`
  - Type: `str`
  - Default: `'your-llm-config-group'`
  - Description: The name of the LLM config to use

### ActionSpace Configuration
- `function_calling`
  - Type: `bool`
  - Default: `true`
  - Description: Whether function calling is enabled

- `enable_browsing`
  - Type: `bool`
  - Default: `false`
  - Description: Whether browsing delegate is enabled in the action space (only works with function calling)

- `enable_llm_editor`
  - Type: `bool`
  - Default: `false`
  - Description: Whether LLM editor is enabled in the action space (only works with function calling)

- `enable_jupyter`
  - Type: `bool`
  - Default: `false`
  - Description: Whether Jupyter is enabled in the action space

- `enable_history_truncation`
  - Type: `bool`
  - Default: `true`
  - Description: Whether history should be truncated to continue the session when hitting LLM context length limit

### Microagent Usage
- `enable_prompt_extensions`
  - Type: `bool`
  - Default: `true`
  - Description: Whether to use microagents at all

- `disabled_microagents`
  - Type: `list of str`
  - Default: `None`
  - Description: A list of microagents to disable

## Sandbox Configuration

The sandbox configuration options are defined in the `[sandbox]` section of the `config.toml` file.



To use these with the docker command, pass in `-e SANDBOX_<option>`. Example: `-e SANDBOX_TIMEOUT`.

### Execution
- `timeout`
  - Type: `int`
  - Default: `120`
  - Description: Sandbox timeout in seconds

- `user_id`
  - Type: `int`
  - Default: `1000`
  - Description: Sandbox user ID

### Container Image
- `base_container_image`
  - Type: `str`
  - Default: `"nikolaik/python-nodejs:python3.12-nodejs22"`
  - Description: Container image to use for the sandbox

### Networking
- `use_host_network`
  - Type: `bool`
  - Default: `false`
  - Description: Use host network

- `runtime_binding_address`
  - Type: `str`
  - Default: `0.0.0.0`
  - Description: The binding address for the runtime ports.  It specifies which network interface on the host machine Docker should bind the runtime ports to.

### Linting and Plugins
- `enable_auto_lint`
  - Type: `bool`
  - Default: `false`
  - Description: Enable auto linting after editing

- `initialize_plugins`
  - Type: `bool`
  - Default: `true`
  - Description: Whether to initialize plugins

### Dependencies and Environment
- `runtime_extra_deps`
  - Type: `str`
  - Default: `""`
  - Description: Extra dependencies to install in the runtime image

- `runtime_startup_env_vars`
  - Type: `dict`
  - Default: `{}`
  - Description: Environment variables to set at the launch of the runtime

### Evaluation
- `browsergym_eval_env`
  - Type: `str`
  - Default: `""`
  - Description: BrowserGym environment to use for evaluation

## Security Configuration

The security configuration options are defined in the `[security]` section of the `config.toml` file.

To use these with the docker command, pass in `-e SECURITY_<option>`. Example: `-e SECURITY_CONFIRMATION_MODE`.

### Confirmation Mode
- `confirmation_mode`
  - Type: `bool`
  - Default: `false`
  - Description: Enable confirmation mode

### Security Analyzer
- `security_analyzer`
  - Type: `str`
  - Default: `""`
  - Description: The security analyzer to use

---

> **Note**: Adjust configurations carefully, especially for memory, security, and network-related settings to ensure optimal performance and security.
Please note that the configuration options may be subject to change in future versions of OpenHands. It's recommended to refer to the official documentation for the most up-to-date information.



================================================
FILE: docs/usage/faqs.mdx
================================================
---
title: FAQs
description: Frequently asked questions about OpenHands
icon: question
---

## Getting Started

### I'm new to OpenHands. Where should I start?

1. **Quick start**: Use [OpenHands Cloud](/usage/cloud/openhands-cloud) to get started quickly with
  [GitHub](/usage/cloud/github-installation), [GitLab](/usage/cloud/gitlab-installation),
  and [Slack](/usage/cloud/slack-installation) integrations.
2. **Run on your own**: If you prefer to run it on your own hardware, follow our [Getting Started guide](/usage/local-setup).
3. **First steps**: Read over the [start building guidelines](/usage/getting-started) and
  [prompting best practices](/usage/prompting/prompting-best-practices) to learn the basics.

### Can I use OpenHands for production workloads?

OpenHands is meant to be run by a single user on their local workstation. It is not appropriate for multi-tenant
deployments where multiple users share the same instance. There is no built-in authentication, isolation, or scalability.

If you're interested in running OpenHands in a multi-tenant environment, check out the source-available,
commercially-licensed [OpenHands Cloud Helm Chart](https://github.com/all-Hands-AI/OpenHands-cloud).

<Info>
Using OpenHands for work? We'd love to chat! Fill out
[this short form](https://docs.google.com/forms/d/e/1FAIpQLSet3VbGaz8z32gW9Wm-Grl4jpt5WgMXPgJ4EDPVmCETCBpJtQ/viewform)
to join our Design Partner program, where you'll get early access to commercial features and the opportunity to provide
input on our product roadmap.
</Info>

## Safety and Security

### It's doing stuff without asking, is that safe?

**Generally yes, but with important considerations.** OpenHands runs all code in a secure, isolated Docker container
(called a "sandbox") that is separate from your host system. However, the safety depends on your configuration:

**What's protected:**
- Your host system files and programs (unless you mount them using [this feature](/usage/runtimes/docker#connecting-to-your-filesystem))
- Host system resources
- Other containers and processes

**Potential risks to consider:**
- The agent can access the internet from within the container.
- If you provide credentials (API keys, tokens), the agent can use them.
- Mounted files and directories can be modified or deleted.
- Network requests can be made to external services.

For detailed security information, see our [Runtime Architecture](/usage/architecture/runtime),
[Security Configuration](/usage/configuration-options#security-configuration),
and [Hardened Docker Installation](/usage/runtimes/docker#hardened-docker-installation) documentation.

## File Storage and Access

### Where are my files stored?

Your files are stored in different locations depending on how you've configured OpenHands:

**Default behavior (no file mounting):**
- Files created by the agent are stored inside the runtime Docker container.
- These files are temporary and will be lost when the container is removed.
- The agent works in the `/workspace` directory inside the runtime container.

**When you mount your local filesystem (following [this](/usage/runtimes/docker#connecting-to-your-filesystem)):**
- Your local files are mounted into the container's `/workspace` directory.
- Changes made by the agent are reflected in your local filesystem.
- Files persist after the container is stopped.

<Warning>
Be careful when mounting your filesystem - the agent can modify or delete any files in the mounted directory.
</Warning>

## Development Tools and Environment

### How do I get the dev tools I need?

OpenHands comes with a basic runtime environment that includes Python and Node.js.
It also has the ability to install any tools it needs, so usually it's sufficient to ask it to set up its environment.

If you would like to set things up more systematically, you can:
- **Use setup.sh**: Add a [setup.sh file](/usage/prompting/repository#setup-script) file to
  your repository, which will be run every time the agent starts.
- **Use a custom sandbox**: Use a [custom docker image](/usage/how-to/custom-sandbox-guide) to initialize the sandbox.

### Something's not working. Where can I get help?

1. **Search existing issues**: Check our [GitHub issues](https://github.com/All-Hands-AI/OpenHands/issues) to see if
  others have encountered the same problem.
2. **Join our community**: Get help from other users and developers:
   - [Slack community](https://join.slack.com/t/openhands-ai/shared_invite/zt-3847of6xi-xuYJIPa6YIPg4ElbDWbtSA)
   - [Discord server](https://discord.gg/ESHStjSjD4)
3. **Check our troubleshooting guide**: Common issues and solutions are documented in
  [Troubleshooting](/usage/troubleshooting/troubleshooting).
4. **Report bugs**: If you've found a bug, please [create an issue](https://github.com/All-Hands-AI/OpenHands/issues/new)
  and fill in as much detail as possible.



================================================
FILE: docs/usage/feedback.mdx
================================================
# ✅ Providing Feedback

When using OpenHands, you will encounter cases where things work well, and others where they don't. We encourage you to
provide feedback when you use OpenHands to help give feedback to the development team, and perhaps more importantly,
create an open corpus of coding agent training examples -- Share-OpenHands!

## 📝 How to Provide Feedback

Providing feedback is easy! When you are using OpenHands, you can press the thumbs-up or thumbs-down button at any point
during your interaction. You will be prompted to provide your email address
(e.g. so we can contact you if we want to ask any follow-up questions), and you can choose whether you want to provide feedback publicly or privately.

<iframe width="560" height="315" src="https://www.youtube.com/embed/5rFx-StMVV0?si=svo7xzp6LhGK_GXr" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

## 📜 Data Use and Privacy

### Data sharing settings

When you submit data, you can submit it either publicly or privately.

- **Public** data will be distributed under the MIT License, like OpenHands itself, and can be used by the community to
train and test models. Obviously, feedback that you can make public will be more valuable for the community as a whole,
so when you are not dealing with sensitive information, we would encourage you to choose this option!
- **Private** data will be made available to the OpenHands team for the purpose of improving OpenHands.
However, a link with a unique ID will still be created that you can share publicly with others.

### Who collects and stores the data?

The data is collected and stored by [All Hands AI](https://all-hands.dev), a company founded by OpenHands maintainers to support and improve OpenHands.

### How will public data be released?

The public data will be released when we hit fixed milestones, such as 1,000 public examples, 10,000 public examples, etc.
At this time, we will follow the following release process:

1. All people who contributed public feedback will receive an email describing the data release and being given an opportunity to opt out.
2. The person or people in charge of the data release will perform quality control of the data, removing low-quality feedback,
removing email submitter email addresses, and attempting to remove any sensitive information.
3. The data will be released publicly under the MIT license through commonly used sites such as GitHub or Hugging Face.

### What if I want my data deleted?

For data on the All Hands AI servers, we are happy to delete it at request:

**One Piece of Data:** If you want one piece of data deleted, we will shortly be adding a mechanism to delete pieces of
data using the link and password that is displayed on the interface when you submit data.

**All Data:** If you would like all pieces of your data deleted, or you do not have the ID and password that you
received when submitting the data, please contact `contact@all-hands.dev` from the email address that you registered
when you originally submitted the data.



================================================
FILE: docs/usage/getting-started.mdx
================================================
---
title: Start Building
description: So you've [run OpenHands](/usage/installation). Now what?
icon: code
---

OpenHands can assist with a range of engineering tasks. However, the technology is still new, and we’re far from having
agents that can handle complex tasks independently. It’s important to understand what the agent does well and where it
needs support.

## Hello World

Start with a simple "hello world" example. It might be trickier than it seems!

Prompt the agent with:
> Write a bash script hello.sh that prints "hello world!"

The agent will write the script, set the correct permissions, and run it to check the output.

You can continue prompting the agent to refine your code. This is a great way to
work with agents. Start simple, and iterate.

> Modify hello.sh so that it accepts a name as the first argument, but defaults to "world"

You can also use any language you need. The agent may need time to set up the environment.

> Please convert hello.sh to a Ruby script, and run it

## Building From Scratch

Agents excel at "greenfield" tasks, where they don’t need context about existing code and
they can start from scratch.
Begin with a simple task and iterate from there. Be specific about what you want and the tech stack.

For example, we might build a TODO app:

> Build a frontend-only TODO app in React. All state should be stored in localStorage.

Once the basic structure is in place, continue refining:

> Allow adding an optional due date to each task.

Just like normal development, commit and push your code often.
This way you can always revert back to an old state if the agent goes off track.
You can ask the agent to commit and push for you:

> Commit the changes and push them to a new branch called "feature/due-dates"

## Adding New Code

OpenHands is great at adding new code to an existing codebase.

For instance, you can ask OpenHands to add a GitHub action that lints your code. It might check your codebase to
determine the language, then create a new file in `./github/workflows/lint.yml`.

> Add a GitHub action that lints the code in this repository.

Some tasks need more context. While OpenHands can use commands like ls and grep to search, providing context upfront
speeds things up and reduces token usage.

> Modify ./backend/api/routes.js to add a new route that returns a list of all tasks.

> Add a new React component to the ./frontend/components directory to display a list of Widgets.
> It should use the existing Widget component.

## Refactoring

OpenHands does great at refactoring code in small chunks. Rather than rearchitecting the entire codebase,
it's more effective to break up long files and functions or rename variables.

> Rename all the single-letter variables in ./app.go.

> Split the `build_and_deploy_widgets` function into two functions, `build_widgets` and `deploy_widgets` in widget.php.

> Break ./api/routes.js into separate files for each route.

## Bug Fixes

OpenHands can help track down and fix bugs, but bug fixing can be tricky and often requires more context.
It’s helpful if you’ve already diagnosed the issue and just need OpenHands to handle the logic.

> The email field in the `/subscribe` endpoint is rejecting .io domains. Fix this.

> The `search_widgets` function in ./app.py is doing a case-sensitive search. Make it case-insensitive.

For bug fixing, test-driven development can be really useful. You can ask the agent to write a new test and iterate
until the bug is fixed:

> The `hello` function crashes on the empty string. Write a test that reproduces this bug, then fix the code so it passes.

## More

OpenHands can assist with nearly any coding task, but it takes some practice to get the best results.
Keep these tips in mind:
* Keep your tasks small.
* Be specific.
* Provide plenty of context.
* Commit and push frequently.

See [Prompting Best Practices](./prompting/prompting-best-practices) for more tips on how to get the most out of OpenHands.



================================================
FILE: docs/usage/installation.mdx
================================================
---
title: Quick Start
description: Running OpenHands Cloud or running on your own.
icon: rocket
---

## OpenHands Cloud

The easiest way to get started with OpenHands is on OpenHands Cloud, which comes with $20 in free credits for new users.

To get started with OpenHands Cloud, visit [app.all-hands.dev](https://app.all-hands.dev).

For more information see [getting started with OpenHands Cloud.](/usage/cloud/openhands-cloud)

## Running OpenHands on Your Own

Run OpenHands on your local system and bring your own LLM and API key.

For more information see [running OpenHands on your own.](/usage/local-setup)



================================================
FILE: docs/usage/key-features.mdx
================================================
---
title: Key Features
icon: bars
---

![overview](/static/img/oh-features.png)

### Chat Panel
- Displays the conversation between the user and OpenHands.
- OpenHands explains its actions in this panel.

### Changes
- Shows the file changes performed by OpenHands.

### VS Code
- Embedded VS Code for browsing and modifying files.
- Can also be used to upload and download files.

### Terminal
- A space for OpenHands and users to run terminal commands.

### Jupyter
- Shows all Python commands that were executed by OpenHands.
- Particularly handy when using OpenHands to perform data visualization tasks.

### App
- Displays the web server when OpenHands runs an application.
- Users can interact with the running application.

### Browser
- Used by OpenHands to browse websites.
- The browser is non-interactive.



================================================
FILE: docs/usage/local-setup.mdx
================================================
---
title: Getting Started
description: Getting started with running OpenHands on your own.
---

## Recommended Methods for Running Openhands on Your Local System

### System Requirements

- MacOS with [Docker Desktop support](https://docs.docker.com/desktop/setup/install/mac-install/#system-requirements)
- Linux
- Windows with [WSL](https://learn.microsoft.com/en-us/windows/wsl/install) and [Docker Desktop support](https://docs.docker.com/desktop/setup/install/windows-install/#system-requirements)
- Windows without WSL (see [Windows Without WSL Guide](/usage/windows-without-wsl))

A system with a modern processor and a minimum of **4GB RAM** is recommended to run OpenHands.

### Prerequisites

<AccordionGroup>

<Accordion title="MacOS">

  **Docker Desktop**

  1. [Install Docker Desktop on Mac](https://docs.docker.com/desktop/setup/install/mac-install).
  2. Open Docker Desktop, go to `Settings > Advanced` and ensure `Allow the default Docker socket to be used` is enabled.
</Accordion>

<Accordion title="Linux">

  <Note>
  Tested with Ubuntu 22.04.
  </Note>

  **Docker Desktop**

  1. [Install Docker Desktop on Linux](https://docs.docker.com/desktop/setup/install/linux/).

</Accordion>

<Accordion title="Windows">

  **WSL**

  1. [Install WSL](https://learn.microsoft.com/en-us/windows/wsl/install).
  2. Run `wsl --version` in powershell and confirm `Default Version: 2`.

  **Docker Desktop**

  1. [Install Docker Desktop on Windows](https://docs.docker.com/desktop/setup/install/windows-install).
  2. Open Docker Desktop, go to `Settings` and confirm the following:
  - General: `Use the WSL 2 based engine` is enabled.
  - Resources > WSL Integration: `Enable integration with my default WSL distro` is enabled.

  <Note>
  The docker command below to start the app must be run inside the WSL terminal.
  </Note>

  **Alternative: Windows without WSL**

  If you prefer to run OpenHands on Windows without WSL or Docker, see our [Windows Without WSL Guide](/usage/windows-without-wsl).

</Accordion>

</AccordionGroup>

### Start the App

```bash
docker pull docker.all-hands.dev/all-hands-ai/runtime:0.49-nikolaik

docker run -it --rm --pull=always \
    -e SANDBOX_RUNTIME_CONTAINER_IMAGE=docker.all-hands.dev/all-hands-ai/runtime:0.49-nikolaik \
    -e LOG_ALL_EVENTS=true \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v ~/.openhands:/.openhands \
    -p 3000:3000 \
    --add-host host.docker.internal:host-gateway \
    --name openhands-app \
    docker.all-hands.dev/all-hands-ai/openhands:0.49
```

> **Note**: If you used OpenHands before version 0.44, you may want to run `mv ~/.openhands-state ~/.openhands` to migrate your conversation history to the new location.

You'll find OpenHands running at http://localhost:3000!

### Setup

After launching OpenHands, you **must** select an `LLM Provider` and `LLM Model` and enter a corresponding `API Key`.
This can be done during the initial settings popup or by selecting the `Settings`
button (gear icon) in the UI.

If the required model does not exist in the list, in `Settings` under the `LLM` tab, you can toggle `Advanced` options
and manually enter it with the correct prefix in the `Custom Model` text box.
The `Advanced` options also allow you to specify a `Base URL` if required.

#### Getting an API Key

OpenHands requires an API key to access most language models. Here's how to get an API key from the recommended providers:

<AccordionGroup>

<Accordion title="Anthropic (Claude)">

1. [Create an Anthropic account](https://console.anthropic.com/).
2. [Generate an API key](https://console.anthropic.com/settings/keys).
3. [Set up billing](https://console.anthropic.com/settings/billing).

</Accordion>

<Accordion title="OpenAI">

1. [Create an OpenAI account](https://platform.openai.com/).
2. [Generate an API key](https://platform.openai.com/api-keys).
3. [Set up billing](https://platform.openai.com/account/billing/overview).

</Accordion>

<Accordion title="Google (Gemini)">

1. Create a Google account if you don't already have one.
2. [Generate an API key](https://aistudio.google.com/apikey).
3. [Set up billing](https://aistudio.google.com/usage?tab=billing).

</Accordion>

<Accordion title="Local LLM (e.g. LM Studio, llama.cpp, Ollama)">

If your local LLM server isn’t behind an authentication proxy, you can enter any value as the API key (e.g. `local-key`, `test123`) — it won’t be used.

</Accordion>

</AccordionGroup>

Consider setting usage limits to control costs.

#### Using a Local LLM

<Note>
Effective use of local models for agent tasks requires capable hardware, along with models specifically tuned for instruction-following and agent-style behavior.
</Note>

To run OpenHands with a locally hosted language model instead of a cloud provider, see the [Local LLMs guide](/usage/llms/local-llms) for setup instructions.

#### Setting Up Search Engine

OpenHands can be configured to use a search engine to allow the agent to search the web for information when needed.

To enable search functionality in OpenHands:

1. Get a Tavily API key from [tavily.com](https://tavily.com/).
2. Enter the Tavily API key in the Settings page under `LLM` tab > `Search API Key (Tavily)`

For more details, see the [Search Engine Setup](/usage/search-engine-setup) guide.

### Versions

The [docker command above](/usage/local-setup#start-the-app) pulls the most recent stable release of OpenHands. You have other options as well:
- For a specific release, replace `$VERSION` in `openhands:$VERSION` and `runtime:$VERSION`, with the version number.
For example, `0.9` will automatically point to the latest `0.9.x` release, and `0` will point to the latest `0.x.x` release.
- For the most up-to-date development version, replace `$VERSION` in `openhands:$VERSION` and `runtime:$VERSION`, with `main`.
This version is unstable and is recommended for testing or development purposes only.

## Next Steps

- [Connect OpenHands to your local filesystem.](/usage/runtimes/docker#connecting-to-your-filesystem) to use OpenHands with your GitHub repositories
- [Run OpenHands in a scriptable headless mode.](/usage/how-to/headless-mode)
- [Run OpenHands with a friendly CLI.](/usage/how-to/cli-mode)
- [Run OpenHands on tagged issues with a GitHub action.](/usage/how-to/github-action)



================================================
FILE: docs/usage/mcp.mdx
================================================
---
title: Model Context Protocol (MCP)
description: This page outlines how to configure and use the Model Context Protocol (MCP) in OpenHands, allowing you
  to extend the agent's capabilities with custom tools.
---

## Overview

Model Context Protocol (MCP) is a mechanism that allows OpenHands to communicate with external tool servers. These
servers can provide additional functionality to the agent, such as specialized data processing, external API access,
or custom tools. MCP is based on the open standard defined at [modelcontextprotocol.io](https://modelcontextprotocol.io).

## Configuration

MCP configuration can be defined in:
* The OpenHands UI through the Settings under the `MCP` tab.
* The `config.toml` file under the `[mcp]` section if not using the UI.

### Configuration Example via config.toml

```toml
[mcp]
# SSE Servers - External servers that communicate via Server-Sent Events
sse_servers = [
    # Basic SSE server with just a URL
    "http://example.com:8080/mcp",

    # SSE server with API key authentication
    {url="https://secure-example.com/mcp", api_key="your-api-key"}
]

# SHTTP Servers - External servers that communicate via Streamable HTTP
shttp_servers = [
    # Basic SHTTP server with just a URL
    "http://example.com:8080/mcp",

    # SHTTP server with API key authentication
    {url="https://secure-example.com/mcp", api_key="your-api-key"}
]

# Stdio Servers - Local processes that communicate via standard input/output
stdio_servers = [
    # Basic stdio server
    {name="fetch", command="uvx", args=["mcp-server-fetch"]},

    # Stdio server with environment variables
    {
        name="data-processor",
        command="python",
        args=["-m", "my_mcp_server"],
        env={
            "DEBUG": "true",
            "PORT": "8080"
        }
    }
]
```

## Configuration Options

### SSE Servers

SSE servers are configured using either a string URL or an object with the following properties:

- `url` (required)
  - Type: `str`
  - Description: The URL of the SSE server

- `api_key` (optional)
  - Type: `str`
  - Description: API key for authentication

### SHTTP Servers

SHTTP (Streamable HTTP) servers are configured using either a string URL or an object with the following properties:

- `url` (required)
  - Type: `str`
  - Description: The URL of the SHTTP server

- `api_key` (optional)
  - Type: `str`
  - Description: API key for authentication

### Stdio Servers

Stdio servers are configured using an object with the following properties:

- `name` (required)
  - Type: `str`
  - Description: A unique name for the server

- `command` (required)
  - Type: `str`
  - Description: The command to run the server

- `args` (optional)
  - Type: `list of str`
  - Default: `[]`
  - Description: Command-line arguments to pass to the server

- `env` (optional)
  - Type: `dict of str to str`
  - Default: `{}`
  - Description: Environment variables to set for the server process

## How MCP Works

When OpenHands starts, it:

1. Reads the MCP configuration.
2. Connects to any configured SSE and SHTTP servers.
3. Starts any configured stdio servers.
4. Registers the tools provided by these servers with the agent.

The agent can then use these tools just like any built-in tool. When the agent calls an MCP tool:

1. OpenHands routes the call to the appropriate MCP server.
2. The server processes the request and returns a response.
3. OpenHands converts the response to an observation and presents it to the agent.

## Transport Protocols

OpenHands supports three different MCP transport protocols:

### Server-Sent Events (SSE)
SSE is a legacy HTTP-based transport that uses Server-Sent Events for server-to-client communication and HTTP POST requests for client-to-server communication. This transport is suitable for basic streaming scenarios but has limitations in session management and connection resumability.

### Streamable HTTP (SHTTP)
SHTTP is the modern HTTP-based transport protocol that provides enhanced features over SSE:

- **Improved Session Management**: Supports stateful sessions with session IDs for maintaining context across requests
- **Connection Resumability**: Can resume broken connections and replay missed messages using event IDs
- **Bidirectional Communication**: Uses HTTP POST for client-to-server and optional SSE streams for server-to-client communication
- **Better Error Handling**: Enhanced error reporting and recovery mechanisms

SHTTP is the recommended transport for HTTP-based MCP servers as it provides better reliability and features compared to the legacy SSE transport.

### Standard Input/Output (stdio)
Stdio transport enables communication through standard input and output streams, making it ideal for local integrations and command-line tools. This transport is used for locally executed MCP servers that run as separate processes.



================================================
FILE: docs/usage/search-engine-setup.mdx
================================================
---
title: Search Engine Setup
description: Configure OpenHands to use Tavily as a search engine.
---

## Setting Up Search Engine in OpenHands

OpenHands can be configured to use [Tavily](https://tavily.com/) as a search engine, which allows the agent to search the web for information when needed. This capability enhances the agent's ability to provide up-to-date information and solve problems that require external knowledge.

### Getting a Tavily API Key

To use the search functionality in OpenHands, you'll need to obtain a Tavily API key:

1. Visit [Tavily's website](https://tavily.com/) and sign up for an account.
2. Navigate to the API section in your dashboard.
3. Generate a new API key.
4. Copy the API key (it should start with `tvly-`).

### Configuring Search in OpenHands

Once you have your Tavily API key, you can configure OpenHands to use it:

#### In the OpenHands UI

1. Open OpenHands and navigate to the Settings page.
2. Under the `LLM` tab, enter your Tavily API key (starting with `tvly-`) in the `Search API Key (Tavily)` field.
3. Click `Save` to apply the changes.

<Note>
  The search API key field is optional. If you don't provide a key, the search functionality will not be available to the agent.
</Note>

#### Using Configuration Files

If you're running OpenHands in headless mode or via CLI, you can configure the search API key in your configuration file:

```toml
# In your OpenHands config file
[core]
search_api_key = "tvly-your-api-key-here"
```

### How Search Works in OpenHands

When the search engine is configured:

- The agent can decide to search the web when it needs external information.
- Search queries are sent to Tavily's API via [Tavily's MCP server](https://github.com/tavily-ai/tavily-mcp) which
  includes a variety of [tools](https://docs.tavily.com/documentation/api-reference/introduction) (search, extract, crawl, map).
- Results are returned and incorporated into the agent's context.
- The agent can use this information to provide more accurate and up-to-date responses.

### Limitations

- Search results depend on Tavily's coverage and freshness.
- Usage may be subject to Tavily's rate limits and pricing tiers.
- The agent will only search when it determines that external information is needed.

### Troubleshooting

If you encounter issues with the search functionality:

- Verify that your API key is correct and active.
- Check that your API key starts with `tvly-`.
- Ensure you have an active internet connection.
- Check Tavily's status page for any service disruptions.



================================================
FILE: docs/usage/windows-without-wsl.mdx
================================================
---
title: Windows Without WSL
description: Running OpenHands GUI on Windows without using WSL or Docker
---

# Running OpenHands GUI on Windows Without WSL

This guide provides step-by-step instructions for running OpenHands on a Windows machine without using WSL or Docker.

## Prerequisites

1. **Windows 10/11** - A modern Windows operating system
2. **PowerShell 7+** - While Windows PowerShell comes pre-installed on Windows 10/11, PowerShell 7+ is strongly recommended to avoid compatibility issues (see Troubleshooting section for "System.Management.Automation" errors)
3. **.NET Core Runtime** - Required for the PowerShell integration via pythonnet
4. **Python 3.12 or 3.13** - Python 3.12 or 3.13 is required (Python 3.14 is not supported due to pythonnet compatibility)
5. **Git** - For cloning the repository and version control
6. **Node.js and npm** - For running the frontend

## Step 1: Install Required Software

1. **Install Python 3.12 or 3.13**
   - Download Python 3.12.x or 3.13.x from [python.org](https://www.python.org/downloads/)
   - During installation, check "Add Python to PATH"
   - Verify installation by opening PowerShell and running:
     ```powershell
     python --version
     ```

2. **Install PowerShell 7**
   - Download and install PowerShell 7 from the [official PowerShell GitHub repository](https://github.com/PowerShell/PowerShell/releases)
   - Choose the MSI installer appropriate for your system (x64 for most modern computers)
   - Run the installer with default options
   - Verify installation by opening a new terminal and running:
     ```powershell
     pwsh --version
     ```
   - Using PowerShell 7 (pwsh) instead of Windows PowerShell will help avoid "System.Management.Automation" errors

3. **Install .NET Core Runtime**
   - Download and install the .NET Core Runtime from [Microsoft's .NET download page](https://dotnet.microsoft.com/download)
   - Choose the latest .NET Core Runtime (not SDK)
   - Verify installation by opening PowerShell and running:
     ```powershell
     dotnet --info
     ```
   - This step is required for the PowerShell integration via pythonnet. Without it, OpenHands will fall back to a more limited PowerShell implementation.

4. **Install Git**
   - Download Git from [git-scm.com](https://git-scm.com/download/win)
   - Use default installation options
   - Verify installation:
     ```powershell
     git --version
     ```

5. **Install Node.js and npm**
   - Download Node.js from [nodejs.org](https://nodejs.org/) (LTS version recommended)
   - During installation, accept the default options which will install npm as well
   - Verify installation:
     ```powershell
     node --version
     npm --version
     ```

6. **Install Poetry**
   - Open PowerShell as Administrator and run:
     ```powershell
     (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
     ```
   - Add Poetry to your PATH:
     ```powershell
     $env:Path += ";$env:APPDATA\Python\Scripts"
     ```
   - Verify installation:
     ```powershell
     poetry --version
     ```

## Step 2: Clone and Set Up OpenHands

1. **Clone the Repository**
   ```powershell
   git clone https://github.com/All-Hands-AI/OpenHands.git
   cd OpenHands
   ```

2. **Install Dependencies**
   ```powershell
   poetry install
   ```

   This will install all required dependencies, including:
   - pythonnet - Required for Windows PowerShell integration
   - All other OpenHands dependencies

## Step 3: Run OpenHands

1. **Build the Frontend**
   ```powershell
   cd frontend
   npm install
   npm run build
   cd ..
   ```

   This will build the frontend files that the backend will serve.

2. **Start the Backend**
   ```powershell
   # Make sure to use PowerShell 7 (pwsh) instead of Windows PowerShell
   pwsh
   $env:RUNTIME="local"; poetry run uvicorn openhands.server.listen:app --host 0.0.0.0 --port 3000 --reload --reload-exclude "./workspace"
   ```

   This will start the OpenHands app using the local runtime with PowerShell integration, available at `localhost:3000`.

   > **Note**: If you encounter a `RuntimeError: Directory './frontend/build' does not exist` error, make sure you've built the frontend first using the command above.

   > **Important**: Using PowerShell 7 (pwsh) instead of Windows PowerShell is recommended to avoid "System.Management.Automation" errors. If you encounter this error, see the Troubleshooting section below.

3. **Alternatively, Run the Frontend in Development Mode (in a separate PowerShell window)**
   ```powershell
   cd frontend
   npm run dev
   ```

4. **Access the OpenHands GUI**

   Open your browser and navigate to:
   ```
   http://localhost:3000
   ```

   > **Note**: If you're running the frontend in development mode (using `npm run dev`), use port 3001 instead: `http://localhost:3001`

## Installing and Running the CLI

To install and run the OpenHands CLI on Windows without WSL, follow these steps:

### 1. Install uv (Python Package Manager)

Open PowerShell as Administrator and run:

```powershell
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
```

### 2. Install .NET SDK (Required)

The OpenHands CLI **requires** the .NET Core runtime for PowerShell integration. Without it, the CLI will fail to start with a `coreclr` error. Install the .NET SDK which includes the runtime:

```powershell
winget install Microsoft.DotNet.SDK.8
```

Alternatively, you can download and install the .NET SDK from the [official Microsoft website](https://dotnet.microsoft.com/download).

After installation, restart your PowerShell session to ensure the environment variables are updated.

### 3. Install and Run OpenHands

After installing the prerequisites, you can install and run OpenHands with:

```powershell
uvx --python 3.12 --from openhands-ai openhands
```

### Troubleshooting CLI Issues

#### CoreCLR Error

If you encounter an error like `Failed to load CoreCLR` or `pythonnet.load('coreclr')` when running OpenHands CLI, this indicates that the .NET Core runtime is missing or not properly configured. To fix this:

1. Install the .NET SDK as described in step 2 above
2. Verify that your system PATH includes the .NET SDK directories
3. Restart your PowerShell session completely after installing the .NET SDK
4. Make sure you're using PowerShell 7 (pwsh) rather than Windows PowerShell

To verify your .NET installation, run:

```powershell
dotnet --info
```

This should display information about your installed .NET SDKs and runtimes. If this command fails, the .NET SDK is not properly installed or not in your PATH.

If the issue persists after installing the .NET SDK, try installing the specific .NET Runtime version 6.0 or later from the [.NET download page](https://dotnet.microsoft.com/download).

## Limitations on Windows

When running OpenHands on Windows without WSL or Docker, be aware of the following limitations:

1. **Browser Tool Not Supported**: The browser tool is not currently supported on Windows.

2. **.NET Core Requirement**: The PowerShell integration requires .NET Core Runtime to be installed. The CLI implementation attempts to load the CoreCLR at startup with `pythonnet.load('coreclr')` and will fail with an error if .NET Core is not properly installed.

3. **Interactive Shell Commands**: Some interactive shell commands may not work as expected. The PowerShell session implementation has limitations compared to the bash session used on Linux/macOS.

4. **Path Handling**: Windows uses backslashes (`\`) in paths, which may require adjustments when working with code examples designed for Unix-like systems.

## Troubleshooting

### "System.Management.Automation" Not Found Error

If you encounter an error message stating that "System.Management.Automation" was not found, this typically indicates that you have a minimal version of PowerShell installed or that the .NET components required for PowerShell integration are missing.

> **IMPORTANT**: This error is most commonly caused by using the built-in Windows PowerShell (powershell.exe) instead of PowerShell 7 (pwsh.exe). Even if you installed PowerShell 7 during the prerequisites, you may still be using the older Windows PowerShell by default.

To resolve this issue:

1. **Install the latest version of PowerShell 7** from the official Microsoft repository:
   - Visit [https://github.com/PowerShell/PowerShell/releases](https://github.com/PowerShell/PowerShell/releases)
   - Download and install the latest MSI package for your system architecture (x64 for most systems)
   - During installation, ensure you select the following options:
     - "Add PowerShell to PATH environment variable"
     - "Register Windows PowerShell 7 as the default shell"
     - "Enable PowerShell remoting"
   - The installer will place PowerShell 7 in `C:\Program Files\PowerShell\7` by default

2. **Restart your terminal or command prompt** to ensure the new PowerShell is available

3. **Verify the installation** by running:
   ```powershell
   pwsh --version
   ```

   You should see output indicating PowerShell 7.x.x

4. **Run OpenHands using PowerShell 7** instead of Windows PowerShell:
   ```powershell
   pwsh
   cd path\to\openhands
   $env:RUNTIME="local"; poetry run uvicorn openhands.server.listen:app --host 0.0.0.0 --port 3000 --reload --reload-exclude "./workspace"
   ```

   > **Note**: Make sure you're explicitly using `pwsh` (PowerShell 7) and not `powershell` (Windows PowerShell). The command prompt or terminal title should say "PowerShell 7" rather than just "Windows PowerShell".

5. **If the issue persists**, ensure that you have the .NET Runtime installed:
   - Download and install the latest .NET Runtime from [Microsoft's .NET download page](https://dotnet.microsoft.com/download)
   - Choose ".NET Runtime" (not SDK) version 6.0 or later
   - After installation, verify it's properly installed by running:
     ```powershell
     dotnet --info
     ```
   - Restart your computer after installation
   - Try running OpenHands again

6. **Ensure that the .NET Framework is properly installed** on your system:
   - Go to Control Panel > Programs > Programs and Features > Turn Windows features on or off
   - Make sure ".NET Framework 4.8 Advanced Services" is enabled
   - Click OK and restart if prompted

This error occurs because OpenHands uses the pythonnet package to interact with PowerShell, which requires the System.Management.Automation assembly from the .NET framework. A minimal PowerShell installation or older Windows PowerShell (rather than PowerShell 7+) might not include all the necessary components for this integration.



================================================
FILE: docs/usage/architecture/backend.mdx
================================================
---
title: Backend Architecture
---

<div style={{ textAlign: 'center' }}>
  <img src="https://github.com/All-Hands-AI/OpenHands/assets/16201837/97d747e3-29d8-4ccb-8d34-6ad1adb17f38" alt="OpenHands System Architecture Diagram Jul 4 2024" />
  <p><em>OpenHands System Architecture Diagram (July 4, 2024)</em></p>
</div>

This is a high-level overview of the system architecture. The system is divided into two main components: the frontend and the backend. The frontend is responsible for handling user interactions and displaying the results. The backend is responsible for handling the business logic and executing the agents.

# Frontend architecture

![system_architecture.svg](/static/img/system_architecture.svg)

This Overview is simplified to show the main components and their interactions. For a more detailed view of the backend architecture, see the Backend Architecture section below.

# Backend Architecture

_**Disclaimer**: The backend architecture is a work in progress and is subject to change. The following diagram shows the current architecture of the backend based on the commit that is shown in the footer of the diagram._

![backend_architecture.svg](/static/img/backend_architecture.svg)

<details>
  <summary>Updating this Diagram</summary>
  <div>
    The generation of the backend architecture diagram is partially automated.
    The diagram is generated from the type hints in the code using the py2puml
    tool. The diagram is then manually reviewed, adjusted and exported to PNG
    and SVG.

    ## Prerequisites

    - Running python environment in which openhands is executable
    (according to the instructions in the README.md file in the root of the repository)
    - [py2puml](https://github.com/lucsorel/py2puml) installed

## Steps

1.  Autogenerate the diagram by running the following command from the root of the repository:
    `py2puml openhands openhands > docs/architecture/backend_architecture.puml`

2.  Open the generated file in a PlantUML editor, e.g. Visual Studio Code with the PlantUML extension or [PlantText](https://www.planttext.com/)

3.  Review the generated PUML and make all necessary adjustments to the diagram (add missing parts, fix mistakes, improve positioning).
    _py2puml creates the diagram based on the type hints in the code, so missing or incorrect type hints may result in an incomplete or incorrect diagram._

4.  Review the diff between the new and the previous diagram and manually check if the changes are correct.
    _Make sure not to remove parts that were manually added to the diagram in the past and are still relevant._

5.  Add the commit hash of the commit that was used to generate the diagram to the diagram footer.

6.  Export the diagram as PNG and SVG files and replace the existing diagrams in the `docs/architecture` directory. This can be done with (e.g. [PlantText](https://www.planttext.com/))

  </div>
</details>



================================================
FILE: docs/usage/architecture/runtime.mdx
================================================
---
title: Runtime Architecture
---

The OpenHands Docker Runtime is the core component that enables secure and flexible execution of AI agent's action.
It creates a sandboxed environment using Docker, where arbitrary code can be run safely without risking the host system.

## Why do we need a sandboxed runtime?

OpenHands needs to execute arbitrary code in a secure, isolated environment for several reasons:

1. Security: Executing untrusted code can pose significant risks to the host system. A sandboxed environment prevents malicious code from accessing or modifying the host system's resources
2. Consistency: A sandboxed environment ensures that code execution is consistent across different machines and setups, eliminating "it works on my machine" issues
3. Resource Control: Sandboxing allows for better control over resource allocation and usage, preventing runaway processes from affecting the host system
4. Isolation: Different projects or users can work in isolated environments without interfering with each other or the host system
5. Reproducibility: Sandboxed environments make it easier to reproduce bugs and issues, as the execution environment is consistent and controllable

## How does the Runtime work?

The OpenHands Runtime system uses a client-server architecture implemented with Docker containers. Here's an overview of how it works:

```mermaid
graph TD
    A[User-provided Custom Docker Image] --> B[OpenHands Backend]
    B -->|Builds| C[OH Runtime Image]
    C -->|Launches| D[Action Executor]
    D -->|Initializes| E[Browser]
    D -->|Initializes| F[Bash Shell]
    D -->|Initializes| G[Plugins]
    G -->|Initializes| L[Jupyter Server]

    B -->|Spawn| H[Agent]
    B -->|Spawn| I[EventStream]
    I <--->|Execute Action to
    Get Observation
    via REST API
    | D

    H -->|Generate Action| I
    I -->|Obtain Observation| H

    subgraph "Docker Container"
    D
    E
    F
    G
    L
    end
```

1. User Input: The user provides a custom base Docker image
2. Image Building: OpenHands builds a new Docker image (the "OH runtime image") based on the user-provided image. This new image includes OpenHands-specific code, primarily the "runtime client"
3. Container Launch: When OpenHands starts, it launches a Docker container using the OH runtime image
4. Action Execution Server Initialization: The action execution server initializes an `ActionExecutor` inside the container, setting up necessary components like a bash shell and loading any specified plugins
5. Communication: The OpenHands backend (`openhands/runtime/impl/eventstream/eventstream_runtime.py`) communicates with the action execution server over RESTful API, sending actions and receiving observations
6. Action Execution: The runtime client receives actions from the backend, executes them in the sandboxed environment, and sends back observations
7. Observation Return: The action execution server sends execution results back to the OpenHands backend as observations

The role of the client:

- It acts as an intermediary between the OpenHands backend and the sandboxed environment
- It executes various types of actions (shell commands, file operations, Python code, etc.) safely within the container
- It manages the state of the sandboxed environment, including the current working directory and loaded plugins
- It formats and returns observations to the backend, ensuring a consistent interface for processing results

## How OpenHands builds and maintains OH Runtime images

OpenHands' approach to building and managing runtime images ensures efficiency, consistency, and flexibility in creating and maintaining Docker images for both production and development environments.

Check out the [relevant code](https://github.com/All-Hands-AI/OpenHands/blob/main/openhands/runtime/utils/runtime_build.py) if you are interested in more details.

### Image Tagging System

OpenHands uses a three-tag system for its runtime images to balance reproducibility with flexibility.
Tags may be in one of 2 formats:

- **Versioned Tag**: `oh_v{openhands_version}_{base_image}` (e.g.: `oh_v0.9.9_nikolaik_s_python-nodejs_t_python3.12-nodejs22`)
- **Lock Tag**: `oh_v{openhands_version}_{16_digit_lock_hash}` (e.g.: `oh_v0.9.9_1234567890abcdef`)
- **Source Tag**: `oh_v{openhands_version}_{16_digit_lock_hash}_{16_digit_source_hash}`
  (e.g.: `oh_v0.9.9_1234567890abcdef_1234567890abcdef`)

#### Source Tag - Most Specific

This is the first 16 digits of the MD5 of the directory hash for the source directory. This gives a hash
for only the openhands source

#### Lock Tag

This hash is built from the first 16 digits of the MD5 of:

- The name of the base image upon which the image was built (e.g.: `nikolaik/python-nodejs:python3.12-nodejs22`)
- The content of the `pyproject.toml` included in the image.
- The content of the `poetry.lock` included in the image.

This effectively gives a hash for the dependencies of Openhands independent of the source code.

#### Versioned Tag - Most Generic

This tag is a concatenation of openhands version and the base image name (transformed to fit in tag standard).

#### Build Process

When generating an image...

- **No re-build**: OpenHands first checks whether an image with the same **most specific source tag** exists. If there is such an image,
  no build is performed - the existing image is used.
- **Fastest re-build**: OpenHands next checks whether an image with the **generic lock tag** exists. If there is such an image,
  OpenHands builds a new image based upon it, bypassing all installation steps (like `poetry install` and
  `apt-get`) except a final operation to copy the current source code. The new image is tagged with a
  **source** tag only.
- **Ok-ish re-build**: If neither a **source** nor **lock** tag exists, an image will be built based upon the **versioned** tag image.
  In versioned tag image, most dependencies should already been installed hence saving time.
- **Slowest re-build**: If all of the three tags don't exists, a brand new image is built based upon the base
  image (Which is a slower operation). This new image is tagged with all the **source**, **lock**, and **versioned** tags.

This tagging approach allows OpenHands to efficiently manage both development and production environments.

1. Identical source code and Dockerfile always produce the same image (via hash-based tags)
2. The system can quickly rebuild images when minor changes occur (by leveraging recent compatible images)
3. The **lock** tag (e.g., `runtime:oh_v0.9.3_1234567890abcdef`) always points to the latest build for a particular base image, dependency, and OpenHands version combination

## Runtime Plugin System

The OpenHands Runtime supports a plugin system that allows for extending functionality and customizing the runtime environment. Plugins are initialized when the runtime client starts up.

Check [an example of Jupyter plugin here](https://github.com/All-Hands-AI/OpenHands/blob/ecf4aed28b0cf7c18d4d8ff554883ba182fc6bdd/openhands/runtime/plugins/jupyter/__init__.py#L21-L55) if you want to implement your own plugin.

*More details about the Plugin system are still under construction - contributions are welcomed!*

Key aspects of the plugin system:

1. Plugin Definition: Plugins are defined as Python classes that inherit from a base `Plugin` class
2. Plugin Registration: Available plugins are registered in an `ALL_PLUGINS` dictionary
3. Plugin Specification: Plugins are associated with `Agent.sandbox_plugins: list[PluginRequirement]`. Users can specify which plugins to load when initializing the runtime
4. Initialization: Plugins are initialized asynchronously when the runtime client starts
5. Usage: The runtime client can use initialized plugins to extend its capabilities (e.g., the JupyterPlugin for running IPython cells)



================================================
FILE: docs/usage/cloud/bitbucket-installation.mdx
================================================
---
title: Bitbucket Integration
description: This guide walks you through the process of installing OpenHands Cloud for your Bitbucket repositories. Once
  set up, it will allow OpenHands to work with your Bitbucket repository.
---

## Prerequisites

- Signed in to [OpenHands Cloud](https://app.all-hands.dev) with [a Bitbucket account](/usage/cloud/openhands-cloud).

## Adding Bitbucket Repository Access

Upon signing into OpenHands Cloud with a Bitbucket account, OpenHands will have access to your repositories.

## Working With Bitbucket Repos in Openhands Cloud

After signing in with a Bitbucket account, use the `select a repo` and `select a branch` dropdowns to select the
appropriate repository and branch you'd like OpenHands to work on. Then click on `Launch` to start the conversation!

![Connect Repo](/static/img/connect-repo-no-github.png)

## Next Steps

- [Learn about the Cloud UI](/usage/cloud/cloud-ui).
- [Use the Cloud API](/usage/cloud/cloud-api) to programmatically interact with OpenHands.



================================================
FILE: docs/usage/cloud/cloud-api.mdx
================================================
---
title: Cloud API
description: OpenHands Cloud provides a REST API that allows you to programmatically interact with OpenHands.
  This guide explains how to obtain an API key and use the API to start conversations and retrieve their status.
---

For the available API endpoints, refer to the
[OpenHands API Reference](https://docs.all-hands.dev/api-reference).

## Obtaining an API Key

To use the OpenHands Cloud API, you'll need to generate an API key:

1. Log in to your [OpenHands Cloud](https://app.all-hands.dev) account.
2. Navigate to the [Settings page](https://app.all-hands.dev/settings).
3. Select the `API Keys` tab.
4. Click `Create API Key`.
5. Give your key a descriptive name (Example: "Development" or "Production") and select `Create`.
6. Copy the generated API key and store it securely. It will only be shown once.

![API Key Generation](/static/img/api-key-generation.png)

## API Usage

### Starting a New Conversation

To start a new conversation with OpenHands to perform a task, you'll need to make a POST request to the conversation endpoint.

#### Request Parameters

| Parameter          | Type     | Required | Description                                                                                          |
|--------------------|----------|----------|------------------------------------------------------------------------------------------------------|
| `initial_user_msg` | string   | Yes      | The initial message to start the conversation.                                                       |
| `repository`       | string   | No       | Git repository name to provide context in the format `owner/repo`. You must have access to the repo. |

#### Examples


<Accordion title="cURL">
  ```bash
  curl -X POST "https://app.all-hands.dev/api/conversations" \
    -H "Authorization: Bearer YOUR_API_KEY" \
    -H "Content-Type: application/json" \
    -d '{
      "initial_user_msg": "Check whether there is any incorrect information in the README.md file and send a PR to fix it if so.",
      "repository": "yourusername/your-repo"
    }'
  ```
</Accordion>

<Accordion title="Python (with requests)">
  ```python
  import requests

  api_key = "YOUR_API_KEY"
  url = "https://app.all-hands.dev/api/conversations"

  headers = {
      "Authorization": f"Bearer {api_key}",
      "Content-Type": "application/json"
  }

  data = {
      "initial_user_msg": "Check whether there is any incorrect information in the README.md file and send a PR to fix it if so.",
      "repository": "yourusername/your-repo"
  }

  response = requests.post(url, headers=headers, json=data)
  conversation = response.json()

  print(f"Conversation Link: https://app.all-hands.dev/conversations/{conversation['conversation_id']}")
  print(f"Status: {conversation['status']}")
  ```
</Accordion>

<Accordion title="TypeScript/JavaScript (with fetch)">
  ```typescript
  const apiKey = "YOUR_API_KEY";
  const url = "https://app.all-hands.dev/api/conversations";

  const headers = {
    "Authorization": `Bearer ${apiKey}`,
    "Content-Type": "application/json"
  };

  const data = {
    initial_user_msg: "Check whether there is any incorrect information in the README.md file and send a PR to fix it if so.",
    repository: "yourusername/your-repo"
  };

  async function startConversation() {
    try {
      const response = await fetch(url, {
        method: "POST",
        headers: headers,
        body: JSON.stringify(data)
      });

      const conversation = await response.json();

      console.log(`Conversation Link: https://app.all-hands.dev/conversations/${conversation.id}`);
      console.log(`Status: ${conversation.status}`);

      return conversation;
    } catch (error) {
      console.error("Error starting conversation:", error);
    }
  }

  startConversation();
  ```
</Accordion>

#### Response

The API will return a JSON object with details about the created conversation:

```json
{
  "status": "ok",
  "conversation_id": "abc1234",
}
```

You may receive an `AuthenticationError` if:

- You provided an invalid API key.
- You provided the wrong repository name.
- You don't have access to the repository.


### Retrieving Conversation Status

You can check the status of a conversation by making a GET request to the conversation endpoint.

#### Endpoint

```
GET https://app.all-hands.dev/api/conversations/{conversation_id}
```

#### Example

<Accordion title="cURL">
  ```bash
  curl -X GET "https://app.all-hands.dev/api/conversations/{conversation_id}" \
    -H "Authorization: Bearer YOUR_API_KEY"
  ```
</Accordion>

#### Response

The response is formatted as follows:

```json
{
  "conversation_id":"abc1234",
  "title":"Update README.md",
  "created_at":"2025-04-29T15:13:51.370706Z",
  "last_updated_at":"2025-04-29T15:13:57.199210Z",
  "status":"RUNNING",
  "selected_repository":"yourusername/your-repo",
  "trigger":"gui"
}
```

## Rate Limits

If you have too many conversations running at once, older conversations will be paused to limit the number of concurrent conversations.
If you're running into issues and need a higher limit for your use case, please contact us at [contact@all-hands.dev](mailto:contact@all-hands.dev).



================================================
FILE: docs/usage/cloud/cloud-ui.mdx
================================================
---
title: Cloud UI
description: The Cloud UI provides a web interface for interacting with OpenHands. This page provides references on
 how to use the OpenHands Cloud UI.
---

## Landing Page

The landing page is where you can:

- [Add GitHub repository access](/usage/cloud/github-installation#adding-github-repository-access) to OpenHands.
- [Select a GitHub repo](/usage/cloud/github-installation#working-with-github-repos-in-openhands-cloud),
  [a GitLab repo](/usage/cloud/gitlab-installation#working-with-gitlab-repos-in-openhands-cloud) or
  [a Bitbucket repo](/usage/cloud/bitbucket-installation#working-with-bitbucket-repos-in-openhands-cloud) to start working on.
- See `Suggested Tasks` for repositories that OpenHands has access to.
- Launch an empty conversation using `Launch from Scratch`.

## Settings

The Settings page allows you to:

- [Configure GitHub repository access](/usage/cloud/github-installation#modifying-repository-access) for OpenHands.
- [Install the OpenHands Slack app](/usage/cloud/slack-installation).
- Set application settings like your preferred language, notifications and other preferences.
- Add credits to your account.
- [Generate custom secrets](/usage/common-settings#secrets-management).
- [Create API keys to work with OpenHands programmatically](/usage/cloud/cloud-api).
- Change your email address.

## Key Features

For an overview of the key features available inside a conversation, please refer to the [Key Features](/usage/key-features)
section of the documentation.

## Next Steps

- [Install GitHub Integration](/usage/cloud/github-installation) to use OpenHands with your GitHub repositories.
- [Install GitLab Integration](/usage/cloud/gitlab-installation) to use OpenHands with your GitLab repositories.
- [Use the Cloud API](/usage/cloud/cloud-api) to programmatically interact with OpenHands.



================================================
FILE: docs/usage/cloud/github-installation.mdx
================================================
---
title: GitHub Integration
description: This guide walks you through the process of installing OpenHands Cloud for your GitHub repositories. Once
  set up, it will allow OpenHands to work with your GitHub repository through the Cloud UI or straight from GitHub!
---

## Prerequisites

- Signed in to [OpenHands Cloud](https://app.all-hands.dev) with [a GitHub account](/usage/cloud/openhands-cloud).

## Adding GitHub Repository Access

You can grant OpenHands access to specific GitHub repositories:

1. Click on `Add GitHub repos` on the landing page.
2. Select your organization and choose the specific repositories to grant OpenHands access to.
<Accordion title="OpenHands permissions">
  - OpenHands requests short-lived tokens (8-hour expiration) with these permissions:
     - Actions: Read and write
     - Commit statuses: Read and write
     - Contents: Read and write
     - Issues: Read and write
     - Metadata: Read-only
     - Pull requests: Read and write
     - Webhooks: Read and write
     - Workflows: Read and write
   - Repository access for a user is granted based on:
     - Permission granted for the repository
     - User's GitHub permissions (owner/collaborator)
</Accordion>

3. Click `Install & Authorize`.

## Modifying Repository Access

You can modify GitHub repository access at any time by:
- Selecting `Add GitHub repos` on the landing page or
- Visiting the Settings page and selecting `Configure GitHub Repositories` under the `Integrations` tab

## Working With GitHub Repos in Openhands Cloud

Once you've granted GitHub repository access, you can start working with your GitHub repository. Use the `select a repo`
and `select a branch` dropdowns to select the appropriate repository and branch you'd like OpenHands to work on. Then
click on `Launch` to start the conversation!

![Connect Repo](/static/img/connect-repo.png)

## Working on Github Issues and Pull Requests Using Openhands

Giving GitHub repository access to OpenHands also allows you to work on GitHub issues and pull requests directly.

### Working with Issues

On your repository, label an issue with `openhands` or add a message starting with `@openhands`. OpenHands will:
1. Comment on the issue to let you know it is working on it.
   - You can click on the link to track the progress on OpenHands Cloud.
2. Open a pull request if it determines that the issue has been successfully resolved.
3. Comment on the issue with a summary of the performed tasks and a link to the PR.

### Working with Pull Requests

To get OpenHands to work on pull requests, mention `@openhands` in the comments to:
- Ask questions
- Request updates
- Get code explanations

**Important Note**: The `@openhands` mention functionality in pull requests only works if the pull request is both *to* and *from* a repository that you have added through the interface. This is because OpenHands needs appropriate permissions to access both repositories.

## Next Steps

- [Learn about the Cloud UI](/usage/cloud/cloud-ui).
- [Use the Cloud API](/usage/cloud/cloud-api) to programmatically interact with OpenHands.



================================================
FILE: docs/usage/cloud/gitlab-installation.mdx
================================================
---
title: GitLab Integration
description: This guide walks you through the process of installing OpenHands Cloud for your GitLab repositories. Once
  set up, it will allow OpenHands to work with your GitLab repository through the Cloud UI or straight from GitLab!.
---

## Prerequisites

- Signed in to [OpenHands Cloud](https://app.all-hands.dev) with [a GitLab account](/usage/cloud/openhands-cloud).

## Adding GitLab Repository Access

Upon signing into OpenHands Cloud with a GitLab account, OpenHands will have access to your repositories.

## Working With GitLab Repos in Openhands Cloud

After signing in with a Gitlab account, use the `select a repo` and `select a branch` dropdowns to select the
appropriate repository and branch you'd like OpenHands to work on. Then click on `Launch` to start the conversation!

![Connect Repo](/static/img/connect-repo-no-github.png)

## Using Tokens with Reduced Scopes

OpenHands requests an API-scoped token during OAuth authentication. By default, this token is provided to the agent.
To restrict the agent's permissions, you can define a custom secret `GITLAB_TOKEN`, which will override the default token assigned to the agent.
While the high-permission API token is still requested and used for other components of the application (e.g. opening merge requests), the agent will not have access to it.

## Working on GitLab Issues and Merge Requests Using Openhands

<Note>
This feature works for personal projects and is available for group projects with a
[Premium or Ultimate tier subscription](https://docs.gitlab.com/user/project/integrations/webhooks/#group-webhooks).

A webhook is automatically installed within a few minutes after the owner/maintainer of the project or group logs into
OpenHands Cloud. If you decide to delete the webhook, then re-installing will require the support of All Hands AI but we are planning to improve this in a future release.
</Note>

Giving GitLab repository access to OpenHands also allows you to work on GitLab issues and merge requests directly.

### Working with Issues

On your repository, label an issue with `openhands` or add a message starting with `@openhands`. OpenHands will:
1. Comment on the issue to let you know it is working on it.
   - You can click on the link to track the progress on OpenHands Cloud.
2. Open a merge request if it determines that the issue has been successfully resolved.
3. Comment on the issue with a summary of the performed tasks and a link to the PR.

### Working with Merge Requests

To get OpenHands to work on merge requests, mention `@openhands` in the comments to:
- Ask questions
- Request updates
- Get code explanations

## Next Steps

- [Learn about the Cloud UI](/usage/cloud/cloud-ui).
- [Use the Cloud API](/usage/cloud/cloud-api) to programmatically interact with OpenHands.



================================================
FILE: docs/usage/cloud/openhands-cloud.mdx
================================================
---
title: Getting Started
description: Getting started with OpenHands Cloud.
---

## Accessing OpenHands Cloud

OpenHands Cloud is the hosted cloud version of All Hands AI's OpenHands. To get started with OpenHands Cloud,
visit [app.all-hands.dev](https://app.all-hands.dev).

You'll be prompted to connect with your GitHub, GitLab or Bitbucket account:

1. Click `Log in with GitHub`, `Log in with GitLab` or `Log in with Bitbucket`.
2. Review the permissions requested by OpenHands and authorize the application.
   - OpenHands will require certain permissions from your account. To read more about these permissions,
     you can click the `Learn more` link on the authorization page.
3. Review and accept the `terms of service` and select `Continue`.

## Next Steps

Once you've connected your account, you can:

- [Install GitHub Integration](/usage/cloud/github-installation) to use OpenHands with your GitHub repositories.
- [Install GitLab Integration](/usage/cloud/gitlab-installation) to use OpenHands with your GitLab repositories.
- [Install Bitbucket Integration](/usage/cloud/bitbucket-installation) to use OpenHands with your Bitbucket repositories.
- [Learn about the Cloud UI](/usage/cloud/cloud-ui).
- [Use the Cloud API](/usage/cloud/cloud-api) to programmatically interact with OpenHands.



================================================
FILE: docs/usage/cloud/slack-installation.mdx
================================================
---
title: Slack Integration (Beta)
description: This guide walks you through installing the OpenHands Slack app.
---

<iframe
  className="w-full aspect-video"
  src="https://www.youtube.com/embed/hbloGmfZsJ4"
  title="OpenHands Slack Integration Tutorial"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
  allowFullScreen>
</iframe>

## Prerequisites

- Access to OpenHands Cloud.

## Installation Steps

<AccordionGroup>
<Accordion title="Install Slack App (only for Slack admins/owners)">

  **This step is for Slack admins/owners**

  1. Make sure you have permissions to install Apps to your workspace.
  2. Click the button below to install OpenHands Slack App <a target="_blank" href="https://slack.com/oauth/v2/authorize?client_id=7477886716822.8729519890534&scope=app_mentions:read,chat:write,users:read,channels:history,groups:history,mpim:history,im:history&user_scope=channels:history,groups:history,im:history,mpim:history"><img alt="Add to Slack" height="40" width="139" src="https://platform.slack-edge.com/img/add_to_slack.png" srcSet="https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x" /></a>
  3. In the top right corner, select the workspace to install the OpenHands Slack app.
  4. Review permissions and click allow.

</Accordion>

<Accordion title="Authorize Slack App (for all Slack workspace members)">

  **Make sure your Slack workspace admin/owner has installed OpenHands Slack App first.**

  Every user in the Slack workspace (including admins/owners) must link their OpenHands Cloud account to the OpenHands Slack App. To do this:
  1. Visit [integrations settings](https://app.all-hands.dev/settings/integrations) in OpenHands Cloud.
  2. Click `Install OpenHands Slack App`.
  3. In the top right corner, select the workspace to install the OpenHands Slack app.
  4. Review permissions and click allow.

  Depending on the workspace settings, you may need approval from your Slack admin to authorize the Slack App.

</Accordion>

</AccordionGroup>


## Working With the Slack App

To start a new conversation, you can mention `@openhands` in a new message or a thread inside any Slack channel.

Once a conversation is started, all thread messages underneath it will be follow-up messages to OpenHands.

To send follow-up messages for the same conversation, mention `@openhands` in a thread reply to the original message. You must be the user who started the conversation.

## Example conversation

### Start a new conversation, and select repo

Conversation is started by mentioning `@openhands`.

![slack-create-convo.png](/static/img/slack-create-convo.png)

### See agent response and send follow up messages

Initial request is followed up by mentioning `@openhands` in a thread reply.

![slack-results-and-follow-up.png](/static/img/slack-results-and-follow-up.png)

## Pro tip

You can mention a repo name when starting a new conversation in the following formats

1. "My-Repo" repo (e.g `@openhands in the openhands repo ...`)
2. "All-Hands-AI/OpenHands" (e.g `@openhands in All-Hands-AI/OpenHands ...`)

The repo match is case insensitive. If a repo name match is made, it will kick off the conversation.
If the repo name partially matches against multiple repos, you'll be asked to select a repo from the filtered list.

![slack-pro-tip.png](/static/img/slack-pro-tip.png)



================================================
FILE: docs/usage/how-to/cli-mode.mdx
================================================
---
title: CLI
description: The Command-Line Interface (CLI) provides a powerful interface that lets you engage with OpenHands
  directly from your terminal.
---

This mode is different from the [headless mode](/usage/how-to/headless-mode), which is non-interactive and better
for scripting.

<iframe
  className="w-full aspect-video"
  src="https://www.youtube.com/embed/PfvIx4y8h7w"
  title="OpenHands CLI Tutorial"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
  allowFullScreen>
</iframe>

## Getting Started

### Running with Python

**Note** - OpenHands requires Python version 3.12 or higher (Python 3.14 is not currently supported)

1. Install OpenHands using pip:
```bash
pip install openhands-ai
```

  Or if you prefer not to manage your own Python environment, you can use `uvx`:

```bash
uvx --python 3.12 --from openhands-ai openhands
```

<AccordionGroup>

<Accordion title="Create shell aliases for easy access across environments">

Add 